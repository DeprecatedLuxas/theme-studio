{
  "id": "vscode://schemas/launch",
  "type": "object",
  "title": "Launch",
  "allowTrailingCommas": true,
  "allowComments": true,
  "required": [],
  "default": {
    "version": "0.2.0",
    "configurations": [],
    "compounds": []
  },
  "properties": {
    "version": {
      "type": "string",
      "description": "Version of this file format.",
      "default": "0.2.0"
    },
    "configurations": {
      "type": "array",
      "description": "List of configurations. Add new configurations or edit existing ones by using IntelliSense.",
      "items": {
        "defaultSnippets": [
          {
            "body": {
              "name": "${1:Attach}",
              "port": 9229,
              "request": "attach",
              "skipFiles": [
                "<node_internals>/**"
              ],
              "type": "pwa-node"
            },
            "description": "Attach to a running node program",
            "label": "Node.js: Attach",
            "type": "node"
          },
          {
            "body": {
              "address": "${2:TCP/IP address of process to be debugged}",
              "localRoot": "^\"\\${workspaceFolder}\"",
              "name": "${1:Attach to Remote}",
              "port": 9229,
              "remoteRoot": "${3:Absolute path to the remote directory containing the program}",
              "request": "attach",
              "skipFiles": [
                "<node_internals>/**"
              ],
              "type": "pwa-node"
            },
            "description": "Attach to the debug port of a remote node program",
            "label": "Node.js: Attach to Remote Program",
            "type": "node"
          },
          {
            "body": {
              "name": "${1:Attach by Process ID}",
              "processId": "^\"\\${command:PickProcess}\"",
              "request": "attach",
              "skipFiles": [
                "<node_internals>/**"
              ],
              "type": "pwa-node"
            },
            "description": "Open process picker to select node process to attach to",
            "label": "Node.js: Attach to Process",
            "type": "node"
          },
          {
            "body": {
              "name": "${2:Launch Program}",
              "program": "^\"\\${workspaceFolder}/${1:app.js}\"",
              "request": "launch",
              "skipFiles": [
                "<node_internals>/**"
              ],
              "type": "pwa-node"
            },
            "description": "Launch a node program in debug mode",
            "label": "Node.js: Launch Program",
            "type": "node"
          },
          {
            "body": {
              "name": "${1:Launch via NPM}",
              "request": "launch",
              "runtimeArgs": [
                "run-script",
                "debug"
              ],
              "runtimeExecutable": "npm",
              "skipFiles": [
                "<node_internals>/**"
              ],
              "type": "pwa-node"
            },
            "label": "Node.js: Launch via npm",
            "markdownDescription": "Launch a node program through an npm `debug` script",
            "type": "node"
          },
          {
            "body": {
              "console": "integratedTerminal",
              "internalConsoleOptions": "neverOpen",
              "name": "nodemon",
              "program": "^\"\\${workspaceFolder}/${1:app.js}\"",
              "request": "launch",
              "restart": true,
              "runtimeExecutable": "nodemon",
              "skipFiles": [
                "<node_internals>/**"
              ],
              "type": "pwa-node"
            },
            "description": "Use nodemon to relaunch a debug session on source changes",
            "label": "Node.js: Nodemon Setup",
            "type": "node"
          },
          {
            "body": {
              "args": [
                "-u",
                "tdd",
                "--timeout",
                "999999",
                "--colors",
                "^\"\\${workspaceFolder}/${1:test}\""
              ],
              "internalConsoleOptions": "openOnSessionStart",
              "name": "Mocha Tests",
              "program": "^\"\\${workspaceFolder}/node_modules/mocha/bin/_mocha\"",
              "request": "launch",
              "skipFiles": [
                "<node_internals>/**"
              ],
              "type": "pwa-node"
            },
            "description": "Debug mocha tests",
            "label": "Node.js: Mocha Tests",
            "type": "node"
          },
          {
            "body": {
              "args": [
                "${1:generator}"
              ],
              "console": "integratedTerminal",
              "internalConsoleOptions": "neverOpen",
              "name": "Yeoman ${1:generator}",
              "program": "^\"\\${workspaceFolder}/node_modules/yo/lib/cli.js\"",
              "request": "launch",
              "skipFiles": [
                "<node_internals>/**"
              ],
              "type": "pwa-node"
            },
            "label": "Node.js: Yeoman generator",
            "markdownDescription": "Debug yeoman generator (install by running `npm link` in project folder)",
            "type": "node"
          },
          {
            "body": {
              "args": [
                "${1:task}"
              ],
              "name": "Gulp ${1:task}",
              "program": "^\"\\${workspaceFolder}/node_modules/gulp/bin/gulp.js\"",
              "request": "launch",
              "skipFiles": [
                "<node_internals>/**"
              ],
              "type": "pwa-node"
            },
            "description": "Debug gulp task (make sure to have a local gulp installed in your project)",
            "label": "Node.js: Gulp task",
            "type": "node"
          },
          {
            "body": {
              "name": "Electron Main",
              "program": "^\"\\${workspaceFolder}/main.js\"",
              "request": "launch",
              "runtimeExecutable": "^\"\\${workspaceFolder}/node_modules/.bin/electron\"",
              "skipFiles": [
                "<node_internals>/**"
              ],
              "type": "pwa-node"
            },
            "description": "Debug the Electron main process",
            "label": "Node.js: Electron Main",
            "type": "node"
          },
          {
            "body": {
              "command": "npm start",
              "name": "Run npm start",
              "request": "launch",
              "type": "node-terminal"
            },
            "description": "Run \"npm start\" in a debug terminal",
            "label": "Run \"npm start\" in a debug terminal"
          },
          {
            "body": {
              "args": [
                "^\"--extensionDevelopmentPath=\\${workspaceFolder}\""
              ],
              "name": "Launch Extension",
              "outFiles": [
                "^\"\\${workspaceFolder}/out/**/*.js\""
              ],
              "preLaunchTask": "npm",
              "request": "launch",
              "type": "pwa-extensionHost"
            },
            "description": "Launch a VS Code extension in debug mode",
            "label": "VS Code Extension Development",
            "type": "extensionHost"
          },
          {
            "body": {
              "name": "Launch Chrome",
              "request": "launch",
              "type": "pwa-chrome",
              "url": "http://localhost:8080",
              "webRoot": "^\"${2:\\${workspaceFolder\\}}\""
            },
            "description": "Launch Chrome to debug a URL",
            "label": "Chrome: Launch",
            "type": "chrome"
          },
          {
            "body": {
              "name": "Attach to Chrome",
              "port": 9222,
              "request": "attach",
              "type": "pwa-chrome",
              "webRoot": "^\"${2:\\${workspaceFolder\\}}\""
            },
            "description": "Attach to an instance of Chrome already in debug mode",
            "label": "Chrome: Attach",
            "type": "chrome"
          },
          {
            "body": {
              "name": "Launch Edge",
              "request": "launch",
              "type": "pwa-msedge",
              "url": "http://localhost:8080",
              "webRoot": "^\"${2:\\${workspaceFolder\\}}\""
            },
            "description": "Launch Edge to debug a URL",
            "label": "Edge: Launch",
            "type": "msedge"
          },
          {
            "body": {
              "name": "Attach to Edge",
              "port": 9222,
              "request": "attach",
              "type": "pwa-msedge",
              "webRoot": "^\"${2:\\${workspaceFolder\\}}\""
            },
            "description": "Attach to an instance of Edge already in debug mode",
            "label": "Edge: Attach",
            "type": "msedge"
          },
          {
            "label": "Go: Launch package",
            "description": "Debug/test the package in the program attribute",
            "body": {
              "name": "${2:Launch Package}",
              "type": "go",
              "request": "launch",
              "mode": "auto",
              "program": "^\"\\${fileDirname}${1:}\""
            }
          },
          {
            "label": "Go: Launch file",
            "description": "Debug the file in the program attribute",
            "body": {
              "name": "${2:Launch file}",
              "type": "go",
              "request": "launch",
              "mode": "debug",
              "program": "^\"${1:\\${file\\}}\""
            }
          },
          {
            "label": "Go: Launch test function",
            "description": "Debug the test function in the args, ensure program attributes points to right package",
            "body": {
              "name": "${3:Launch test function}",
              "type": "go",
              "request": "launch",
              "mode": "test",
              "program": "^\"\\${workspaceFolder}${1:}\"",
              "args": [
                "-test.run",
                "${2:MyTestFunction}"
              ]
            }
          },
          {
            "label": "Go: Attach to local process",
            "description": "Attach to an existing process by process ID",
            "body": {
              "name": "${1:Attach to Process}",
              "type": "go",
              "request": "attach",
              "mode": "local",
              "processId": 0
            }
          },
          {
            "label": "Go: Connect to server",
            "description": "Connect to a remote headless debug server",
            "body": {
              "name": "${1:Connect to server}",
              "type": "go",
              "request": "attach",
              "mode": "remote",
              "remotePath": "^\"\\${workspaceFolder}\"",
              "port": 2345,
              "host": "127.0.0.1"
            }
          },
          {
            "label": "Docker: Attach to Node",
            "description": "Docker: Attach to Node",
            "body": {
              "type": "node",
              "request": "attach",
              "name": "Docker: Attach to Node",
              "remoteRoot": "/usr/src/app"
            }
          },
          {
            "label": "Docker: .NET Core Attach (Preview)",
            "description": "Docker: Attach to a .NET Core process in a container",
            "body": {
              "name": "Docker .NET Core Attach (Preview)",
              "type": "docker",
              "request": "attach",
              "platform": "netCore",
              "sourceFileMap": {
                "/src": "^\"\\${workspaceFolder}\""
              }
            }
          },
          {
            "label": "Ruby: Debug Local File",
            "body": {
              "name": "Debug Local File",
              "type": "Ruby",
              "request": "launch",
              "program": "^\"\\${workspaceRoot}/main.rb\""
            }
          },
          {
            "label": "Ruby: Listen for rdebug-ide",
            "body": {
              "name": "Listen for rdebug-ide",
              "type": "Ruby",
              "request": "attach",
              "remoteHost": "127.0.0.1",
              "remotePort": "1234",
              "remoteWorkspaceRoot": "^\"\\${workspaceRoot}\""
            }
          },
          {
            "label": "Ruby: Rails server",
            "body": {
              "name": "Rails server",
              "type": "Ruby",
              "request": "launch",
              "program": "^\"\\${workspaceRoot}/bin/rails\"",
              "args": [
                "server"
              ]
            }
          },
          {
            "label": "Ruby: RSpec - all",
            "body": {
              "name": "RSpec - all",
              "type": "Ruby",
              "request": "launch",
              "program": "^\"\\${workspaceRoot}/bin/rspec\"",
              "args": [
                "-I",
                "^\"\\${workspaceRoot}\""
              ]
            }
          },
          {
            "label": "Ruby: RSpec - active spec file only",
            "body": {
              "name": "RSpec - active spec file only",
              "type": "Ruby",
              "request": "launch",
              "program": "^\"\\${workspaceRoot}/bin/rspec\"",
              "args": [
                "-I",
                "^\"\\${workspaceRoot}\"",
                "^\"\\${file}\""
              ]
            }
          },
          {
            "label": "Ruby: Cucumber",
            "body": {
              "name": "Cucumber",
              "type": "Ruby",
              "request": "launch",
              "program": "^\"\\${workspaceRoot}/bin/cucumber\""
            }
          }
        ],
        "type": "object",
        "oneOf": [
          {
            "allOf": [
              {
                "$ref": "#/definitions/pwa-node:attach"
              },
              {
                "properties": {
                  "windows": {
                    "$ref": "#/definitions/pwa-node:attach",
                    "description": "Windows specific launch configuration attributes.",
                    "required": []
                  },
                  "osx": {
                    "$ref": "#/definitions/pwa-node:attach",
                    "description": "OS X specific launch configuration attributes.",
                    "required": []
                  },
                  "linux": {
                    "$ref": "#/definitions/pwa-node:attach",
                    "description": "Linux specific launch configuration attributes.",
                    "required": []
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/definitions/pwa-node:launch"
              },
              {
                "properties": {
                  "windows": {
                    "$ref": "#/definitions/pwa-node:launch",
                    "description": "Windows specific launch configuration attributes.",
                    "required": []
                  },
                  "osx": {
                    "$ref": "#/definitions/pwa-node:launch",
                    "description": "OS X specific launch configuration attributes.",
                    "required": []
                  },
                  "linux": {
                    "$ref": "#/definitions/pwa-node:launch",
                    "description": "Linux specific launch configuration attributes.",
                    "required": []
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/definitions/node:attach"
              },
              {
                "properties": {
                  "windows": {
                    "$ref": "#/definitions/node:attach",
                    "description": "Windows specific launch configuration attributes.",
                    "required": []
                  },
                  "osx": {
                    "$ref": "#/definitions/node:attach",
                    "description": "OS X specific launch configuration attributes.",
                    "required": []
                  },
                  "linux": {
                    "$ref": "#/definitions/node:attach",
                    "description": "Linux specific launch configuration attributes.",
                    "required": []
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/definitions/node:launch"
              },
              {
                "properties": {
                  "windows": {
                    "$ref": "#/definitions/node:launch",
                    "description": "Windows specific launch configuration attributes.",
                    "required": []
                  },
                  "osx": {
                    "$ref": "#/definitions/node:launch",
                    "description": "OS X specific launch configuration attributes.",
                    "required": []
                  },
                  "linux": {
                    "$ref": "#/definitions/node:launch",
                    "description": "Linux specific launch configuration attributes.",
                    "required": []
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/definitions/node-terminal:launch"
              },
              {
                "properties": {
                  "windows": {
                    "$ref": "#/definitions/node-terminal:launch",
                    "description": "Windows specific launch configuration attributes.",
                    "required": []
                  },
                  "osx": {
                    "$ref": "#/definitions/node-terminal:launch",
                    "description": "OS X specific launch configuration attributes.",
                    "required": []
                  },
                  "linux": {
                    "$ref": "#/definitions/node-terminal:launch",
                    "description": "Linux specific launch configuration attributes.",
                    "required": []
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/definitions/pwa-extensionHost:launch"
              },
              {
                "properties": {
                  "windows": {
                    "$ref": "#/definitions/pwa-extensionHost:launch",
                    "description": "Windows specific launch configuration attributes.",
                    "required": []
                  },
                  "osx": {
                    "$ref": "#/definitions/pwa-extensionHost:launch",
                    "description": "OS X specific launch configuration attributes.",
                    "required": []
                  },
                  "linux": {
                    "$ref": "#/definitions/pwa-extensionHost:launch",
                    "description": "Linux specific launch configuration attributes.",
                    "required": []
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/definitions/extensionHost:launch"
              },
              {
                "properties": {
                  "windows": {
                    "$ref": "#/definitions/extensionHost:launch",
                    "description": "Windows specific launch configuration attributes.",
                    "required": []
                  },
                  "osx": {
                    "$ref": "#/definitions/extensionHost:launch",
                    "description": "OS X specific launch configuration attributes.",
                    "required": []
                  },
                  "linux": {
                    "$ref": "#/definitions/extensionHost:launch",
                    "description": "Linux specific launch configuration attributes.",
                    "required": []
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/definitions/pwa-chrome:attach"
              },
              {
                "properties": {
                  "windows": {
                    "$ref": "#/definitions/pwa-chrome:attach",
                    "description": "Windows specific launch configuration attributes.",
                    "required": []
                  },
                  "osx": {
                    "$ref": "#/definitions/pwa-chrome:attach",
                    "description": "OS X specific launch configuration attributes.",
                    "required": []
                  },
                  "linux": {
                    "$ref": "#/definitions/pwa-chrome:attach",
                    "description": "Linux specific launch configuration attributes.",
                    "required": []
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/definitions/pwa-chrome:launch"
              },
              {
                "properties": {
                  "windows": {
                    "$ref": "#/definitions/pwa-chrome:launch",
                    "description": "Windows specific launch configuration attributes.",
                    "required": []
                  },
                  "osx": {
                    "$ref": "#/definitions/pwa-chrome:launch",
                    "description": "OS X specific launch configuration attributes.",
                    "required": []
                  },
                  "linux": {
                    "$ref": "#/definitions/pwa-chrome:launch",
                    "description": "Linux specific launch configuration attributes.",
                    "required": []
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/definitions/chrome:attach"
              },
              {
                "properties": {
                  "windows": {
                    "$ref": "#/definitions/chrome:attach",
                    "description": "Windows specific launch configuration attributes.",
                    "required": []
                  },
                  "osx": {
                    "$ref": "#/definitions/chrome:attach",
                    "description": "OS X specific launch configuration attributes.",
                    "required": []
                  },
                  "linux": {
                    "$ref": "#/definitions/chrome:attach",
                    "description": "Linux specific launch configuration attributes.",
                    "required": []
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/definitions/chrome:launch"
              },
              {
                "properties": {
                  "windows": {
                    "$ref": "#/definitions/chrome:launch",
                    "description": "Windows specific launch configuration attributes.",
                    "required": []
                  },
                  "osx": {
                    "$ref": "#/definitions/chrome:launch",
                    "description": "OS X specific launch configuration attributes.",
                    "required": []
                  },
                  "linux": {
                    "$ref": "#/definitions/chrome:launch",
                    "description": "Linux specific launch configuration attributes.",
                    "required": []
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/definitions/pwa-msedge:attach"
              },
              {
                "properties": {
                  "windows": {
                    "$ref": "#/definitions/pwa-msedge:attach",
                    "description": "Windows specific launch configuration attributes.",
                    "required": []
                  },
                  "osx": {
                    "$ref": "#/definitions/pwa-msedge:attach",
                    "description": "OS X specific launch configuration attributes.",
                    "required": []
                  },
                  "linux": {
                    "$ref": "#/definitions/pwa-msedge:attach",
                    "description": "Linux specific launch configuration attributes.",
                    "required": []
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/definitions/pwa-msedge:launch"
              },
              {
                "properties": {
                  "windows": {
                    "$ref": "#/definitions/pwa-msedge:launch",
                    "description": "Windows specific launch configuration attributes.",
                    "required": []
                  },
                  "osx": {
                    "$ref": "#/definitions/pwa-msedge:launch",
                    "description": "OS X specific launch configuration attributes.",
                    "required": []
                  },
                  "linux": {
                    "$ref": "#/definitions/pwa-msedge:launch",
                    "description": "Linux specific launch configuration attributes.",
                    "required": []
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/definitions/msedge:attach"
              },
              {
                "properties": {
                  "windows": {
                    "$ref": "#/definitions/msedge:attach",
                    "description": "Windows specific launch configuration attributes.",
                    "required": []
                  },
                  "osx": {
                    "$ref": "#/definitions/msedge:attach",
                    "description": "OS X specific launch configuration attributes.",
                    "required": []
                  },
                  "linux": {
                    "$ref": "#/definitions/msedge:attach",
                    "description": "Linux specific launch configuration attributes.",
                    "required": []
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/definitions/msedge:launch"
              },
              {
                "properties": {
                  "windows": {
                    "$ref": "#/definitions/msedge:launch",
                    "description": "Windows specific launch configuration attributes.",
                    "required": []
                  },
                  "osx": {
                    "$ref": "#/definitions/msedge:launch",
                    "description": "OS X specific launch configuration attributes.",
                    "required": []
                  },
                  "linux": {
                    "$ref": "#/definitions/msedge:launch",
                    "description": "Linux specific launch configuration attributes.",
                    "required": []
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/definitions/go:launch"
              },
              {
                "properties": {
                  "windows": {
                    "$ref": "#/definitions/go:launch",
                    "description": "Windows specific launch configuration attributes.",
                    "required": []
                  },
                  "osx": {
                    "$ref": "#/definitions/go:launch",
                    "description": "OS X specific launch configuration attributes.",
                    "required": []
                  },
                  "linux": {
                    "$ref": "#/definitions/go:launch",
                    "description": "Linux specific launch configuration attributes.",
                    "required": []
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/definitions/go:attach"
              },
              {
                "properties": {
                  "windows": {
                    "$ref": "#/definitions/go:attach",
                    "description": "Windows specific launch configuration attributes.",
                    "required": []
                  },
                  "osx": {
                    "$ref": "#/definitions/go:attach",
                    "description": "OS X specific launch configuration attributes.",
                    "required": []
                  },
                  "linux": {
                    "$ref": "#/definitions/go:attach",
                    "description": "Linux specific launch configuration attributes.",
                    "required": []
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/definitions/docker:launch"
              },
              {
                "properties": {
                  "windows": {
                    "$ref": "#/definitions/docker:launch",
                    "description": "Windows specific launch configuration attributes.",
                    "required": []
                  },
                  "osx": {
                    "$ref": "#/definitions/docker:launch",
                    "description": "OS X specific launch configuration attributes.",
                    "required": []
                  },
                  "linux": {
                    "$ref": "#/definitions/docker:launch",
                    "description": "Linux specific launch configuration attributes.",
                    "required": []
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/definitions/docker:attach"
              },
              {
                "properties": {
                  "windows": {
                    "$ref": "#/definitions/docker:attach",
                    "description": "Windows specific launch configuration attributes.",
                    "required": []
                  },
                  "osx": {
                    "$ref": "#/definitions/docker:attach",
                    "description": "OS X specific launch configuration attributes.",
                    "required": []
                  },
                  "linux": {
                    "$ref": "#/definitions/docker:attach",
                    "description": "Linux specific launch configuration attributes.",
                    "required": []
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/definitions/python:attach"
              },
              {
                "properties": {
                  "windows": {
                    "$ref": "#/definitions/python:attach",
                    "description": "Windows specific launch configuration attributes.",
                    "required": []
                  },
                  "osx": {
                    "$ref": "#/definitions/python:attach",
                    "description": "OS X specific launch configuration attributes.",
                    "required": []
                  },
                  "linux": {
                    "$ref": "#/definitions/python:attach",
                    "description": "Linux specific launch configuration attributes.",
                    "required": []
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/definitions/python:launch"
              },
              {
                "properties": {
                  "windows": {
                    "$ref": "#/definitions/python:launch",
                    "description": "Windows specific launch configuration attributes.",
                    "required": []
                  },
                  "osx": {
                    "$ref": "#/definitions/python:launch",
                    "description": "OS X specific launch configuration attributes.",
                    "required": []
                  },
                  "linux": {
                    "$ref": "#/definitions/python:launch",
                    "description": "Linux specific launch configuration attributes.",
                    "required": []
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/definitions/Python Kernel Debug Adapter:launch"
              },
              {
                "properties": {
                  "windows": {
                    "$ref": "#/definitions/Python Kernel Debug Adapter:launch",
                    "description": "Windows specific launch configuration attributes.",
                    "required": []
                  },
                  "osx": {
                    "$ref": "#/definitions/Python Kernel Debug Adapter:launch",
                    "description": "OS X specific launch configuration attributes.",
                    "required": []
                  },
                  "linux": {
                    "$ref": "#/definitions/Python Kernel Debug Adapter:launch",
                    "description": "Linux specific launch configuration attributes.",
                    "required": []
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/definitions/vslsJoin:launch"
              },
              {
                "properties": {
                  "windows": {
                    "$ref": "#/definitions/vslsJoin:launch",
                    "description": "Windows specific launch configuration attributes.",
                    "required": []
                  },
                  "osx": {
                    "$ref": "#/definitions/vslsJoin:launch",
                    "description": "OS X specific launch configuration attributes.",
                    "required": []
                  },
                  "linux": {
                    "$ref": "#/definitions/vslsJoin:launch",
                    "description": "Linux specific launch configuration attributes.",
                    "required": []
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/definitions/vslsShare:launch"
              },
              {
                "properties": {
                  "windows": {
                    "$ref": "#/definitions/vslsShare:launch",
                    "description": "Windows specific launch configuration attributes.",
                    "required": []
                  },
                  "osx": {
                    "$ref": "#/definitions/vslsShare:launch",
                    "description": "OS X specific launch configuration attributes.",
                    "required": []
                  },
                  "linux": {
                    "$ref": "#/definitions/vslsShare:launch",
                    "description": "Linux specific launch configuration attributes.",
                    "required": []
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/definitions/Ruby:launch"
              },
              {
                "properties": {
                  "windows": {
                    "$ref": "#/definitions/Ruby:launch",
                    "description": "Windows specific launch configuration attributes.",
                    "required": []
                  },
                  "osx": {
                    "$ref": "#/definitions/Ruby:launch",
                    "description": "OS X specific launch configuration attributes.",
                    "required": []
                  },
                  "linux": {
                    "$ref": "#/definitions/Ruby:launch",
                    "description": "Linux specific launch configuration attributes.",
                    "required": []
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/definitions/Ruby:attach"
              },
              {
                "properties": {
                  "windows": {
                    "$ref": "#/definitions/Ruby:attach",
                    "description": "Windows specific launch configuration attributes.",
                    "required": []
                  },
                  "osx": {
                    "$ref": "#/definitions/Ruby:attach",
                    "description": "OS X specific launch configuration attributes.",
                    "required": []
                  },
                  "linux": {
                    "$ref": "#/definitions/Ruby:attach",
                    "description": "Linux specific launch configuration attributes.",
                    "required": []
                  }
                }
              }
            ]
          }
        ]
      }
    },
    "compounds": {
      "type": "array",
      "description": "List of compounds. Each compound references multiple configurations which will get launched together.",
      "items": {
        "type": "object",
        "required": [
          "name",
          "configurations"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of compound. Appears in the launch configuration drop down menu."
          },
          "presentation": {
            "type": "object",
            "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
            "properties": {
              "hidden": {
                "type": "boolean",
                "default": false,
                "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
              },
              "group": {
                "type": "string",
                "default": "",
                "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
              },
              "order": {
                "type": "number",
                "default": 1,
                "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
              }
            },
            "default": {
              "hidden": false,
              "group": "",
              "order": 1
            }
          },
          "configurations": {
            "type": "array",
            "default": [],
            "items": {
              "oneOf": [
                {
                  "enum": [],
                  "description": "Please use unique configuration names."
                },
                {
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "enum": [],
                      "description": "Name of compound. Appears in the launch configuration drop down menu."
                    },
                    "folder": {
                      "enum": [
                        "theme-studio"
                      ],
                      "description": "Name of folder in which the compound is located."
                    }
                  }
                }
              ]
            },
            "description": "Names of configurations that will be started as part of this compound."
          },
          "stopAll": {
            "type": "boolean",
            "default": false,
            "description": "Controls whether manually terminating one session will stop all of the compound sessions."
          },
          "preLaunchTask": {
            "type": "string",
            "default": "",
            "description": "Task to run before any of the compound configurations start."
          }
        },
        "default": {
          "name": "Compound",
          "configurations": []
        }
      },
      "default": [
        {
          "name": "Compound",
          "configurations": []
        }
      ]
    },
    "inputs": {
      "type": "array",
      "description": "User inputs. Used for defining user input prompts, such as free string input or a choice from several options.",
      "items": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "id",
              "type",
              "description"
            ],
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "description": "The input's id is used to associate an input with a variable of the form ${input:id}."
              },
              "type": {
                "type": "string",
                "description": "The type of user input prompt to use.",
                "enum": [
                  "promptString"
                ],
                "enumDescriptions": [
                  "The 'promptString' type opens an input box to ask the user for input."
                ]
              },
              "description": {
                "type": "string",
                "description": "The description is shown when the user is prompted for input."
              },
              "default": {
                "type": "string",
                "description": "The default value for the input."
              },
              "password": {
                "type": "boolean",
                "description": "Controls if a password input is shown. Password input hides the typed text."
              }
            }
          },
          {
            "type": "object",
            "required": [
              "id",
              "type",
              "description",
              "options"
            ],
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "description": "The input's id is used to associate an input with a variable of the form ${input:id}."
              },
              "type": {
                "type": "string",
                "description": "The type of user input prompt to use.",
                "enum": [
                  "pickString"
                ],
                "enumDescriptions": [
                  "The 'pickString' type shows a selection list."
                ]
              },
              "description": {
                "type": "string",
                "description": "The description is shown when the user is prompted for input."
              },
              "default": {
                "type": "string",
                "description": "The default value for the input."
              },
              "options": {
                "type": "array",
                "description": "An array of strings that defines the options for a quick pick.",
                "items": {
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "object",
                      "required": [
                        "value"
                      ],
                      "additionalProperties": false,
                      "properties": {
                        "label": {
                          "type": "string",
                          "description": "Label for the option."
                        },
                        "value": {
                          "type": "string",
                          "description": "Value for the option."
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "id",
              "type",
              "command"
            ],
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "description": "The input's id is used to associate an input with a variable of the form ${input:id}."
              },
              "type": {
                "type": "string",
                "description": "The type of user input prompt to use.",
                "enum": [
                  "command"
                ],
                "enumDescriptions": [
                  "The 'command' type executes a command."
                ]
              },
              "command": {
                "type": "string",
                "description": "The command to execute for this input variable."
              },
              "args": {
                "oneOf": [
                  {
                    "type": "object",
                    "description": "Optional arguments passed to the command."
                  },
                  {
                    "type": "array",
                    "description": "Optional arguments passed to the command."
                  },
                  {
                    "type": "string",
                    "description": "Optional arguments passed to the command."
                  }
                ]
              }
            }
          }
        ]
      },
      "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
      "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
    }
  },
  "definitions": {
    "common": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of configuration; appears in the launch configuration dropdown menu.",
          "default": "Launch"
        },
        "debugServer": {
          "type": "number",
          "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
          "default": 4711
        },
        "preLaunchTask": {
          "anyOf": [
            {
              "oneOf": []
            },
            {
              "type": [
                "string"
              ]
            }
          ],
          "default": "",
          "defaultSnippets": [
            {
              "body": {
                "task": "",
                "type": ""
              }
            }
          ],
          "description": "Task to run before debug session starts."
        },
        "postDebugTask": {
          "anyOf": [
            {
              "oneOf": []
            },
            {
              "type": [
                "string"
              ]
            }
          ],
          "default": "",
          "defaultSnippets": [
            {
              "body": {
                "task": "",
                "type": ""
              }
            }
          ],
          "description": "Task to run after debug session ends."
        },
        "presentation": {
          "type": "object",
          "description": "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.",
          "properties": {
            "hidden": {
              "type": "boolean",
              "default": false,
              "description": "Controls if this configuration should be shown in the configuration dropdown and the command palette."
            },
            "group": {
              "type": "string",
              "default": "",
              "description": "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
            },
            "order": {
              "type": "number",
              "default": 1,
              "description": "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
            }
          },
          "default": {
            "hidden": false,
            "group": "",
            "order": 1
          }
        },
        "internalConsoleOptions": {
          "enum": [
            "neverOpen",
            "openOnSessionStart",
            "openOnFirstSessionStart"
          ],
          "default": "openOnFirstSessionStart",
          "description": "Controls when the internal debug console should open.",
          "defaultDefaultValue": "openOnFirstSessionStart",
          "scope": 3,
          "restricted": false
        }
      }
    },
    "pwa-node:attach": {
      "properties": {
        "address": {
          "default": "localhost",
          "description": "TCP/IP address of process to be debugged. Default is 'localhost'.",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "attachExistingChildren": {
          "default": false,
          "description": "Whether to attempt to attach to already-spawned child processes.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "autoAttachChildProcesses": {
          "default": true,
          "description": "Attach debugger to new child processes automatically.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "cascadeTerminateToConfigurations": {
          "default": [],
          "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
          "items": {
            "type": "string",
            "uniqueItems": true
          },
          "type": "array",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "continueOnAttach": {
          "default": true,
          "markdownDescription": "If true, we'll automatically resume programs launched and waiting on `--inspect-brk`",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "customDescriptionGenerator": {
          "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "customPropertiesGenerator": {
          "deprecated": true,
          "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "cwd": {
          "default": "${workspaceFolder}",
          "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "enableContentValidation": {
          "default": true,
          "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "env": {
          "additionalProperties": {
            "type": [
              "string",
              "null"
            ]
          },
          "default": {},
          "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
          "type": "object",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "envFile": {
          "default": "${workspaceFolder}/.env",
          "description": "Absolute path to a file containing environment variable definitions.",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "localRoot": {
          "default": null,
          "description": "Path to the local directory containing the program.",
          "type": [
            "string",
            "null"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "nodeVersionHint": {
          "default": 12,
          "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
          "minimum": 8,
          "type": "number",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "outFiles": {
          "default": [
            "${workspaceFolder}/**/*.js",
            "!**/node_modules/**"
          ],
          "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
          "items": {
            "type": "string"
          },
          "type": [
            "array"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "outputCapture": {
          "default": "console",
          "enum": [
            "console",
            "std"
          ],
          "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "pauseForSourceMap": {
          "default": false,
          "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "port": {
          "default": 9229,
          "description": "Debug port to attach to. Default is 9229.",
          "type": "number",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "processId": {
          "default": "${command:PickProcess}",
          "description": "ID of process to attach to.",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "remoteRoot": {
          "default": null,
          "description": "Absolute path to the remote directory containing the program.",
          "type": [
            "string",
            "null"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "resolveSourceMapLocations": {
          "default": [
            "${workspaceFolder}/**",
            "!**/node_modules/**"
          ],
          "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
          "items": {
            "type": "string"
          },
          "type": [
            "array",
            "null"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "restart": {
          "default": true,
          "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "properties": {
                "delay": {
                  "default": 1000,
                  "minimum": 0,
                  "type": "number"
                },
                "maxAttempts": {
                  "default": 10,
                  "minimum": 0,
                  "type": "number"
                }
              },
              "type": "object"
            }
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "runtimeSourcemapPausePatterns": {
          "default": [],
          "items": {
            "type": "string"
          },
          "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
          "type": "array",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "showAsyncStacks": {
          "default": true,
          "description": "Show the async calls that led to the current call stack.",
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "properties": {
                "onAttach": {
                  "default": 32,
                  "type": "number"
                }
              },
              "required": [
                "onAttach"
              ],
              "type": "object"
            },
            {
              "properties": {
                "onceBreakpointResolved": {
                  "default": 32,
                  "type": "number"
                }
              },
              "required": [
                "onceBreakpointResolved"
              ],
              "type": "object"
            }
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "skipFiles": {
          "default": [
            "<node_internals>/**"
          ],
          "description": "An array of file or folder names, or path globs, to skip when debugging.",
          "type": "array",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "smartStep": {
          "default": true,
          "description": "Automatically step through generated code that cannot be mapped back to the original source.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "sourceMapPathOverrides": {
          "default": {
            "meteor://💻app/*": "${workspaceFolder}/*",
            "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
            "webpack://?:*/*": "${workspaceFolder}/*"
          },
          "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
          "type": "object",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "sourceMapRenames": {
          "default": true,
          "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "sourceMaps": {
          "default": true,
          "description": "Use JavaScript source maps (if they exist).",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "timeout": {
          "default": 10000,
          "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
          "type": "number",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "timeouts": {
          "additionalProperties": false,
          "default": {},
          "description": "Timeouts for several debugger operations.",
          "markdownDescription": "Timeouts for several debugger operations.",
          "properties": {
            "sourceMapCumulativePause": {
              "default": 1000,
              "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
              "type": "number"
            },
            "sourceMapMinPause": {
              "default": 1000,
              "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
              "type": "number"
            }
          },
          "type": "object",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "trace": {
          "default": true,
          "description": "Configures what diagnostic output is produced.",
          "oneOf": [
            {
              "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
              "type": "boolean"
            },
            {
              "additionalProperties": false,
              "properties": {
                "console": {
                  "description": "Whether to return trace data from the launched application or browser.",
                  "type": "boolean"
                },
                "level": {
                  "description": "Configures the level of logs recorded.",
                  "enum": [
                    "fatal",
                    "error",
                    "warn",
                    "info",
                    "verbose"
                  ]
                },
                "logFile": {
                  "description": "Configures where on disk logs are written.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "stdio": {
                  "description": "Configures whether logs are also returned to the debug console.",
                  "type": "boolean"
                },
                "tags": {
                  "description": "Configures what types of logs are recorded.",
                  "items": {
                    "enum": [
                      "cdp",
                      "dap",
                      "runtime"
                    ]
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "websocketAddress": {
          "description": "Exact websocket address to attach to. If unspecified, it will be discovered from the address and port.",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "type": {
          "enum": [
            "pwa-node"
          ],
          "description": "Type of configuration.",
          "pattern": "^(?!node2)",
          "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
          "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
        },
        "request": {
          "enum": [
            "attach"
          ],
          "description": "Request type of configuration. Can be \"launch\" or \"attach\".",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "name": {
          "$ref": "#/definitions/common/properties/name",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "debugServer": {
          "$ref": "#/definitions/common/properties/debugServer",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "preLaunchTask": {
          "$ref": "#/definitions/common/properties/preLaunchTask",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "postDebugTask": {
          "$ref": "#/definitions/common/properties/postDebugTask",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "presentation": {
          "$ref": "#/definitions/common/properties/presentation",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "internalConsoleOptions": {
          "$ref": "#/definitions/common/properties/internalConsoleOptions",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        }
      },
      "required": [
        "name",
        "type",
        "request",
        "name",
        "type",
        "request",
        "name",
        "type",
        "request"
      ],
      "type": "object"
    },
    "pwa-node:launch": {
      "properties": {
        "args": {
          "default": [],
          "description": "Command line arguments passed to the program.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "attachSimplePort": {
          "default": 9229,
          "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
          "type": "integer",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "autoAttachChildProcesses": {
          "default": true,
          "description": "Attach debugger to new child processes automatically.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "cascadeTerminateToConfigurations": {
          "default": [],
          "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
          "items": {
            "type": "string",
            "uniqueItems": true
          },
          "type": "array",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "console": {
          "default": "internalConsole",
          "description": "Where to launch the debug target.",
          "enum": [
            "internalConsole",
            "integratedTerminal",
            "externalTerminal"
          ],
          "enumDescriptions": [
            "VS Code Debug Console (which doesn't support to read input from a program)",
            "VS Code's integrated terminal",
            "External terminal that can be configured via user settings"
          ],
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "customDescriptionGenerator": {
          "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "customPropertiesGenerator": {
          "deprecated": true,
          "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "cwd": {
          "default": "${workspaceFolder}",
          "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "enableContentValidation": {
          "default": true,
          "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "env": {
          "additionalProperties": {
            "type": [
              "string",
              "null"
            ]
          },
          "default": {},
          "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
          "type": "object",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "envFile": {
          "default": "${workspaceFolder}/.env",
          "description": "Absolute path to a file containing environment variable definitions.",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "killBehavior": {
          "default": "forceful",
          "enum": [
            "forceful",
            "polite",
            "none"
          ],
          "markdownDescription": "Configures how debug processes are killed when stopping the session. Can be:\n\n- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.\n- polite: gracefully tears down the process tree. It's possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.\n- none: no termination will happen.",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "localRoot": {
          "default": null,
          "description": "Path to the local directory containing the program.",
          "type": [
            "string",
            "null"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "nodeVersionHint": {
          "default": 12,
          "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
          "minimum": 8,
          "type": "number",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "outFiles": {
          "default": [
            "${workspaceFolder}/**/*.js",
            "!**/node_modules/**"
          ],
          "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
          "items": {
            "type": "string"
          },
          "type": [
            "array"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "outputCapture": {
          "default": "console",
          "enum": [
            "console",
            "std"
          ],
          "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "pauseForSourceMap": {
          "default": false,
          "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "profileStartup": {
          "default": true,
          "description": "If true, will start profiling as soon as the process launches",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "program": {
          "default": "",
          "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "remoteRoot": {
          "default": null,
          "description": "Absolute path to the remote directory containing the program.",
          "type": [
            "string",
            "null"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "resolveSourceMapLocations": {
          "default": [
            "${workspaceFolder}/**",
            "!**/node_modules/**"
          ],
          "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
          "items": {
            "type": "string"
          },
          "type": [
            "array",
            "null"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "restart": {
          "default": true,
          "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "properties": {
                "delay": {
                  "default": 1000,
                  "minimum": 0,
                  "type": "number"
                },
                "maxAttempts": {
                  "default": 10,
                  "minimum": 0,
                  "type": "number"
                }
              },
              "type": "object"
            }
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "runtimeArgs": {
          "default": [],
          "description": "Optional arguments passed to the runtime executable.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "runtimeExecutable": {
          "default": "node",
          "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
          "type": [
            "string",
            "null"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "runtimeSourcemapPausePatterns": {
          "default": [],
          "items": {
            "type": "string"
          },
          "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
          "type": "array",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "runtimeVersion": {
          "default": "default",
          "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "showAsyncStacks": {
          "default": true,
          "description": "Show the async calls that led to the current call stack.",
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "properties": {
                "onAttach": {
                  "default": 32,
                  "type": "number"
                }
              },
              "required": [
                "onAttach"
              ],
              "type": "object"
            },
            {
              "properties": {
                "onceBreakpointResolved": {
                  "default": 32,
                  "type": "number"
                }
              },
              "required": [
                "onceBreakpointResolved"
              ],
              "type": "object"
            }
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "skipFiles": {
          "default": [
            "<node_internals>/**"
          ],
          "description": "An array of file or folder names, or path globs, to skip when debugging.",
          "type": "array",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "smartStep": {
          "default": true,
          "description": "Automatically step through generated code that cannot be mapped back to the original source.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "sourceMapPathOverrides": {
          "default": {
            "meteor://💻app/*": "${workspaceFolder}/*",
            "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
            "webpack://?:*/*": "${workspaceFolder}/*"
          },
          "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
          "type": "object",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "sourceMapRenames": {
          "default": true,
          "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "sourceMaps": {
          "default": true,
          "description": "Use JavaScript source maps (if they exist).",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "stopOnEntry": {
          "default": true,
          "description": "Automatically stop program after launch.",
          "type": [
            "boolean",
            "string"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "timeout": {
          "default": 10000,
          "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
          "type": "number",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "timeouts": {
          "additionalProperties": false,
          "default": {},
          "description": "Timeouts for several debugger operations.",
          "markdownDescription": "Timeouts for several debugger operations.",
          "properties": {
            "sourceMapCumulativePause": {
              "default": 1000,
              "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
              "type": "number"
            },
            "sourceMapMinPause": {
              "default": 1000,
              "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
              "type": "number"
            }
          },
          "type": "object",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "trace": {
          "default": true,
          "description": "Configures what diagnostic output is produced.",
          "oneOf": [
            {
              "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
              "type": "boolean"
            },
            {
              "additionalProperties": false,
              "properties": {
                "console": {
                  "description": "Whether to return trace data from the launched application or browser.",
                  "type": "boolean"
                },
                "level": {
                  "description": "Configures the level of logs recorded.",
                  "enum": [
                    "fatal",
                    "error",
                    "warn",
                    "info",
                    "verbose"
                  ]
                },
                "logFile": {
                  "description": "Configures where on disk logs are written.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "stdio": {
                  "description": "Configures whether logs are also returned to the debug console.",
                  "type": "boolean"
                },
                "tags": {
                  "description": "Configures what types of logs are recorded.",
                  "items": {
                    "enum": [
                      "cdp",
                      "dap",
                      "runtime"
                    ]
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "serverReadyAction": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": false,
              "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
              "default": {
                "action": "openExternally"
              },
              "properties": {
                "action": {
                  "type": "string",
                  "enum": [
                    "openExternally"
                  ],
                  "enumDescriptions": [
                    "Open URI externally with the default application."
                  ],
                  "markdownDescription": "What to do with the URI when the server is ready.",
                  "default": "openExternally"
                },
                "pattern": {
                  "type": "string",
                  "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                  "default": "listening on port ([0-9]+)"
                },
                "uriFormat": {
                  "type": "string",
                  "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                  "default": "http://localhost:%s"
                }
              }
            },
            {
              "type": "object",
              "additionalProperties": false,
              "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
              "default": {
                "action": "debugWithEdge",
                "pattern": "listening on port ([0-9]+)",
                "uriFormat": "http://localhost:%s",
                "webRoot": "${workspaceFolder}"
              },
              "properties": {
                "action": {
                  "type": "string",
                  "enum": [
                    "debugWithChrome",
                    "debugWithEdge"
                  ],
                  "enumDescriptions": [
                    "Start debugging with the 'Debugger for Chrome'."
                  ],
                  "markdownDescription": "What to do with the URI when the server is ready.",
                  "default": "debugWithEdge"
                },
                "pattern": {
                  "type": "string",
                  "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                  "default": "listening on port ([0-9]+)"
                },
                "uriFormat": {
                  "type": "string",
                  "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                  "default": "http://localhost:%s"
                },
                "webRoot": {
                  "type": "string",
                  "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                  "default": "${workspaceFolder}"
                }
              }
            },
            {
              "type": "object",
              "additionalProperties": false,
              "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
              "default": {
                "action": "startDebugging",
                "name": "<launch browser config name>"
              },
              "required": [
                "name"
              ],
              "properties": {
                "action": {
                  "type": "string",
                  "enum": [
                    "startDebugging"
                  ],
                  "enumDescriptions": [
                    "Run another launch configuration."
                  ],
                  "markdownDescription": "What to do with the URI when the server is ready.",
                  "default": "startDebugging"
                },
                "pattern": {
                  "type": "string",
                  "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                  "default": "listening on port ([0-9]+)"
                },
                "name": {
                  "type": "string",
                  "markdownDescription": "Name of the launch configuration to run.",
                  "default": "Launch Browser"
                }
              }
            }
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "type": {
          "enum": [
            "pwa-node"
          ],
          "description": "Type of configuration.",
          "pattern": "^(?!node2)",
          "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
          "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
        },
        "request": {
          "enum": [
            "launch"
          ],
          "description": "Request type of configuration. Can be \"launch\" or \"attach\".",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "name": {
          "$ref": "#/definitions/common/properties/name",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "debugServer": {
          "$ref": "#/definitions/common/properties/debugServer",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "preLaunchTask": {
          "$ref": "#/definitions/common/properties/preLaunchTask",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "postDebugTask": {
          "$ref": "#/definitions/common/properties/postDebugTask",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "presentation": {
          "$ref": "#/definitions/common/properties/presentation",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "internalConsoleOptions": {
          "$ref": "#/definitions/common/properties/internalConsoleOptions",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        }
      },
      "required": [
        "name",
        "type",
        "request",
        "name",
        "type",
        "request",
        "name",
        "type",
        "request"
      ],
      "type": "object"
    },
    "node:attach": {
      "properties": {
        "address": {
          "default": "localhost",
          "description": "TCP/IP address of process to be debugged. Default is 'localhost'.",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "attachExistingChildren": {
          "default": false,
          "description": "Whether to attempt to attach to already-spawned child processes.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "autoAttachChildProcesses": {
          "default": true,
          "description": "Attach debugger to new child processes automatically.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "cascadeTerminateToConfigurations": {
          "default": [],
          "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
          "items": {
            "type": "string",
            "uniqueItems": true
          },
          "type": "array",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "continueOnAttach": {
          "default": true,
          "markdownDescription": "If true, we'll automatically resume programs launched and waiting on `--inspect-brk`",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "customDescriptionGenerator": {
          "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "customPropertiesGenerator": {
          "deprecated": true,
          "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "cwd": {
          "default": "${workspaceFolder}",
          "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "enableContentValidation": {
          "default": true,
          "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "env": {
          "additionalProperties": {
            "type": [
              "string",
              "null"
            ]
          },
          "default": {},
          "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
          "type": "object",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "envFile": {
          "default": "${workspaceFolder}/.env",
          "description": "Absolute path to a file containing environment variable definitions.",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "localRoot": {
          "default": null,
          "description": "Path to the local directory containing the program.",
          "type": [
            "string",
            "null"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "nodeVersionHint": {
          "default": 12,
          "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
          "minimum": 8,
          "type": "number",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "outFiles": {
          "default": [
            "${workspaceFolder}/**/*.js",
            "!**/node_modules/**"
          ],
          "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
          "items": {
            "type": "string"
          },
          "type": [
            "array"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "outputCapture": {
          "default": "console",
          "enum": [
            "console",
            "std"
          ],
          "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "pauseForSourceMap": {
          "default": false,
          "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "port": {
          "default": 9229,
          "description": "Debug port to attach to. Default is 9229.",
          "type": "number",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "processId": {
          "default": "${command:PickProcess}",
          "description": "ID of process to attach to.",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "remoteRoot": {
          "default": null,
          "description": "Absolute path to the remote directory containing the program.",
          "type": [
            "string",
            "null"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "resolveSourceMapLocations": {
          "default": [
            "${workspaceFolder}/**",
            "!**/node_modules/**"
          ],
          "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
          "items": {
            "type": "string"
          },
          "type": [
            "array",
            "null"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "restart": {
          "default": true,
          "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "properties": {
                "delay": {
                  "default": 1000,
                  "minimum": 0,
                  "type": "number"
                },
                "maxAttempts": {
                  "default": 10,
                  "minimum": 0,
                  "type": "number"
                }
              },
              "type": "object"
            }
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "runtimeSourcemapPausePatterns": {
          "default": [],
          "items": {
            "type": "string"
          },
          "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
          "type": "array",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "showAsyncStacks": {
          "default": true,
          "description": "Show the async calls that led to the current call stack.",
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "properties": {
                "onAttach": {
                  "default": 32,
                  "type": "number"
                }
              },
              "required": [
                "onAttach"
              ],
              "type": "object"
            },
            {
              "properties": {
                "onceBreakpointResolved": {
                  "default": 32,
                  "type": "number"
                }
              },
              "required": [
                "onceBreakpointResolved"
              ],
              "type": "object"
            }
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "skipFiles": {
          "default": [
            "<node_internals>/**"
          ],
          "description": "An array of file or folder names, or path globs, to skip when debugging.",
          "type": "array",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "smartStep": {
          "default": true,
          "description": "Automatically step through generated code that cannot be mapped back to the original source.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "sourceMapPathOverrides": {
          "default": {
            "meteor://💻app/*": "${workspaceFolder}/*",
            "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
            "webpack://?:*/*": "${workspaceFolder}/*"
          },
          "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
          "type": "object",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "sourceMapRenames": {
          "default": true,
          "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "sourceMaps": {
          "default": true,
          "description": "Use JavaScript source maps (if they exist).",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "timeout": {
          "default": 10000,
          "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
          "type": "number",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "timeouts": {
          "additionalProperties": false,
          "default": {},
          "description": "Timeouts for several debugger operations.",
          "markdownDescription": "Timeouts for several debugger operations.",
          "properties": {
            "sourceMapCumulativePause": {
              "default": 1000,
              "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
              "type": "number"
            },
            "sourceMapMinPause": {
              "default": 1000,
              "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
              "type": "number"
            }
          },
          "type": "object",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "trace": {
          "default": true,
          "description": "Configures what diagnostic output is produced.",
          "oneOf": [
            {
              "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
              "type": "boolean"
            },
            {
              "additionalProperties": false,
              "properties": {
                "console": {
                  "description": "Whether to return trace data from the launched application or browser.",
                  "type": "boolean"
                },
                "level": {
                  "description": "Configures the level of logs recorded.",
                  "enum": [
                    "fatal",
                    "error",
                    "warn",
                    "info",
                    "verbose"
                  ]
                },
                "logFile": {
                  "description": "Configures where on disk logs are written.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "stdio": {
                  "description": "Configures whether logs are also returned to the debug console.",
                  "type": "boolean"
                },
                "tags": {
                  "description": "Configures what types of logs are recorded.",
                  "items": {
                    "enum": [
                      "cdp",
                      "dap",
                      "runtime"
                    ]
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "websocketAddress": {
          "description": "Exact websocket address to attach to. If unspecified, it will be discovered from the address and port.",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "type": {
          "enum": [
            "node"
          ],
          "description": "Type of configuration.",
          "pattern": "^(?!node2)",
          "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
          "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
        },
        "request": {
          "enum": [
            "attach"
          ],
          "description": "Request type of configuration. Can be \"launch\" or \"attach\".",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "name": {
          "$ref": "#/definitions/common/properties/name",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "debugServer": {
          "$ref": "#/definitions/common/properties/debugServer",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "preLaunchTask": {
          "$ref": "#/definitions/common/properties/preLaunchTask",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "postDebugTask": {
          "$ref": "#/definitions/common/properties/postDebugTask",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "presentation": {
          "$ref": "#/definitions/common/properties/presentation",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "internalConsoleOptions": {
          "$ref": "#/definitions/common/properties/internalConsoleOptions",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        }
      },
      "required": [
        "name",
        "type",
        "request",
        "name",
        "type",
        "request",
        "name",
        "type",
        "request"
      ],
      "type": "object"
    },
    "node:launch": {
      "properties": {
        "args": {
          "default": [],
          "description": "Command line arguments passed to the program.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "attachSimplePort": {
          "default": 9229,
          "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
          "type": "integer",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "autoAttachChildProcesses": {
          "default": true,
          "description": "Attach debugger to new child processes automatically.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "cascadeTerminateToConfigurations": {
          "default": [],
          "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
          "items": {
            "type": "string",
            "uniqueItems": true
          },
          "type": "array",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "console": {
          "default": "internalConsole",
          "description": "Where to launch the debug target.",
          "enum": [
            "internalConsole",
            "integratedTerminal",
            "externalTerminal"
          ],
          "enumDescriptions": [
            "VS Code Debug Console (which doesn't support to read input from a program)",
            "VS Code's integrated terminal",
            "External terminal that can be configured via user settings"
          ],
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "customDescriptionGenerator": {
          "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "customPropertiesGenerator": {
          "deprecated": true,
          "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "cwd": {
          "default": "${workspaceFolder}",
          "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "enableContentValidation": {
          "default": true,
          "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "env": {
          "additionalProperties": {
            "type": [
              "string",
              "null"
            ]
          },
          "default": {},
          "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
          "type": "object",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "envFile": {
          "default": "${workspaceFolder}/.env",
          "description": "Absolute path to a file containing environment variable definitions.",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "killBehavior": {
          "default": "forceful",
          "enum": [
            "forceful",
            "polite",
            "none"
          ],
          "markdownDescription": "Configures how debug processes are killed when stopping the session. Can be:\n\n- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.\n- polite: gracefully tears down the process tree. It's possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.\n- none: no termination will happen.",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "localRoot": {
          "default": null,
          "description": "Path to the local directory containing the program.",
          "type": [
            "string",
            "null"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "nodeVersionHint": {
          "default": 12,
          "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
          "minimum": 8,
          "type": "number",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "outFiles": {
          "default": [
            "${workspaceFolder}/**/*.js",
            "!**/node_modules/**"
          ],
          "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
          "items": {
            "type": "string"
          },
          "type": [
            "array"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "outputCapture": {
          "default": "console",
          "enum": [
            "console",
            "std"
          ],
          "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "pauseForSourceMap": {
          "default": false,
          "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "profileStartup": {
          "default": true,
          "description": "If true, will start profiling as soon as the process launches",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "program": {
          "default": "",
          "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "remoteRoot": {
          "default": null,
          "description": "Absolute path to the remote directory containing the program.",
          "type": [
            "string",
            "null"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "resolveSourceMapLocations": {
          "default": [
            "${workspaceFolder}/**",
            "!**/node_modules/**"
          ],
          "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
          "items": {
            "type": "string"
          },
          "type": [
            "array",
            "null"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "restart": {
          "default": true,
          "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "properties": {
                "delay": {
                  "default": 1000,
                  "minimum": 0,
                  "type": "number"
                },
                "maxAttempts": {
                  "default": 10,
                  "minimum": 0,
                  "type": "number"
                }
              },
              "type": "object"
            }
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "runtimeArgs": {
          "default": [],
          "description": "Optional arguments passed to the runtime executable.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "runtimeExecutable": {
          "default": "node",
          "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
          "type": [
            "string",
            "null"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "runtimeSourcemapPausePatterns": {
          "default": [],
          "items": {
            "type": "string"
          },
          "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
          "type": "array",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "runtimeVersion": {
          "default": "default",
          "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "showAsyncStacks": {
          "default": true,
          "description": "Show the async calls that led to the current call stack.",
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "properties": {
                "onAttach": {
                  "default": 32,
                  "type": "number"
                }
              },
              "required": [
                "onAttach"
              ],
              "type": "object"
            },
            {
              "properties": {
                "onceBreakpointResolved": {
                  "default": 32,
                  "type": "number"
                }
              },
              "required": [
                "onceBreakpointResolved"
              ],
              "type": "object"
            }
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "skipFiles": {
          "default": [
            "<node_internals>/**"
          ],
          "description": "An array of file or folder names, or path globs, to skip when debugging.",
          "type": "array",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "smartStep": {
          "default": true,
          "description": "Automatically step through generated code that cannot be mapped back to the original source.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "sourceMapPathOverrides": {
          "default": {
            "meteor://💻app/*": "${workspaceFolder}/*",
            "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
            "webpack://?:*/*": "${workspaceFolder}/*"
          },
          "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
          "type": "object",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "sourceMapRenames": {
          "default": true,
          "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "sourceMaps": {
          "default": true,
          "description": "Use JavaScript source maps (if they exist).",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "stopOnEntry": {
          "default": true,
          "description": "Automatically stop program after launch.",
          "type": [
            "boolean",
            "string"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "timeout": {
          "default": 10000,
          "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
          "type": "number",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "timeouts": {
          "additionalProperties": false,
          "default": {},
          "description": "Timeouts for several debugger operations.",
          "markdownDescription": "Timeouts for several debugger operations.",
          "properties": {
            "sourceMapCumulativePause": {
              "default": 1000,
              "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
              "type": "number"
            },
            "sourceMapMinPause": {
              "default": 1000,
              "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
              "type": "number"
            }
          },
          "type": "object",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "trace": {
          "default": true,
          "description": "Configures what diagnostic output is produced.",
          "oneOf": [
            {
              "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
              "type": "boolean"
            },
            {
              "additionalProperties": false,
              "properties": {
                "console": {
                  "description": "Whether to return trace data from the launched application or browser.",
                  "type": "boolean"
                },
                "level": {
                  "description": "Configures the level of logs recorded.",
                  "enum": [
                    "fatal",
                    "error",
                    "warn",
                    "info",
                    "verbose"
                  ]
                },
                "logFile": {
                  "description": "Configures where on disk logs are written.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "stdio": {
                  "description": "Configures whether logs are also returned to the debug console.",
                  "type": "boolean"
                },
                "tags": {
                  "description": "Configures what types of logs are recorded.",
                  "items": {
                    "enum": [
                      "cdp",
                      "dap",
                      "runtime"
                    ]
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "serverReadyAction": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": false,
              "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
              "default": {
                "action": "openExternally"
              },
              "properties": {
                "action": {
                  "type": "string",
                  "enum": [
                    "openExternally"
                  ],
                  "enumDescriptions": [
                    "Open URI externally with the default application."
                  ],
                  "markdownDescription": "What to do with the URI when the server is ready.",
                  "default": "openExternally"
                },
                "pattern": {
                  "type": "string",
                  "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                  "default": "listening on port ([0-9]+)"
                },
                "uriFormat": {
                  "type": "string",
                  "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                  "default": "http://localhost:%s"
                }
              }
            },
            {
              "type": "object",
              "additionalProperties": false,
              "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
              "default": {
                "action": "debugWithEdge",
                "pattern": "listening on port ([0-9]+)",
                "uriFormat": "http://localhost:%s",
                "webRoot": "${workspaceFolder}"
              },
              "properties": {
                "action": {
                  "type": "string",
                  "enum": [
                    "debugWithChrome",
                    "debugWithEdge"
                  ],
                  "enumDescriptions": [
                    "Start debugging with the 'Debugger for Chrome'."
                  ],
                  "markdownDescription": "What to do with the URI when the server is ready.",
                  "default": "debugWithEdge"
                },
                "pattern": {
                  "type": "string",
                  "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                  "default": "listening on port ([0-9]+)"
                },
                "uriFormat": {
                  "type": "string",
                  "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                  "default": "http://localhost:%s"
                },
                "webRoot": {
                  "type": "string",
                  "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                  "default": "${workspaceFolder}"
                }
              }
            },
            {
              "type": "object",
              "additionalProperties": false,
              "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
              "default": {
                "action": "startDebugging",
                "name": "<launch browser config name>"
              },
              "required": [
                "name"
              ],
              "properties": {
                "action": {
                  "type": "string",
                  "enum": [
                    "startDebugging"
                  ],
                  "enumDescriptions": [
                    "Run another launch configuration."
                  ],
                  "markdownDescription": "What to do with the URI when the server is ready.",
                  "default": "startDebugging"
                },
                "pattern": {
                  "type": "string",
                  "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                  "default": "listening on port ([0-9]+)"
                },
                "name": {
                  "type": "string",
                  "markdownDescription": "Name of the launch configuration to run.",
                  "default": "Launch Browser"
                }
              }
            }
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "type": {
          "enum": [
            "node"
          ],
          "description": "Type of configuration.",
          "pattern": "^(?!node2)",
          "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
          "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
        },
        "request": {
          "enum": [
            "launch"
          ],
          "description": "Request type of configuration. Can be \"launch\" or \"attach\".",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "name": {
          "$ref": "#/definitions/common/properties/name",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "debugServer": {
          "$ref": "#/definitions/common/properties/debugServer",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "preLaunchTask": {
          "$ref": "#/definitions/common/properties/preLaunchTask",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "postDebugTask": {
          "$ref": "#/definitions/common/properties/postDebugTask",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "presentation": {
          "$ref": "#/definitions/common/properties/presentation",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "internalConsoleOptions": {
          "$ref": "#/definitions/common/properties/internalConsoleOptions",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        }
      },
      "required": [
        "name",
        "type",
        "request",
        "name",
        "type",
        "request",
        "name",
        "type",
        "request"
      ],
      "type": "object"
    },
    "node-terminal:launch": {
      "properties": {
        "autoAttachChildProcesses": {
          "default": true,
          "description": "Attach debugger to new child processes automatically.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "cascadeTerminateToConfigurations": {
          "default": [],
          "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
          "items": {
            "type": "string",
            "uniqueItems": true
          },
          "type": "array",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "command": {
          "default": "npm start",
          "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
          "type": [
            "string",
            "null"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "customDescriptionGenerator": {
          "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "customPropertiesGenerator": {
          "deprecated": true,
          "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "cwd": {
          "default": "${workspaceFolder}",
          "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "enableContentValidation": {
          "default": true,
          "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "env": {
          "additionalProperties": {
            "type": [
              "string",
              "null"
            ]
          },
          "default": {},
          "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
          "type": "object",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "envFile": {
          "default": "${workspaceFolder}/.env",
          "description": "Absolute path to a file containing environment variable definitions.",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "localRoot": {
          "default": null,
          "description": "Path to the local directory containing the program.",
          "type": [
            "string",
            "null"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "nodeVersionHint": {
          "default": 12,
          "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
          "minimum": 8,
          "type": "number",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "outFiles": {
          "default": [
            "${workspaceFolder}/**/*.js",
            "!**/node_modules/**"
          ],
          "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
          "items": {
            "type": "string"
          },
          "type": [
            "array"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "outputCapture": {
          "default": "console",
          "enum": [
            "console",
            "std"
          ],
          "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "pauseForSourceMap": {
          "default": false,
          "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "remoteRoot": {
          "default": null,
          "description": "Absolute path to the remote directory containing the program.",
          "type": [
            "string",
            "null"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "resolveSourceMapLocations": {
          "default": [
            "${workspaceFolder}/**",
            "!**/node_modules/**"
          ],
          "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
          "items": {
            "type": "string"
          },
          "type": [
            "array",
            "null"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "runtimeSourcemapPausePatterns": {
          "default": [],
          "items": {
            "type": "string"
          },
          "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
          "type": "array",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "showAsyncStacks": {
          "default": true,
          "description": "Show the async calls that led to the current call stack.",
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "properties": {
                "onAttach": {
                  "default": 32,
                  "type": "number"
                }
              },
              "required": [
                "onAttach"
              ],
              "type": "object"
            },
            {
              "properties": {
                "onceBreakpointResolved": {
                  "default": 32,
                  "type": "number"
                }
              },
              "required": [
                "onceBreakpointResolved"
              ],
              "type": "object"
            }
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "skipFiles": {
          "default": [
            "<node_internals>/**"
          ],
          "description": "An array of file or folder names, or path globs, to skip when debugging.",
          "type": "array",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "smartStep": {
          "default": true,
          "description": "Automatically step through generated code that cannot be mapped back to the original source.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "sourceMapPathOverrides": {
          "default": {
            "meteor://💻app/*": "${workspaceFolder}/*",
            "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
            "webpack://?:*/*": "${workspaceFolder}/*"
          },
          "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
          "type": "object",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "sourceMapRenames": {
          "default": true,
          "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "sourceMaps": {
          "default": true,
          "description": "Use JavaScript source maps (if they exist).",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "timeout": {
          "default": 10000,
          "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
          "type": "number",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "timeouts": {
          "additionalProperties": false,
          "default": {},
          "description": "Timeouts for several debugger operations.",
          "markdownDescription": "Timeouts for several debugger operations.",
          "properties": {
            "sourceMapCumulativePause": {
              "default": 1000,
              "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
              "type": "number"
            },
            "sourceMapMinPause": {
              "default": 1000,
              "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
              "type": "number"
            }
          },
          "type": "object",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "trace": {
          "default": true,
          "description": "Configures what diagnostic output is produced.",
          "oneOf": [
            {
              "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
              "type": "boolean"
            },
            {
              "additionalProperties": false,
              "properties": {
                "console": {
                  "description": "Whether to return trace data from the launched application or browser.",
                  "type": "boolean"
                },
                "level": {
                  "description": "Configures the level of logs recorded.",
                  "enum": [
                    "fatal",
                    "error",
                    "warn",
                    "info",
                    "verbose"
                  ]
                },
                "logFile": {
                  "description": "Configures where on disk logs are written.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "stdio": {
                  "description": "Configures whether logs are also returned to the debug console.",
                  "type": "boolean"
                },
                "tags": {
                  "description": "Configures what types of logs are recorded.",
                  "items": {
                    "enum": [
                      "cdp",
                      "dap",
                      "runtime"
                    ]
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "serverReadyAction": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": false,
              "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
              "default": {
                "action": "openExternally"
              },
              "properties": {
                "action": {
                  "type": "string",
                  "enum": [
                    "openExternally"
                  ],
                  "enumDescriptions": [
                    "Open URI externally with the default application."
                  ],
                  "markdownDescription": "What to do with the URI when the server is ready.",
                  "default": "openExternally"
                },
                "pattern": {
                  "type": "string",
                  "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                  "default": "listening on port ([0-9]+)"
                },
                "uriFormat": {
                  "type": "string",
                  "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                  "default": "http://localhost:%s"
                }
              }
            },
            {
              "type": "object",
              "additionalProperties": false,
              "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
              "default": {
                "action": "debugWithEdge",
                "pattern": "listening on port ([0-9]+)",
                "uriFormat": "http://localhost:%s",
                "webRoot": "${workspaceFolder}"
              },
              "properties": {
                "action": {
                  "type": "string",
                  "enum": [
                    "debugWithChrome",
                    "debugWithEdge"
                  ],
                  "enumDescriptions": [
                    "Start debugging with the 'Debugger for Chrome'."
                  ],
                  "markdownDescription": "What to do with the URI when the server is ready.",
                  "default": "debugWithEdge"
                },
                "pattern": {
                  "type": "string",
                  "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                  "default": "listening on port ([0-9]+)"
                },
                "uriFormat": {
                  "type": "string",
                  "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                  "default": "http://localhost:%s"
                },
                "webRoot": {
                  "type": "string",
                  "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                  "default": "${workspaceFolder}"
                }
              }
            },
            {
              "type": "object",
              "additionalProperties": false,
              "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
              "default": {
                "action": "startDebugging",
                "name": "<launch browser config name>"
              },
              "required": [
                "name"
              ],
              "properties": {
                "action": {
                  "type": "string",
                  "enum": [
                    "startDebugging"
                  ],
                  "enumDescriptions": [
                    "Run another launch configuration."
                  ],
                  "markdownDescription": "What to do with the URI when the server is ready.",
                  "default": "startDebugging"
                },
                "pattern": {
                  "type": "string",
                  "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                  "default": "listening on port ([0-9]+)"
                },
                "name": {
                  "type": "string",
                  "markdownDescription": "Name of the launch configuration to run.",
                  "default": "Launch Browser"
                }
              }
            }
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "type": {
          "enum": [
            "node-terminal"
          ],
          "description": "Type of configuration.",
          "pattern": "^(?!node2)",
          "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
          "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
        },
        "request": {
          "enum": [
            "launch"
          ],
          "description": "Request type of configuration. Can be \"launch\" or \"attach\".",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "name": {
          "$ref": "#/definitions/common/properties/name",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "debugServer": {
          "$ref": "#/definitions/common/properties/debugServer",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "preLaunchTask": {
          "$ref": "#/definitions/common/properties/preLaunchTask",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "postDebugTask": {
          "$ref": "#/definitions/common/properties/postDebugTask",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "presentation": {
          "$ref": "#/definitions/common/properties/presentation",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "internalConsoleOptions": {
          "$ref": "#/definitions/common/properties/internalConsoleOptions",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        }
      },
      "required": [
        "name",
        "type",
        "request",
        "name",
        "type",
        "request",
        "name",
        "type",
        "request"
      ],
      "type": "object"
    },
    "pwa-extensionHost:launch": {
      "properties": {
        "args": {
          "default": [
            "--extensionDevelopmentPath=${workspaceFolder}"
          ],
          "description": "Command line arguments passed to the program.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "autoAttachChildProcesses": {
          "default": true,
          "description": "Attach debugger to new child processes automatically.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "cascadeTerminateToConfigurations": {
          "default": [],
          "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
          "items": {
            "type": "string",
            "uniqueItems": true
          },
          "type": "array",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "customDescriptionGenerator": {
          "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "customPropertiesGenerator": {
          "deprecated": true,
          "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "cwd": {
          "default": "${workspaceFolder}",
          "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "debugWebWorkerHost": {
          "default": true,
          "markdownDescription": "Configures whether we should try to attach to the web worker extension host.",
          "type": [
            "boolean"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "debugWebviews": {
          "default": true,
          "markdownDescription": "Configures whether we should try to attach to webviews in the launched VS Code instance. This will only work in desktop VS Code.",
          "type": [
            "boolean"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "enableContentValidation": {
          "default": true,
          "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "env": {
          "additionalProperties": {
            "type": [
              "string",
              "null"
            ]
          },
          "default": {},
          "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
          "type": "object",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "envFile": {
          "default": "${workspaceFolder}/.env",
          "description": "Absolute path to a file containing environment variable definitions.",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "localRoot": {
          "default": null,
          "description": "Path to the local directory containing the program.",
          "type": [
            "string",
            "null"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "nodeVersionHint": {
          "default": 12,
          "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
          "minimum": 8,
          "type": "number",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "outFiles": {
          "default": [
            "${workspaceFolder}/**/*.js",
            "!**/node_modules/**"
          ],
          "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
          "items": {
            "type": "string"
          },
          "type": [
            "array"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "outputCapture": {
          "default": "console",
          "enum": [
            "console",
            "std"
          ],
          "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "pauseForSourceMap": {
          "default": false,
          "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "remoteRoot": {
          "default": null,
          "description": "Absolute path to the remote directory containing the program.",
          "type": [
            "string",
            "null"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "rendererDebugOptions": {
          "default": {
            "webRoot": "${workspaceFolder}"
          },
          "markdownDescription": "Chrome launch options used when attaching to the renderer process, with `debugWebviews` or `debugWebWorkerHost`.",
          "properties": {
            "address": {
              "default": "localhost",
              "description": "IP address or hostname the debugged browser is listening on.",
              "type": "string"
            },
            "browserAttachLocation": {
              "default": null,
              "description": "Forces the browser to attach in one location. In a remote workspace (through ssh or WSL, for example) this can be used to attach to a browser on the remote machine rather than locally.",
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "enum": [
                    "ui",
                    "workspace"
                  ],
                  "type": "string"
                }
              ]
            },
            "cascadeTerminateToConfigurations": {
              "default": [],
              "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
              "items": {
                "type": "string",
                "uniqueItems": true
              },
              "type": "array"
            },
            "customDescriptionGenerator": {
              "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
              "type": "string"
            },
            "customPropertiesGenerator": {
              "deprecated": true,
              "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
              "type": "string"
            },
            "disableNetworkCache": {
              "default": true,
              "description": "Controls whether to skip the network cache for each request",
              "type": "boolean"
            },
            "enableContentValidation": {
              "default": true,
              "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
              "type": "boolean"
            },
            "inspectUri": {
              "default": null,
              "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `browserInspectUriPath` is the path part of the inspector URI on the launched browser (e.g.: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\").\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
              "type": [
                "string",
                "null"
              ]
            },
            "outFiles": {
              "default": [
                "${workspaceFolder}/**/*.js",
                "!**/node_modules/**"
              ],
              "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
              "items": {
                "type": "string"
              },
              "type": [
                "array"
              ]
            },
            "outputCapture": {
              "default": "console",
              "enum": [
                "console",
                "std"
              ],
              "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
            },
            "pathMapping": {
              "default": {},
              "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
              "type": "object"
            },
            "pauseForSourceMap": {
              "default": false,
              "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
              "type": "boolean"
            },
            "perScriptSourcemaps": {
              "default": "auto",
              "description": "Whether scripts are loaded individually with unique sourcemaps containing the basename of the source file. This can be set to optimize sourcemap handling when dealing with lots of small scripts. If set to \"auto\", we'll detect known cases where this is appropriate.",
              "enum": [
                "yes",
                "no",
                "auto"
              ],
              "type": "string"
            },
            "port": {
              "default": 9229,
              "description": "Port to use to remote debugging the browser, given as `--remote-debugging-port` when launching the browser.",
              "type": "number"
            },
            "resolveSourceMapLocations": {
              "default": null,
              "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
              "items": {
                "type": "string"
              },
              "type": [
                "array",
                "null"
              ]
            },
            "restart": {
              "default": false,
              "markdownDescription": "Whether to reconnect if the browser connection is closed",
              "type": "boolean"
            },
            "server": {
              "oneOf": [
                {
                  "additionalProperties": false,
                  "default": {
                    "program": "node my-server.js"
                  },
                  "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
                  "properties": {
                    "args": {
                      "default": [],
                      "description": "Command line arguments passed to the program.",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "attachSimplePort": {
                      "default": 9229,
                      "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                      "type": "integer"
                    },
                    "autoAttachChildProcesses": {
                      "default": true,
                      "description": "Attach debugger to new child processes automatically.",
                      "type": "boolean"
                    },
                    "cascadeTerminateToConfigurations": {
                      "default": [],
                      "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                      "items": {
                        "type": "string",
                        "uniqueItems": true
                      },
                      "type": "array"
                    },
                    "console": {
                      "default": "internalConsole",
                      "description": "Where to launch the debug target.",
                      "enum": [
                        "internalConsole",
                        "integratedTerminal",
                        "externalTerminal"
                      ],
                      "enumDescriptions": [
                        "VS Code Debug Console (which doesn't support to read input from a program)",
                        "VS Code's integrated terminal",
                        "External terminal that can be configured via user settings"
                      ],
                      "type": "string"
                    },
                    "customDescriptionGenerator": {
                      "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                      "type": "string"
                    },
                    "customPropertiesGenerator": {
                      "deprecated": true,
                      "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                      "type": "string"
                    },
                    "cwd": {
                      "default": "${workspaceFolder}",
                      "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                      "type": "string"
                    },
                    "enableContentValidation": {
                      "default": true,
                      "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                      "type": "boolean"
                    },
                    "env": {
                      "additionalProperties": {
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "default": {},
                      "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                      "type": "object"
                    },
                    "envFile": {
                      "default": "${workspaceFolder}/.env",
                      "description": "Absolute path to a file containing environment variable definitions.",
                      "type": "string"
                    },
                    "killBehavior": {
                      "default": "forceful",
                      "enum": [
                        "forceful",
                        "polite",
                        "none"
                      ],
                      "markdownDescription": "Configures how debug processes are killed when stopping the session. Can be:\n\n- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.\n- polite: gracefully tears down the process tree. It's possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.\n- none: no termination will happen.",
                      "type": "string"
                    },
                    "localRoot": {
                      "default": null,
                      "description": "Path to the local directory containing the program.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "nodeVersionHint": {
                      "default": 12,
                      "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                      "minimum": 8,
                      "type": "number"
                    },
                    "outFiles": {
                      "default": [
                        "${workspaceFolder}/**/*.js",
                        "!**/node_modules/**"
                      ],
                      "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                      "items": {
                        "type": "string"
                      },
                      "type": [
                        "array"
                      ]
                    },
                    "outputCapture": {
                      "default": "console",
                      "enum": [
                        "console",
                        "std"
                      ],
                      "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                    },
                    "pauseForSourceMap": {
                      "default": false,
                      "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                      "type": "boolean"
                    },
                    "profileStartup": {
                      "default": true,
                      "description": "If true, will start profiling as soon as the process launches",
                      "type": "boolean"
                    },
                    "program": {
                      "default": "",
                      "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                      "type": "string"
                    },
                    "remoteRoot": {
                      "default": null,
                      "description": "Absolute path to the remote directory containing the program.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "resolveSourceMapLocations": {
                      "default": [
                        "${workspaceFolder}/**",
                        "!**/node_modules/**"
                      ],
                      "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                      "items": {
                        "type": "string"
                      },
                      "type": [
                        "array",
                        "null"
                      ]
                    },
                    "restart": {
                      "default": true,
                      "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                      "oneOf": [
                        {
                          "type": "boolean"
                        },
                        {
                          "properties": {
                            "delay": {
                              "default": 1000,
                              "minimum": 0,
                              "type": "number"
                            },
                            "maxAttempts": {
                              "default": 10,
                              "minimum": 0,
                              "type": "number"
                            }
                          },
                          "type": "object"
                        }
                      ]
                    },
                    "runtimeArgs": {
                      "default": [],
                      "description": "Optional arguments passed to the runtime executable.",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "runtimeExecutable": {
                      "default": "node",
                      "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "runtimeSourcemapPausePatterns": {
                      "default": [],
                      "items": {
                        "type": "string"
                      },
                      "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                      "type": "array"
                    },
                    "runtimeVersion": {
                      "default": "default",
                      "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                      "type": "string"
                    },
                    "showAsyncStacks": {
                      "default": true,
                      "description": "Show the async calls that led to the current call stack.",
                      "oneOf": [
                        {
                          "type": "boolean"
                        },
                        {
                          "properties": {
                            "onAttach": {
                              "default": 32,
                              "type": "number"
                            }
                          },
                          "required": [
                            "onAttach"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "onceBreakpointResolved": {
                              "default": 32,
                              "type": "number"
                            }
                          },
                          "required": [
                            "onceBreakpointResolved"
                          ],
                          "type": "object"
                        }
                      ]
                    },
                    "skipFiles": {
                      "default": [
                        "<node_internals>/**"
                      ],
                      "description": "An array of file or folder names, or path globs, to skip when debugging.",
                      "type": "array"
                    },
                    "smartStep": {
                      "default": true,
                      "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                      "type": "boolean"
                    },
                    "sourceMapPathOverrides": {
                      "default": {
                        "meteor://💻app/*": "${workspaceFolder}/*",
                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                        "webpack://?:*/*": "${workspaceFolder}/*"
                      },
                      "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                      "type": "object"
                    },
                    "sourceMapRenames": {
                      "default": true,
                      "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                      "type": "boolean"
                    },
                    "sourceMaps": {
                      "default": true,
                      "description": "Use JavaScript source maps (if they exist).",
                      "type": "boolean"
                    },
                    "stopOnEntry": {
                      "default": true,
                      "description": "Automatically stop program after launch.",
                      "type": [
                        "boolean",
                        "string"
                      ]
                    },
                    "timeout": {
                      "default": 10000,
                      "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                      "type": "number"
                    },
                    "timeouts": {
                      "additionalProperties": false,
                      "default": {},
                      "description": "Timeouts for several debugger operations.",
                      "markdownDescription": "Timeouts for several debugger operations.",
                      "properties": {
                        "sourceMapCumulativePause": {
                          "default": 1000,
                          "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                          "type": "number"
                        },
                        "sourceMapMinPause": {
                          "default": 1000,
                          "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                          "type": "number"
                        }
                      },
                      "type": "object"
                    },
                    "trace": {
                      "default": true,
                      "description": "Configures what diagnostic output is produced.",
                      "oneOf": [
                        {
                          "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                          "type": "boolean"
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "console": {
                              "description": "Whether to return trace data from the launched application or browser.",
                              "type": "boolean"
                            },
                            "level": {
                              "description": "Configures the level of logs recorded.",
                              "enum": [
                                "fatal",
                                "error",
                                "warn",
                                "info",
                                "verbose"
                              ]
                            },
                            "logFile": {
                              "description": "Configures where on disk logs are written.",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "stdio": {
                              "description": "Configures whether logs are also returned to the debug console.",
                              "type": "boolean"
                            },
                            "tags": {
                              "description": "Configures what types of logs are recorded.",
                              "items": {
                                "enum": [
                                  "cdp",
                                  "dap",
                                  "runtime"
                                ]
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        }
                      ]
                    }
                  },
                  "type": "object"
                },
                {
                  "additionalProperties": false,
                  "default": {
                    "program": "npm start"
                  },
                  "description": "JavaScript Debug Terminal",
                  "properties": {
                    "autoAttachChildProcesses": {
                      "default": true,
                      "description": "Attach debugger to new child processes automatically.",
                      "type": "boolean"
                    },
                    "cascadeTerminateToConfigurations": {
                      "default": [],
                      "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                      "items": {
                        "type": "string",
                        "uniqueItems": true
                      },
                      "type": "array"
                    },
                    "command": {
                      "default": "npm start",
                      "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "customDescriptionGenerator": {
                      "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                      "type": "string"
                    },
                    "customPropertiesGenerator": {
                      "deprecated": true,
                      "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                      "type": "string"
                    },
                    "cwd": {
                      "default": "${workspaceFolder}",
                      "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                      "docDefault": "localRoot || ${workspaceFolder}",
                      "type": "string"
                    },
                    "enableContentValidation": {
                      "default": true,
                      "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                      "type": "boolean"
                    },
                    "env": {
                      "additionalProperties": {
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "default": {},
                      "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                      "type": "object"
                    },
                    "envFile": {
                      "default": "${workspaceFolder}/.env",
                      "description": "Absolute path to a file containing environment variable definitions.",
                      "type": "string"
                    },
                    "localRoot": {
                      "default": null,
                      "description": "Path to the local directory containing the program.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "nodeVersionHint": {
                      "default": 12,
                      "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                      "minimum": 8,
                      "type": "number"
                    },
                    "outFiles": {
                      "default": [
                        "${workspaceFolder}/**/*.js",
                        "!**/node_modules/**"
                      ],
                      "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                      "items": {
                        "type": "string"
                      },
                      "type": [
                        "array"
                      ]
                    },
                    "outputCapture": {
                      "default": "console",
                      "enum": [
                        "console",
                        "std"
                      ],
                      "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                    },
                    "pauseForSourceMap": {
                      "default": false,
                      "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                      "type": "boolean"
                    },
                    "remoteRoot": {
                      "default": null,
                      "description": "Absolute path to the remote directory containing the program.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "resolveSourceMapLocations": {
                      "default": [
                        "${workspaceFolder}/**",
                        "!**/node_modules/**"
                      ],
                      "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                      "items": {
                        "type": "string"
                      },
                      "type": [
                        "array",
                        "null"
                      ]
                    },
                    "runtimeSourcemapPausePatterns": {
                      "default": [],
                      "items": {
                        "type": "string"
                      },
                      "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                      "type": "array"
                    },
                    "showAsyncStacks": {
                      "default": true,
                      "description": "Show the async calls that led to the current call stack.",
                      "oneOf": [
                        {
                          "type": "boolean"
                        },
                        {
                          "properties": {
                            "onAttach": {
                              "default": 32,
                              "type": "number"
                            }
                          },
                          "required": [
                            "onAttach"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "onceBreakpointResolved": {
                              "default": 32,
                              "type": "number"
                            }
                          },
                          "required": [
                            "onceBreakpointResolved"
                          ],
                          "type": "object"
                        }
                      ]
                    },
                    "skipFiles": {
                      "default": [
                        "<node_internals>/**"
                      ],
                      "description": "An array of file or folder names, or path globs, to skip when debugging.",
                      "type": "array"
                    },
                    "smartStep": {
                      "default": true,
                      "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                      "type": "boolean"
                    },
                    "sourceMapPathOverrides": {
                      "default": {
                        "meteor://💻app/*": "${workspaceFolder}/*",
                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                        "webpack://?:*/*": "${workspaceFolder}/*"
                      },
                      "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                      "type": "object"
                    },
                    "sourceMapRenames": {
                      "default": true,
                      "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                      "type": "boolean"
                    },
                    "sourceMaps": {
                      "default": true,
                      "description": "Use JavaScript source maps (if they exist).",
                      "type": "boolean"
                    },
                    "timeout": {
                      "default": 10000,
                      "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                      "type": "number"
                    },
                    "timeouts": {
                      "additionalProperties": false,
                      "default": {},
                      "description": "Timeouts for several debugger operations.",
                      "markdownDescription": "Timeouts for several debugger operations.",
                      "properties": {
                        "sourceMapCumulativePause": {
                          "default": 1000,
                          "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                          "type": "number"
                        },
                        "sourceMapMinPause": {
                          "default": 1000,
                          "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                          "type": "number"
                        }
                      },
                      "type": "object"
                    },
                    "trace": {
                      "default": true,
                      "description": "Configures what diagnostic output is produced.",
                      "oneOf": [
                        {
                          "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                          "type": "boolean"
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "console": {
                              "description": "Whether to return trace data from the launched application or browser.",
                              "type": "boolean"
                            },
                            "level": {
                              "description": "Configures the level of logs recorded.",
                              "enum": [
                                "fatal",
                                "error",
                                "warn",
                                "info",
                                "verbose"
                              ]
                            },
                            "logFile": {
                              "description": "Configures where on disk logs are written.",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "stdio": {
                              "description": "Configures whether logs are also returned to the debug console.",
                              "type": "boolean"
                            },
                            "tags": {
                              "description": "Configures what types of logs are recorded.",
                              "items": {
                                "enum": [
                                  "cdp",
                                  "dap",
                                  "runtime"
                                ]
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        }
                      ]
                    }
                  },
                  "type": "object"
                }
              ]
            },
            "showAsyncStacks": {
              "default": true,
              "description": "Show the async calls that led to the current call stack.",
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "properties": {
                    "onAttach": {
                      "default": 32,
                      "type": "number"
                    }
                  },
                  "required": [
                    "onAttach"
                  ],
                  "type": "object"
                },
                {
                  "properties": {
                    "onceBreakpointResolved": {
                      "default": 32,
                      "type": "number"
                    }
                  },
                  "required": [
                    "onceBreakpointResolved"
                  ],
                  "type": "object"
                }
              ]
            },
            "skipFiles": {
              "default": [
                "<node_internals>/**"
              ],
              "description": "An array of file or folder names, or path globs, to skip when debugging.",
              "type": "array"
            },
            "smartStep": {
              "default": true,
              "description": "Automatically step through generated code that cannot be mapped back to the original source.",
              "type": "boolean"
            },
            "sourceMapPathOverrides": {
              "default": {
                "meteor://💻app/*": "${workspaceFolder}/*",
                "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                "webpack://?:*/*": "${workspaceFolder}/*"
              },
              "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
              "type": "object"
            },
            "sourceMapRenames": {
              "default": true,
              "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
              "type": "boolean"
            },
            "sourceMaps": {
              "default": true,
              "description": "Use JavaScript source maps (if they exist).",
              "type": "boolean"
            },
            "targetSelection": {
              "default": "automatic",
              "enum": [
                "pick",
                "automatic"
              ],
              "markdownDescription": "Whether to attach to all targets that match the URL filter (\"automatic\") or ask to pick one (\"pick\").",
              "type": "string"
            },
            "timeout": {
              "default": 10000,
              "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
              "type": "number"
            },
            "timeouts": {
              "additionalProperties": false,
              "default": {},
              "description": "Timeouts for several debugger operations.",
              "markdownDescription": "Timeouts for several debugger operations.",
              "properties": {
                "sourceMapCumulativePause": {
                  "default": 1000,
                  "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                  "type": "number"
                },
                "sourceMapMinPause": {
                  "default": 1000,
                  "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                  "type": "number"
                }
              },
              "type": "object"
            },
            "trace": {
              "default": true,
              "description": "Configures what diagnostic output is produced.",
              "oneOf": [
                {
                  "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                  "type": "boolean"
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "console": {
                      "description": "Whether to return trace data from the launched application or browser.",
                      "type": "boolean"
                    },
                    "level": {
                      "description": "Configures the level of logs recorded.",
                      "enum": [
                        "fatal",
                        "error",
                        "warn",
                        "info",
                        "verbose"
                      ]
                    },
                    "logFile": {
                      "description": "Configures where on disk logs are written.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "stdio": {
                      "description": "Configures whether logs are also returned to the debug console.",
                      "type": "boolean"
                    },
                    "tags": {
                      "description": "Configures what types of logs are recorded.",
                      "items": {
                        "enum": [
                          "cdp",
                          "dap",
                          "runtime"
                        ]
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              ]
            },
            "url": {
              "default": "http://localhost:8080",
              "description": "Will search for a tab with this exact url and attach to it, if found",
              "type": "string"
            },
            "urlFilter": {
              "default": "",
              "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
              "type": "string"
            },
            "vueComponentPaths": {
              "default": [
                "${workspaceFolder}/**/*.vue"
              ],
              "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
              "type": "array"
            },
            "webRoot": {
              "default": "${workspaceFolder}",
              "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
              "type": "string"
            }
          },
          "type": "object",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "resolveSourceMapLocations": {
          "default": [
            "${workspaceFolder}/**",
            "!**/node_modules/**"
          ],
          "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
          "items": {
            "type": "string"
          },
          "type": [
            "array",
            "null"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "runtimeExecutable": {
          "default": "node",
          "markdownDescription": "Absolute path to VS Code.",
          "type": [
            "string",
            "null"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "runtimeSourcemapPausePatterns": {
          "default": [],
          "items": {
            "type": "string"
          },
          "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
          "type": "array",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "showAsyncStacks": {
          "default": true,
          "description": "Show the async calls that led to the current call stack.",
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "properties": {
                "onAttach": {
                  "default": 32,
                  "type": "number"
                }
              },
              "required": [
                "onAttach"
              ],
              "type": "object"
            },
            {
              "properties": {
                "onceBreakpointResolved": {
                  "default": 32,
                  "type": "number"
                }
              },
              "required": [
                "onceBreakpointResolved"
              ],
              "type": "object"
            }
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "skipFiles": {
          "default": [
            "<node_internals>/**"
          ],
          "description": "An array of file or folder names, or path globs, to skip when debugging.",
          "type": "array",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "smartStep": {
          "default": true,
          "description": "Automatically step through generated code that cannot be mapped back to the original source.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "sourceMapPathOverrides": {
          "default": {
            "meteor://💻app/*": "${workspaceFolder}/*",
            "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
            "webpack://?:*/*": "${workspaceFolder}/*"
          },
          "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
          "type": "object",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "sourceMapRenames": {
          "default": true,
          "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "sourceMaps": {
          "default": true,
          "description": "Use JavaScript source maps (if they exist).",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "timeout": {
          "default": 10000,
          "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
          "type": "number",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "timeouts": {
          "additionalProperties": false,
          "default": {},
          "description": "Timeouts for several debugger operations.",
          "markdownDescription": "Timeouts for several debugger operations.",
          "properties": {
            "sourceMapCumulativePause": {
              "default": 1000,
              "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
              "type": "number"
            },
            "sourceMapMinPause": {
              "default": 1000,
              "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
              "type": "number"
            }
          },
          "type": "object",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "trace": {
          "default": true,
          "description": "Configures what diagnostic output is produced.",
          "oneOf": [
            {
              "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
              "type": "boolean"
            },
            {
              "additionalProperties": false,
              "properties": {
                "console": {
                  "description": "Whether to return trace data from the launched application or browser.",
                  "type": "boolean"
                },
                "level": {
                  "description": "Configures the level of logs recorded.",
                  "enum": [
                    "fatal",
                    "error",
                    "warn",
                    "info",
                    "verbose"
                  ]
                },
                "logFile": {
                  "description": "Configures where on disk logs are written.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "stdio": {
                  "description": "Configures whether logs are also returned to the debug console.",
                  "type": "boolean"
                },
                "tags": {
                  "description": "Configures what types of logs are recorded.",
                  "items": {
                    "enum": [
                      "cdp",
                      "dap",
                      "runtime"
                    ]
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "serverReadyAction": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": false,
              "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
              "default": {
                "action": "openExternally"
              },
              "properties": {
                "action": {
                  "type": "string",
                  "enum": [
                    "openExternally"
                  ],
                  "enumDescriptions": [
                    "Open URI externally with the default application."
                  ],
                  "markdownDescription": "What to do with the URI when the server is ready.",
                  "default": "openExternally"
                },
                "pattern": {
                  "type": "string",
                  "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                  "default": "listening on port ([0-9]+)"
                },
                "uriFormat": {
                  "type": "string",
                  "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                  "default": "http://localhost:%s"
                }
              }
            },
            {
              "type": "object",
              "additionalProperties": false,
              "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
              "default": {
                "action": "debugWithEdge",
                "pattern": "listening on port ([0-9]+)",
                "uriFormat": "http://localhost:%s",
                "webRoot": "${workspaceFolder}"
              },
              "properties": {
                "action": {
                  "type": "string",
                  "enum": [
                    "debugWithChrome",
                    "debugWithEdge"
                  ],
                  "enumDescriptions": [
                    "Start debugging with the 'Debugger for Chrome'."
                  ],
                  "markdownDescription": "What to do with the URI when the server is ready.",
                  "default": "debugWithEdge"
                },
                "pattern": {
                  "type": "string",
                  "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                  "default": "listening on port ([0-9]+)"
                },
                "uriFormat": {
                  "type": "string",
                  "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                  "default": "http://localhost:%s"
                },
                "webRoot": {
                  "type": "string",
                  "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                  "default": "${workspaceFolder}"
                }
              }
            },
            {
              "type": "object",
              "additionalProperties": false,
              "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
              "default": {
                "action": "startDebugging",
                "name": "<launch browser config name>"
              },
              "required": [
                "name"
              ],
              "properties": {
                "action": {
                  "type": "string",
                  "enum": [
                    "startDebugging"
                  ],
                  "enumDescriptions": [
                    "Run another launch configuration."
                  ],
                  "markdownDescription": "What to do with the URI when the server is ready.",
                  "default": "startDebugging"
                },
                "pattern": {
                  "type": "string",
                  "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                  "default": "listening on port ([0-9]+)"
                },
                "name": {
                  "type": "string",
                  "markdownDescription": "Name of the launch configuration to run.",
                  "default": "Launch Browser"
                }
              }
            }
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "type": {
          "enum": [
            "pwa-extensionHost"
          ],
          "description": "Type of configuration.",
          "pattern": "^(?!node2)",
          "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
          "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
        },
        "request": {
          "enum": [
            "launch"
          ],
          "description": "Request type of configuration. Can be \"launch\" or \"attach\".",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "name": {
          "$ref": "#/definitions/common/properties/name",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "debugServer": {
          "$ref": "#/definitions/common/properties/debugServer",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "preLaunchTask": {
          "$ref": "#/definitions/common/properties/preLaunchTask",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "postDebugTask": {
          "$ref": "#/definitions/common/properties/postDebugTask",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "presentation": {
          "$ref": "#/definitions/common/properties/presentation",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "internalConsoleOptions": {
          "$ref": "#/definitions/common/properties/internalConsoleOptions",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        }
      },
      "required": [
        "name",
        "type",
        "request",
        "name",
        "type",
        "request",
        "name",
        "type",
        "request",
        "args"
      ],
      "type": "object"
    },
    "extensionHost:launch": {
      "properties": {
        "args": {
          "default": [
            "--extensionDevelopmentPath=${workspaceFolder}"
          ],
          "description": "Command line arguments passed to the program.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "autoAttachChildProcesses": {
          "default": true,
          "description": "Attach debugger to new child processes automatically.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "cascadeTerminateToConfigurations": {
          "default": [],
          "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
          "items": {
            "type": "string",
            "uniqueItems": true
          },
          "type": "array",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "customDescriptionGenerator": {
          "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "customPropertiesGenerator": {
          "deprecated": true,
          "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "cwd": {
          "default": "${workspaceFolder}",
          "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "debugWebWorkerHost": {
          "default": true,
          "markdownDescription": "Configures whether we should try to attach to the web worker extension host.",
          "type": [
            "boolean"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "debugWebviews": {
          "default": true,
          "markdownDescription": "Configures whether we should try to attach to webviews in the launched VS Code instance. This will only work in desktop VS Code.",
          "type": [
            "boolean"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "enableContentValidation": {
          "default": true,
          "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "env": {
          "additionalProperties": {
            "type": [
              "string",
              "null"
            ]
          },
          "default": {},
          "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
          "type": "object",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "envFile": {
          "default": "${workspaceFolder}/.env",
          "description": "Absolute path to a file containing environment variable definitions.",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "localRoot": {
          "default": null,
          "description": "Path to the local directory containing the program.",
          "type": [
            "string",
            "null"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "nodeVersionHint": {
          "default": 12,
          "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
          "minimum": 8,
          "type": "number",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "outFiles": {
          "default": [
            "${workspaceFolder}/**/*.js",
            "!**/node_modules/**"
          ],
          "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
          "items": {
            "type": "string"
          },
          "type": [
            "array"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "outputCapture": {
          "default": "console",
          "enum": [
            "console",
            "std"
          ],
          "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "pauseForSourceMap": {
          "default": false,
          "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "remoteRoot": {
          "default": null,
          "description": "Absolute path to the remote directory containing the program.",
          "type": [
            "string",
            "null"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "rendererDebugOptions": {
          "default": {
            "webRoot": "${workspaceFolder}"
          },
          "markdownDescription": "Chrome launch options used when attaching to the renderer process, with `debugWebviews` or `debugWebWorkerHost`.",
          "properties": {
            "address": {
              "default": "localhost",
              "description": "IP address or hostname the debugged browser is listening on.",
              "type": "string"
            },
            "browserAttachLocation": {
              "default": null,
              "description": "Forces the browser to attach in one location. In a remote workspace (through ssh or WSL, for example) this can be used to attach to a browser on the remote machine rather than locally.",
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "enum": [
                    "ui",
                    "workspace"
                  ],
                  "type": "string"
                }
              ]
            },
            "cascadeTerminateToConfigurations": {
              "default": [],
              "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
              "items": {
                "type": "string",
                "uniqueItems": true
              },
              "type": "array"
            },
            "customDescriptionGenerator": {
              "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
              "type": "string"
            },
            "customPropertiesGenerator": {
              "deprecated": true,
              "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
              "type": "string"
            },
            "disableNetworkCache": {
              "default": true,
              "description": "Controls whether to skip the network cache for each request",
              "type": "boolean"
            },
            "enableContentValidation": {
              "default": true,
              "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
              "type": "boolean"
            },
            "inspectUri": {
              "default": null,
              "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `browserInspectUriPath` is the path part of the inspector URI on the launched browser (e.g.: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\").\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
              "type": [
                "string",
                "null"
              ]
            },
            "outFiles": {
              "default": [
                "${workspaceFolder}/**/*.js",
                "!**/node_modules/**"
              ],
              "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
              "items": {
                "type": "string"
              },
              "type": [
                "array"
              ]
            },
            "outputCapture": {
              "default": "console",
              "enum": [
                "console",
                "std"
              ],
              "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
            },
            "pathMapping": {
              "default": {},
              "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
              "type": "object"
            },
            "pauseForSourceMap": {
              "default": false,
              "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
              "type": "boolean"
            },
            "perScriptSourcemaps": {
              "default": "auto",
              "description": "Whether scripts are loaded individually with unique sourcemaps containing the basename of the source file. This can be set to optimize sourcemap handling when dealing with lots of small scripts. If set to \"auto\", we'll detect known cases where this is appropriate.",
              "enum": [
                "yes",
                "no",
                "auto"
              ],
              "type": "string"
            },
            "port": {
              "default": 9229,
              "description": "Port to use to remote debugging the browser, given as `--remote-debugging-port` when launching the browser.",
              "type": "number"
            },
            "resolveSourceMapLocations": {
              "default": null,
              "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
              "items": {
                "type": "string"
              },
              "type": [
                "array",
                "null"
              ]
            },
            "restart": {
              "default": false,
              "markdownDescription": "Whether to reconnect if the browser connection is closed",
              "type": "boolean"
            },
            "server": {
              "oneOf": [
                {
                  "additionalProperties": false,
                  "default": {
                    "program": "node my-server.js"
                  },
                  "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
                  "properties": {
                    "args": {
                      "default": [],
                      "description": "Command line arguments passed to the program.",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "attachSimplePort": {
                      "default": 9229,
                      "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                      "type": "integer"
                    },
                    "autoAttachChildProcesses": {
                      "default": true,
                      "description": "Attach debugger to new child processes automatically.",
                      "type": "boolean"
                    },
                    "cascadeTerminateToConfigurations": {
                      "default": [],
                      "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                      "items": {
                        "type": "string",
                        "uniqueItems": true
                      },
                      "type": "array"
                    },
                    "console": {
                      "default": "internalConsole",
                      "description": "Where to launch the debug target.",
                      "enum": [
                        "internalConsole",
                        "integratedTerminal",
                        "externalTerminal"
                      ],
                      "enumDescriptions": [
                        "VS Code Debug Console (which doesn't support to read input from a program)",
                        "VS Code's integrated terminal",
                        "External terminal that can be configured via user settings"
                      ],
                      "type": "string"
                    },
                    "customDescriptionGenerator": {
                      "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                      "type": "string"
                    },
                    "customPropertiesGenerator": {
                      "deprecated": true,
                      "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                      "type": "string"
                    },
                    "cwd": {
                      "default": "${workspaceFolder}",
                      "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                      "type": "string"
                    },
                    "enableContentValidation": {
                      "default": true,
                      "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                      "type": "boolean"
                    },
                    "env": {
                      "additionalProperties": {
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "default": {},
                      "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                      "type": "object"
                    },
                    "envFile": {
                      "default": "${workspaceFolder}/.env",
                      "description": "Absolute path to a file containing environment variable definitions.",
                      "type": "string"
                    },
                    "killBehavior": {
                      "default": "forceful",
                      "enum": [
                        "forceful",
                        "polite",
                        "none"
                      ],
                      "markdownDescription": "Configures how debug processes are killed when stopping the session. Can be:\n\n- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.\n- polite: gracefully tears down the process tree. It's possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.\n- none: no termination will happen.",
                      "type": "string"
                    },
                    "localRoot": {
                      "default": null,
                      "description": "Path to the local directory containing the program.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "nodeVersionHint": {
                      "default": 12,
                      "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                      "minimum": 8,
                      "type": "number"
                    },
                    "outFiles": {
                      "default": [
                        "${workspaceFolder}/**/*.js",
                        "!**/node_modules/**"
                      ],
                      "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                      "items": {
                        "type": "string"
                      },
                      "type": [
                        "array"
                      ]
                    },
                    "outputCapture": {
                      "default": "console",
                      "enum": [
                        "console",
                        "std"
                      ],
                      "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                    },
                    "pauseForSourceMap": {
                      "default": false,
                      "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                      "type": "boolean"
                    },
                    "profileStartup": {
                      "default": true,
                      "description": "If true, will start profiling as soon as the process launches",
                      "type": "boolean"
                    },
                    "program": {
                      "default": "",
                      "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                      "type": "string"
                    },
                    "remoteRoot": {
                      "default": null,
                      "description": "Absolute path to the remote directory containing the program.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "resolveSourceMapLocations": {
                      "default": [
                        "${workspaceFolder}/**",
                        "!**/node_modules/**"
                      ],
                      "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                      "items": {
                        "type": "string"
                      },
                      "type": [
                        "array",
                        "null"
                      ]
                    },
                    "restart": {
                      "default": true,
                      "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                      "oneOf": [
                        {
                          "type": "boolean"
                        },
                        {
                          "properties": {
                            "delay": {
                              "default": 1000,
                              "minimum": 0,
                              "type": "number"
                            },
                            "maxAttempts": {
                              "default": 10,
                              "minimum": 0,
                              "type": "number"
                            }
                          },
                          "type": "object"
                        }
                      ]
                    },
                    "runtimeArgs": {
                      "default": [],
                      "description": "Optional arguments passed to the runtime executable.",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "runtimeExecutable": {
                      "default": "node",
                      "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "runtimeSourcemapPausePatterns": {
                      "default": [],
                      "items": {
                        "type": "string"
                      },
                      "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                      "type": "array"
                    },
                    "runtimeVersion": {
                      "default": "default",
                      "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                      "type": "string"
                    },
                    "showAsyncStacks": {
                      "default": true,
                      "description": "Show the async calls that led to the current call stack.",
                      "oneOf": [
                        {
                          "type": "boolean"
                        },
                        {
                          "properties": {
                            "onAttach": {
                              "default": 32,
                              "type": "number"
                            }
                          },
                          "required": [
                            "onAttach"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "onceBreakpointResolved": {
                              "default": 32,
                              "type": "number"
                            }
                          },
                          "required": [
                            "onceBreakpointResolved"
                          ],
                          "type": "object"
                        }
                      ]
                    },
                    "skipFiles": {
                      "default": [
                        "<node_internals>/**"
                      ],
                      "description": "An array of file or folder names, or path globs, to skip when debugging.",
                      "type": "array"
                    },
                    "smartStep": {
                      "default": true,
                      "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                      "type": "boolean"
                    },
                    "sourceMapPathOverrides": {
                      "default": {
                        "meteor://💻app/*": "${workspaceFolder}/*",
                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                        "webpack://?:*/*": "${workspaceFolder}/*"
                      },
                      "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                      "type": "object"
                    },
                    "sourceMapRenames": {
                      "default": true,
                      "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                      "type": "boolean"
                    },
                    "sourceMaps": {
                      "default": true,
                      "description": "Use JavaScript source maps (if they exist).",
                      "type": "boolean"
                    },
                    "stopOnEntry": {
                      "default": true,
                      "description": "Automatically stop program after launch.",
                      "type": [
                        "boolean",
                        "string"
                      ]
                    },
                    "timeout": {
                      "default": 10000,
                      "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                      "type": "number"
                    },
                    "timeouts": {
                      "additionalProperties": false,
                      "default": {},
                      "description": "Timeouts for several debugger operations.",
                      "markdownDescription": "Timeouts for several debugger operations.",
                      "properties": {
                        "sourceMapCumulativePause": {
                          "default": 1000,
                          "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                          "type": "number"
                        },
                        "sourceMapMinPause": {
                          "default": 1000,
                          "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                          "type": "number"
                        }
                      },
                      "type": "object"
                    },
                    "trace": {
                      "default": true,
                      "description": "Configures what diagnostic output is produced.",
                      "oneOf": [
                        {
                          "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                          "type": "boolean"
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "console": {
                              "description": "Whether to return trace data from the launched application or browser.",
                              "type": "boolean"
                            },
                            "level": {
                              "description": "Configures the level of logs recorded.",
                              "enum": [
                                "fatal",
                                "error",
                                "warn",
                                "info",
                                "verbose"
                              ]
                            },
                            "logFile": {
                              "description": "Configures where on disk logs are written.",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "stdio": {
                              "description": "Configures whether logs are also returned to the debug console.",
                              "type": "boolean"
                            },
                            "tags": {
                              "description": "Configures what types of logs are recorded.",
                              "items": {
                                "enum": [
                                  "cdp",
                                  "dap",
                                  "runtime"
                                ]
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        }
                      ]
                    }
                  },
                  "type": "object"
                },
                {
                  "additionalProperties": false,
                  "default": {
                    "program": "npm start"
                  },
                  "description": "JavaScript Debug Terminal",
                  "properties": {
                    "autoAttachChildProcesses": {
                      "default": true,
                      "description": "Attach debugger to new child processes automatically.",
                      "type": "boolean"
                    },
                    "cascadeTerminateToConfigurations": {
                      "default": [],
                      "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                      "items": {
                        "type": "string",
                        "uniqueItems": true
                      },
                      "type": "array"
                    },
                    "command": {
                      "default": "npm start",
                      "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "customDescriptionGenerator": {
                      "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                      "type": "string"
                    },
                    "customPropertiesGenerator": {
                      "deprecated": true,
                      "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                      "type": "string"
                    },
                    "cwd": {
                      "default": "${workspaceFolder}",
                      "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                      "docDefault": "localRoot || ${workspaceFolder}",
                      "type": "string"
                    },
                    "enableContentValidation": {
                      "default": true,
                      "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                      "type": "boolean"
                    },
                    "env": {
                      "additionalProperties": {
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "default": {},
                      "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                      "type": "object"
                    },
                    "envFile": {
                      "default": "${workspaceFolder}/.env",
                      "description": "Absolute path to a file containing environment variable definitions.",
                      "type": "string"
                    },
                    "localRoot": {
                      "default": null,
                      "description": "Path to the local directory containing the program.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "nodeVersionHint": {
                      "default": 12,
                      "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                      "minimum": 8,
                      "type": "number"
                    },
                    "outFiles": {
                      "default": [
                        "${workspaceFolder}/**/*.js",
                        "!**/node_modules/**"
                      ],
                      "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                      "items": {
                        "type": "string"
                      },
                      "type": [
                        "array"
                      ]
                    },
                    "outputCapture": {
                      "default": "console",
                      "enum": [
                        "console",
                        "std"
                      ],
                      "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                    },
                    "pauseForSourceMap": {
                      "default": false,
                      "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                      "type": "boolean"
                    },
                    "remoteRoot": {
                      "default": null,
                      "description": "Absolute path to the remote directory containing the program.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "resolveSourceMapLocations": {
                      "default": [
                        "${workspaceFolder}/**",
                        "!**/node_modules/**"
                      ],
                      "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                      "items": {
                        "type": "string"
                      },
                      "type": [
                        "array",
                        "null"
                      ]
                    },
                    "runtimeSourcemapPausePatterns": {
                      "default": [],
                      "items": {
                        "type": "string"
                      },
                      "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                      "type": "array"
                    },
                    "showAsyncStacks": {
                      "default": true,
                      "description": "Show the async calls that led to the current call stack.",
                      "oneOf": [
                        {
                          "type": "boolean"
                        },
                        {
                          "properties": {
                            "onAttach": {
                              "default": 32,
                              "type": "number"
                            }
                          },
                          "required": [
                            "onAttach"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "onceBreakpointResolved": {
                              "default": 32,
                              "type": "number"
                            }
                          },
                          "required": [
                            "onceBreakpointResolved"
                          ],
                          "type": "object"
                        }
                      ]
                    },
                    "skipFiles": {
                      "default": [
                        "<node_internals>/**"
                      ],
                      "description": "An array of file or folder names, or path globs, to skip when debugging.",
                      "type": "array"
                    },
                    "smartStep": {
                      "default": true,
                      "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                      "type": "boolean"
                    },
                    "sourceMapPathOverrides": {
                      "default": {
                        "meteor://💻app/*": "${workspaceFolder}/*",
                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                        "webpack://?:*/*": "${workspaceFolder}/*"
                      },
                      "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                      "type": "object"
                    },
                    "sourceMapRenames": {
                      "default": true,
                      "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                      "type": "boolean"
                    },
                    "sourceMaps": {
                      "default": true,
                      "description": "Use JavaScript source maps (if they exist).",
                      "type": "boolean"
                    },
                    "timeout": {
                      "default": 10000,
                      "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                      "type": "number"
                    },
                    "timeouts": {
                      "additionalProperties": false,
                      "default": {},
                      "description": "Timeouts for several debugger operations.",
                      "markdownDescription": "Timeouts for several debugger operations.",
                      "properties": {
                        "sourceMapCumulativePause": {
                          "default": 1000,
                          "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                          "type": "number"
                        },
                        "sourceMapMinPause": {
                          "default": 1000,
                          "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                          "type": "number"
                        }
                      },
                      "type": "object"
                    },
                    "trace": {
                      "default": true,
                      "description": "Configures what diagnostic output is produced.",
                      "oneOf": [
                        {
                          "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                          "type": "boolean"
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "console": {
                              "description": "Whether to return trace data from the launched application or browser.",
                              "type": "boolean"
                            },
                            "level": {
                              "description": "Configures the level of logs recorded.",
                              "enum": [
                                "fatal",
                                "error",
                                "warn",
                                "info",
                                "verbose"
                              ]
                            },
                            "logFile": {
                              "description": "Configures where on disk logs are written.",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "stdio": {
                              "description": "Configures whether logs are also returned to the debug console.",
                              "type": "boolean"
                            },
                            "tags": {
                              "description": "Configures what types of logs are recorded.",
                              "items": {
                                "enum": [
                                  "cdp",
                                  "dap",
                                  "runtime"
                                ]
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        }
                      ]
                    }
                  },
                  "type": "object"
                }
              ]
            },
            "showAsyncStacks": {
              "default": true,
              "description": "Show the async calls that led to the current call stack.",
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "properties": {
                    "onAttach": {
                      "default": 32,
                      "type": "number"
                    }
                  },
                  "required": [
                    "onAttach"
                  ],
                  "type": "object"
                },
                {
                  "properties": {
                    "onceBreakpointResolved": {
                      "default": 32,
                      "type": "number"
                    }
                  },
                  "required": [
                    "onceBreakpointResolved"
                  ],
                  "type": "object"
                }
              ]
            },
            "skipFiles": {
              "default": [
                "<node_internals>/**"
              ],
              "description": "An array of file or folder names, or path globs, to skip when debugging.",
              "type": "array"
            },
            "smartStep": {
              "default": true,
              "description": "Automatically step through generated code that cannot be mapped back to the original source.",
              "type": "boolean"
            },
            "sourceMapPathOverrides": {
              "default": {
                "meteor://💻app/*": "${workspaceFolder}/*",
                "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                "webpack://?:*/*": "${workspaceFolder}/*"
              },
              "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
              "type": "object"
            },
            "sourceMapRenames": {
              "default": true,
              "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
              "type": "boolean"
            },
            "sourceMaps": {
              "default": true,
              "description": "Use JavaScript source maps (if they exist).",
              "type": "boolean"
            },
            "targetSelection": {
              "default": "automatic",
              "enum": [
                "pick",
                "automatic"
              ],
              "markdownDescription": "Whether to attach to all targets that match the URL filter (\"automatic\") or ask to pick one (\"pick\").",
              "type": "string"
            },
            "timeout": {
              "default": 10000,
              "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
              "type": "number"
            },
            "timeouts": {
              "additionalProperties": false,
              "default": {},
              "description": "Timeouts for several debugger operations.",
              "markdownDescription": "Timeouts for several debugger operations.",
              "properties": {
                "sourceMapCumulativePause": {
                  "default": 1000,
                  "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                  "type": "number"
                },
                "sourceMapMinPause": {
                  "default": 1000,
                  "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                  "type": "number"
                }
              },
              "type": "object"
            },
            "trace": {
              "default": true,
              "description": "Configures what diagnostic output is produced.",
              "oneOf": [
                {
                  "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                  "type": "boolean"
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "console": {
                      "description": "Whether to return trace data from the launched application or browser.",
                      "type": "boolean"
                    },
                    "level": {
                      "description": "Configures the level of logs recorded.",
                      "enum": [
                        "fatal",
                        "error",
                        "warn",
                        "info",
                        "verbose"
                      ]
                    },
                    "logFile": {
                      "description": "Configures where on disk logs are written.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "stdio": {
                      "description": "Configures whether logs are also returned to the debug console.",
                      "type": "boolean"
                    },
                    "tags": {
                      "description": "Configures what types of logs are recorded.",
                      "items": {
                        "enum": [
                          "cdp",
                          "dap",
                          "runtime"
                        ]
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              ]
            },
            "url": {
              "default": "http://localhost:8080",
              "description": "Will search for a tab with this exact url and attach to it, if found",
              "type": "string"
            },
            "urlFilter": {
              "default": "",
              "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
              "type": "string"
            },
            "vueComponentPaths": {
              "default": [
                "${workspaceFolder}/**/*.vue"
              ],
              "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
              "type": "array"
            },
            "webRoot": {
              "default": "${workspaceFolder}",
              "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
              "type": "string"
            }
          },
          "type": "object",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "resolveSourceMapLocations": {
          "default": [
            "${workspaceFolder}/**",
            "!**/node_modules/**"
          ],
          "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
          "items": {
            "type": "string"
          },
          "type": [
            "array",
            "null"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "runtimeExecutable": {
          "default": "node",
          "markdownDescription": "Absolute path to VS Code.",
          "type": [
            "string",
            "null"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "runtimeSourcemapPausePatterns": {
          "default": [],
          "items": {
            "type": "string"
          },
          "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
          "type": "array",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "showAsyncStacks": {
          "default": true,
          "description": "Show the async calls that led to the current call stack.",
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "properties": {
                "onAttach": {
                  "default": 32,
                  "type": "number"
                }
              },
              "required": [
                "onAttach"
              ],
              "type": "object"
            },
            {
              "properties": {
                "onceBreakpointResolved": {
                  "default": 32,
                  "type": "number"
                }
              },
              "required": [
                "onceBreakpointResolved"
              ],
              "type": "object"
            }
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "skipFiles": {
          "default": [
            "<node_internals>/**"
          ],
          "description": "An array of file or folder names, or path globs, to skip when debugging.",
          "type": "array",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "smartStep": {
          "default": true,
          "description": "Automatically step through generated code that cannot be mapped back to the original source.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "sourceMapPathOverrides": {
          "default": {
            "meteor://💻app/*": "${workspaceFolder}/*",
            "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
            "webpack://?:*/*": "${workspaceFolder}/*"
          },
          "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
          "type": "object",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "sourceMapRenames": {
          "default": true,
          "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "sourceMaps": {
          "default": true,
          "description": "Use JavaScript source maps (if they exist).",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "timeout": {
          "default": 10000,
          "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
          "type": "number",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "timeouts": {
          "additionalProperties": false,
          "default": {},
          "description": "Timeouts for several debugger operations.",
          "markdownDescription": "Timeouts for several debugger operations.",
          "properties": {
            "sourceMapCumulativePause": {
              "default": 1000,
              "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
              "type": "number"
            },
            "sourceMapMinPause": {
              "default": 1000,
              "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
              "type": "number"
            }
          },
          "type": "object",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "trace": {
          "default": true,
          "description": "Configures what diagnostic output is produced.",
          "oneOf": [
            {
              "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
              "type": "boolean"
            },
            {
              "additionalProperties": false,
              "properties": {
                "console": {
                  "description": "Whether to return trace data from the launched application or browser.",
                  "type": "boolean"
                },
                "level": {
                  "description": "Configures the level of logs recorded.",
                  "enum": [
                    "fatal",
                    "error",
                    "warn",
                    "info",
                    "verbose"
                  ]
                },
                "logFile": {
                  "description": "Configures where on disk logs are written.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "stdio": {
                  "description": "Configures whether logs are also returned to the debug console.",
                  "type": "boolean"
                },
                "tags": {
                  "description": "Configures what types of logs are recorded.",
                  "items": {
                    "enum": [
                      "cdp",
                      "dap",
                      "runtime"
                    ]
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "serverReadyAction": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": false,
              "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
              "default": {
                "action": "openExternally"
              },
              "properties": {
                "action": {
                  "type": "string",
                  "enum": [
                    "openExternally"
                  ],
                  "enumDescriptions": [
                    "Open URI externally with the default application."
                  ],
                  "markdownDescription": "What to do with the URI when the server is ready.",
                  "default": "openExternally"
                },
                "pattern": {
                  "type": "string",
                  "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                  "default": "listening on port ([0-9]+)"
                },
                "uriFormat": {
                  "type": "string",
                  "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                  "default": "http://localhost:%s"
                }
              }
            },
            {
              "type": "object",
              "additionalProperties": false,
              "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
              "default": {
                "action": "debugWithEdge",
                "pattern": "listening on port ([0-9]+)",
                "uriFormat": "http://localhost:%s",
                "webRoot": "${workspaceFolder}"
              },
              "properties": {
                "action": {
                  "type": "string",
                  "enum": [
                    "debugWithChrome",
                    "debugWithEdge"
                  ],
                  "enumDescriptions": [
                    "Start debugging with the 'Debugger for Chrome'."
                  ],
                  "markdownDescription": "What to do with the URI when the server is ready.",
                  "default": "debugWithEdge"
                },
                "pattern": {
                  "type": "string",
                  "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                  "default": "listening on port ([0-9]+)"
                },
                "uriFormat": {
                  "type": "string",
                  "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                  "default": "http://localhost:%s"
                },
                "webRoot": {
                  "type": "string",
                  "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                  "default": "${workspaceFolder}"
                }
              }
            },
            {
              "type": "object",
              "additionalProperties": false,
              "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
              "default": {
                "action": "startDebugging",
                "name": "<launch browser config name>"
              },
              "required": [
                "name"
              ],
              "properties": {
                "action": {
                  "type": "string",
                  "enum": [
                    "startDebugging"
                  ],
                  "enumDescriptions": [
                    "Run another launch configuration."
                  ],
                  "markdownDescription": "What to do with the URI when the server is ready.",
                  "default": "startDebugging"
                },
                "pattern": {
                  "type": "string",
                  "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                  "default": "listening on port ([0-9]+)"
                },
                "name": {
                  "type": "string",
                  "markdownDescription": "Name of the launch configuration to run.",
                  "default": "Launch Browser"
                }
              }
            }
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "type": {
          "enum": [
            "extensionHost"
          ],
          "description": "Type of configuration.",
          "pattern": "^(?!node2)",
          "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
          "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
        },
        "request": {
          "enum": [
            "launch"
          ],
          "description": "Request type of configuration. Can be \"launch\" or \"attach\".",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "name": {
          "$ref": "#/definitions/common/properties/name",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "debugServer": {
          "$ref": "#/definitions/common/properties/debugServer",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "preLaunchTask": {
          "$ref": "#/definitions/common/properties/preLaunchTask",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "postDebugTask": {
          "$ref": "#/definitions/common/properties/postDebugTask",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "presentation": {
          "$ref": "#/definitions/common/properties/presentation",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "internalConsoleOptions": {
          "$ref": "#/definitions/common/properties/internalConsoleOptions",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        }
      },
      "required": [
        "name",
        "type",
        "request",
        "name",
        "type",
        "request",
        "name",
        "type",
        "request",
        "args"
      ],
      "type": "object"
    },
    "pwa-chrome:attach": {
      "properties": {
        "address": {
          "default": "localhost",
          "description": "IP address or hostname the debugged browser is listening on.",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "browserAttachLocation": {
          "default": null,
          "description": "Forces the browser to attach in one location. In a remote workspace (through ssh or WSL, for example) this can be used to attach to a browser on the remote machine rather than locally.",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "enum": [
                "ui",
                "workspace"
              ],
              "type": "string"
            }
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "cascadeTerminateToConfigurations": {
          "default": [],
          "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
          "items": {
            "type": "string",
            "uniqueItems": true
          },
          "type": "array",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "customDescriptionGenerator": {
          "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "customPropertiesGenerator": {
          "deprecated": true,
          "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "disableNetworkCache": {
          "default": true,
          "description": "Controls whether to skip the network cache for each request",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "enableContentValidation": {
          "default": true,
          "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "inspectUri": {
          "default": null,
          "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `browserInspectUriPath` is the path part of the inspector URI on the launched browser (e.g.: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\").\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
          "type": [
            "string",
            "null"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "outFiles": {
          "default": [
            "${workspaceFolder}/**/*.js",
            "!**/node_modules/**"
          ],
          "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
          "items": {
            "type": "string"
          },
          "type": [
            "array"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "outputCapture": {
          "default": "console",
          "enum": [
            "console",
            "std"
          ],
          "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "pathMapping": {
          "default": {},
          "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
          "type": "object",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "pauseForSourceMap": {
          "default": false,
          "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "perScriptSourcemaps": {
          "default": "auto",
          "description": "Whether scripts are loaded individually with unique sourcemaps containing the basename of the source file. This can be set to optimize sourcemap handling when dealing with lots of small scripts. If set to \"auto\", we'll detect known cases where this is appropriate.",
          "enum": [
            "yes",
            "no",
            "auto"
          ],
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "port": {
          "default": 9229,
          "description": "Port to use to remote debugging the browser, given as `--remote-debugging-port` when launching the browser.",
          "type": "number",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "resolveSourceMapLocations": {
          "default": null,
          "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
          "items": {
            "type": "string"
          },
          "type": [
            "array",
            "null"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "restart": {
          "default": false,
          "markdownDescription": "Whether to reconnect if the browser connection is closed",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "server": {
          "oneOf": [
            {
              "additionalProperties": false,
              "default": {
                "program": "node my-server.js"
              },
              "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
              "properties": {
                "args": {
                  "default": [],
                  "description": "Command line arguments passed to the program.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "attachSimplePort": {
                  "default": 9229,
                  "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                  "type": "integer"
                },
                "autoAttachChildProcesses": {
                  "default": true,
                  "description": "Attach debugger to new child processes automatically.",
                  "type": "boolean"
                },
                "cascadeTerminateToConfigurations": {
                  "default": [],
                  "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                  "items": {
                    "type": "string",
                    "uniqueItems": true
                  },
                  "type": "array"
                },
                "console": {
                  "default": "internalConsole",
                  "description": "Where to launch the debug target.",
                  "enum": [
                    "internalConsole",
                    "integratedTerminal",
                    "externalTerminal"
                  ],
                  "enumDescriptions": [
                    "VS Code Debug Console (which doesn't support to read input from a program)",
                    "VS Code's integrated terminal",
                    "External terminal that can be configured via user settings"
                  ],
                  "type": "string"
                },
                "customDescriptionGenerator": {
                  "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                  "type": "string"
                },
                "customPropertiesGenerator": {
                  "deprecated": true,
                  "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                  "type": "string"
                },
                "cwd": {
                  "default": "${workspaceFolder}",
                  "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                  "type": "string"
                },
                "enableContentValidation": {
                  "default": true,
                  "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                  "type": "boolean"
                },
                "env": {
                  "additionalProperties": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "default": {},
                  "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                  "type": "object"
                },
                "envFile": {
                  "default": "${workspaceFolder}/.env",
                  "description": "Absolute path to a file containing environment variable definitions.",
                  "type": "string"
                },
                "killBehavior": {
                  "default": "forceful",
                  "enum": [
                    "forceful",
                    "polite",
                    "none"
                  ],
                  "markdownDescription": "Configures how debug processes are killed when stopping the session. Can be:\n\n- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.\n- polite: gracefully tears down the process tree. It's possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.\n- none: no termination will happen.",
                  "type": "string"
                },
                "localRoot": {
                  "default": null,
                  "description": "Path to the local directory containing the program.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "nodeVersionHint": {
                  "default": 12,
                  "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                  "minimum": 8,
                  "type": "number"
                },
                "outFiles": {
                  "default": [
                    "${workspaceFolder}/**/*.js",
                    "!**/node_modules/**"
                  ],
                  "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                  "items": {
                    "type": "string"
                  },
                  "type": [
                    "array"
                  ]
                },
                "outputCapture": {
                  "default": "console",
                  "enum": [
                    "console",
                    "std"
                  ],
                  "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                },
                "pauseForSourceMap": {
                  "default": false,
                  "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                  "type": "boolean"
                },
                "profileStartup": {
                  "default": true,
                  "description": "If true, will start profiling as soon as the process launches",
                  "type": "boolean"
                },
                "program": {
                  "default": "",
                  "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                  "type": "string"
                },
                "remoteRoot": {
                  "default": null,
                  "description": "Absolute path to the remote directory containing the program.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "resolveSourceMapLocations": {
                  "default": [
                    "${workspaceFolder}/**",
                    "!**/node_modules/**"
                  ],
                  "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                  "items": {
                    "type": "string"
                  },
                  "type": [
                    "array",
                    "null"
                  ]
                },
                "restart": {
                  "default": true,
                  "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                  "oneOf": [
                    {
                      "type": "boolean"
                    },
                    {
                      "properties": {
                        "delay": {
                          "default": 1000,
                          "minimum": 0,
                          "type": "number"
                        },
                        "maxAttempts": {
                          "default": 10,
                          "minimum": 0,
                          "type": "number"
                        }
                      },
                      "type": "object"
                    }
                  ]
                },
                "runtimeArgs": {
                  "default": [],
                  "description": "Optional arguments passed to the runtime executable.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "runtimeExecutable": {
                  "default": "node",
                  "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "runtimeSourcemapPausePatterns": {
                  "default": [],
                  "items": {
                    "type": "string"
                  },
                  "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                  "type": "array"
                },
                "runtimeVersion": {
                  "default": "default",
                  "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                  "type": "string"
                },
                "showAsyncStacks": {
                  "default": true,
                  "description": "Show the async calls that led to the current call stack.",
                  "oneOf": [
                    {
                      "type": "boolean"
                    },
                    {
                      "properties": {
                        "onAttach": {
                          "default": 32,
                          "type": "number"
                        }
                      },
                      "required": [
                        "onAttach"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "onceBreakpointResolved": {
                          "default": 32,
                          "type": "number"
                        }
                      },
                      "required": [
                        "onceBreakpointResolved"
                      ],
                      "type": "object"
                    }
                  ]
                },
                "skipFiles": {
                  "default": [
                    "<node_internals>/**"
                  ],
                  "description": "An array of file or folder names, or path globs, to skip when debugging.",
                  "type": "array"
                },
                "smartStep": {
                  "default": true,
                  "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                  "type": "boolean"
                },
                "sourceMapPathOverrides": {
                  "default": {
                    "meteor://💻app/*": "${workspaceFolder}/*",
                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                    "webpack://?:*/*": "${workspaceFolder}/*"
                  },
                  "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                  "type": "object"
                },
                "sourceMapRenames": {
                  "default": true,
                  "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                  "type": "boolean"
                },
                "sourceMaps": {
                  "default": true,
                  "description": "Use JavaScript source maps (if they exist).",
                  "type": "boolean"
                },
                "stopOnEntry": {
                  "default": true,
                  "description": "Automatically stop program after launch.",
                  "type": [
                    "boolean",
                    "string"
                  ]
                },
                "timeout": {
                  "default": 10000,
                  "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                  "type": "number"
                },
                "timeouts": {
                  "additionalProperties": false,
                  "default": {},
                  "description": "Timeouts for several debugger operations.",
                  "markdownDescription": "Timeouts for several debugger operations.",
                  "properties": {
                    "sourceMapCumulativePause": {
                      "default": 1000,
                      "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                      "type": "number"
                    },
                    "sourceMapMinPause": {
                      "default": 1000,
                      "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                      "type": "number"
                    }
                  },
                  "type": "object"
                },
                "trace": {
                  "default": true,
                  "description": "Configures what diagnostic output is produced.",
                  "oneOf": [
                    {
                      "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                      "type": "boolean"
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "console": {
                          "description": "Whether to return trace data from the launched application or browser.",
                          "type": "boolean"
                        },
                        "level": {
                          "description": "Configures the level of logs recorded.",
                          "enum": [
                            "fatal",
                            "error",
                            "warn",
                            "info",
                            "verbose"
                          ]
                        },
                        "logFile": {
                          "description": "Configures where on disk logs are written.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "stdio": {
                          "description": "Configures whether logs are also returned to the debug console.",
                          "type": "boolean"
                        },
                        "tags": {
                          "description": "Configures what types of logs are recorded.",
                          "items": {
                            "enum": [
                              "cdp",
                              "dap",
                              "runtime"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              },
              "type": "object"
            },
            {
              "additionalProperties": false,
              "default": {
                "program": "npm start"
              },
              "description": "JavaScript Debug Terminal",
              "properties": {
                "autoAttachChildProcesses": {
                  "default": true,
                  "description": "Attach debugger to new child processes automatically.",
                  "type": "boolean"
                },
                "cascadeTerminateToConfigurations": {
                  "default": [],
                  "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                  "items": {
                    "type": "string",
                    "uniqueItems": true
                  },
                  "type": "array"
                },
                "command": {
                  "default": "npm start",
                  "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "customDescriptionGenerator": {
                  "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                  "type": "string"
                },
                "customPropertiesGenerator": {
                  "deprecated": true,
                  "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                  "type": "string"
                },
                "cwd": {
                  "default": "${workspaceFolder}",
                  "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                  "docDefault": "localRoot || ${workspaceFolder}",
                  "type": "string"
                },
                "enableContentValidation": {
                  "default": true,
                  "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                  "type": "boolean"
                },
                "env": {
                  "additionalProperties": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "default": {},
                  "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                  "type": "object"
                },
                "envFile": {
                  "default": "${workspaceFolder}/.env",
                  "description": "Absolute path to a file containing environment variable definitions.",
                  "type": "string"
                },
                "localRoot": {
                  "default": null,
                  "description": "Path to the local directory containing the program.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "nodeVersionHint": {
                  "default": 12,
                  "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                  "minimum": 8,
                  "type": "number"
                },
                "outFiles": {
                  "default": [
                    "${workspaceFolder}/**/*.js",
                    "!**/node_modules/**"
                  ],
                  "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                  "items": {
                    "type": "string"
                  },
                  "type": [
                    "array"
                  ]
                },
                "outputCapture": {
                  "default": "console",
                  "enum": [
                    "console",
                    "std"
                  ],
                  "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                },
                "pauseForSourceMap": {
                  "default": false,
                  "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                  "type": "boolean"
                },
                "remoteRoot": {
                  "default": null,
                  "description": "Absolute path to the remote directory containing the program.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "resolveSourceMapLocations": {
                  "default": [
                    "${workspaceFolder}/**",
                    "!**/node_modules/**"
                  ],
                  "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                  "items": {
                    "type": "string"
                  },
                  "type": [
                    "array",
                    "null"
                  ]
                },
                "runtimeSourcemapPausePatterns": {
                  "default": [],
                  "items": {
                    "type": "string"
                  },
                  "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                  "type": "array"
                },
                "showAsyncStacks": {
                  "default": true,
                  "description": "Show the async calls that led to the current call stack.",
                  "oneOf": [
                    {
                      "type": "boolean"
                    },
                    {
                      "properties": {
                        "onAttach": {
                          "default": 32,
                          "type": "number"
                        }
                      },
                      "required": [
                        "onAttach"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "onceBreakpointResolved": {
                          "default": 32,
                          "type": "number"
                        }
                      },
                      "required": [
                        "onceBreakpointResolved"
                      ],
                      "type": "object"
                    }
                  ]
                },
                "skipFiles": {
                  "default": [
                    "<node_internals>/**"
                  ],
                  "description": "An array of file or folder names, or path globs, to skip when debugging.",
                  "type": "array"
                },
                "smartStep": {
                  "default": true,
                  "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                  "type": "boolean"
                },
                "sourceMapPathOverrides": {
                  "default": {
                    "meteor://💻app/*": "${workspaceFolder}/*",
                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                    "webpack://?:*/*": "${workspaceFolder}/*"
                  },
                  "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                  "type": "object"
                },
                "sourceMapRenames": {
                  "default": true,
                  "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                  "type": "boolean"
                },
                "sourceMaps": {
                  "default": true,
                  "description": "Use JavaScript source maps (if they exist).",
                  "type": "boolean"
                },
                "timeout": {
                  "default": 10000,
                  "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                  "type": "number"
                },
                "timeouts": {
                  "additionalProperties": false,
                  "default": {},
                  "description": "Timeouts for several debugger operations.",
                  "markdownDescription": "Timeouts for several debugger operations.",
                  "properties": {
                    "sourceMapCumulativePause": {
                      "default": 1000,
                      "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                      "type": "number"
                    },
                    "sourceMapMinPause": {
                      "default": 1000,
                      "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                      "type": "number"
                    }
                  },
                  "type": "object"
                },
                "trace": {
                  "default": true,
                  "description": "Configures what diagnostic output is produced.",
                  "oneOf": [
                    {
                      "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                      "type": "boolean"
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "console": {
                          "description": "Whether to return trace data from the launched application or browser.",
                          "type": "boolean"
                        },
                        "level": {
                          "description": "Configures the level of logs recorded.",
                          "enum": [
                            "fatal",
                            "error",
                            "warn",
                            "info",
                            "verbose"
                          ]
                        },
                        "logFile": {
                          "description": "Configures where on disk logs are written.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "stdio": {
                          "description": "Configures whether logs are also returned to the debug console.",
                          "type": "boolean"
                        },
                        "tags": {
                          "description": "Configures what types of logs are recorded.",
                          "items": {
                            "enum": [
                              "cdp",
                              "dap",
                              "runtime"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              },
              "type": "object"
            }
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "showAsyncStacks": {
          "default": true,
          "description": "Show the async calls that led to the current call stack.",
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "properties": {
                "onAttach": {
                  "default": 32,
                  "type": "number"
                }
              },
              "required": [
                "onAttach"
              ],
              "type": "object"
            },
            {
              "properties": {
                "onceBreakpointResolved": {
                  "default": 32,
                  "type": "number"
                }
              },
              "required": [
                "onceBreakpointResolved"
              ],
              "type": "object"
            }
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "skipFiles": {
          "default": [
            "<node_internals>/**"
          ],
          "description": "An array of file or folder names, or path globs, to skip when debugging.",
          "type": "array",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "smartStep": {
          "default": true,
          "description": "Automatically step through generated code that cannot be mapped back to the original source.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "sourceMapPathOverrides": {
          "default": {
            "meteor://💻app/*": "${workspaceFolder}/*",
            "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
            "webpack://?:*/*": "${workspaceFolder}/*"
          },
          "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
          "type": "object",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "sourceMapRenames": {
          "default": true,
          "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "sourceMaps": {
          "default": true,
          "description": "Use JavaScript source maps (if they exist).",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "targetSelection": {
          "default": "automatic",
          "enum": [
            "pick",
            "automatic"
          ],
          "markdownDescription": "Whether to attach to all targets that match the URL filter (\"automatic\") or ask to pick one (\"pick\").",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "timeout": {
          "default": 10000,
          "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
          "type": "number",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "timeouts": {
          "additionalProperties": false,
          "default": {},
          "description": "Timeouts for several debugger operations.",
          "markdownDescription": "Timeouts for several debugger operations.",
          "properties": {
            "sourceMapCumulativePause": {
              "default": 1000,
              "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
              "type": "number"
            },
            "sourceMapMinPause": {
              "default": 1000,
              "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
              "type": "number"
            }
          },
          "type": "object",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "trace": {
          "default": true,
          "description": "Configures what diagnostic output is produced.",
          "oneOf": [
            {
              "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
              "type": "boolean"
            },
            {
              "additionalProperties": false,
              "properties": {
                "console": {
                  "description": "Whether to return trace data from the launched application or browser.",
                  "type": "boolean"
                },
                "level": {
                  "description": "Configures the level of logs recorded.",
                  "enum": [
                    "fatal",
                    "error",
                    "warn",
                    "info",
                    "verbose"
                  ]
                },
                "logFile": {
                  "description": "Configures where on disk logs are written.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "stdio": {
                  "description": "Configures whether logs are also returned to the debug console.",
                  "type": "boolean"
                },
                "tags": {
                  "description": "Configures what types of logs are recorded.",
                  "items": {
                    "enum": [
                      "cdp",
                      "dap",
                      "runtime"
                    ]
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "url": {
          "default": "http://localhost:8080",
          "description": "Will search for a tab with this exact url and attach to it, if found",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "urlFilter": {
          "default": "",
          "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "vueComponentPaths": {
          "default": [
            "${workspaceFolder}/**/*.vue"
          ],
          "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
          "type": "array",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "webRoot": {
          "default": "${workspaceFolder}",
          "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "type": {
          "enum": [
            "pwa-chrome"
          ],
          "description": "Type of configuration.",
          "pattern": "^(?!node2)",
          "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
          "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
        },
        "request": {
          "enum": [
            "attach"
          ],
          "description": "Request type of configuration. Can be \"launch\" or \"attach\".",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "name": {
          "$ref": "#/definitions/common/properties/name",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "debugServer": {
          "$ref": "#/definitions/common/properties/debugServer",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "preLaunchTask": {
          "$ref": "#/definitions/common/properties/preLaunchTask",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "postDebugTask": {
          "$ref": "#/definitions/common/properties/postDebugTask",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "presentation": {
          "$ref": "#/definitions/common/properties/presentation",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "internalConsoleOptions": {
          "$ref": "#/definitions/common/properties/internalConsoleOptions",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        }
      },
      "required": [
        "name",
        "type",
        "request",
        "name",
        "type",
        "request",
        "name",
        "type",
        "request"
      ],
      "type": "object"
    },
    "pwa-chrome:launch": {
      "properties": {
        "browserLaunchLocation": {
          "default": null,
          "description": "Forces the browser to be launched in one location. In a remote workspace (through ssh or WSL, for example) this can be used to open the browser on the remote machine rather than locally.",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "enum": [
                "ui",
                "workspace"
              ],
              "type": "string"
            }
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "cascadeTerminateToConfigurations": {
          "default": [],
          "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
          "items": {
            "type": "string",
            "uniqueItems": true
          },
          "type": "array",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "cleanUp": {
          "default": "wholeBrowser",
          "description": "What clean-up to do after the debugging session finishes. Close only the tab being debug, vs. close the whole browser.",
          "enum": [
            "wholeBrowser",
            "onlyTab"
          ],
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "customDescriptionGenerator": {
          "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "customPropertiesGenerator": {
          "deprecated": true,
          "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "cwd": {
          "default": null,
          "description": "Optional working directory for the runtime executable.",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "disableNetworkCache": {
          "default": true,
          "description": "Controls whether to skip the network cache for each request",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "enableContentValidation": {
          "default": true,
          "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "env": {
          "default": {},
          "description": "Optional dictionary of environment key/value pairs for the browser.",
          "type": "object",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "file": {
          "default": "${workspaceFolder}/index.html",
          "description": "A local html file to open in the browser",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "includeDefaultArgs": {
          "default": true,
          "description": "Whether default browser launch arguments (to disable features that may make debugging harder) will be included in the launch.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "inspectUri": {
          "default": null,
          "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `browserInspectUriPath` is the path part of the inspector URI on the launched browser (e.g.: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\").\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
          "type": [
            "string",
            "null"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "outFiles": {
          "default": [
            "${workspaceFolder}/**/*.js",
            "!**/node_modules/**"
          ],
          "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
          "items": {
            "type": "string"
          },
          "type": [
            "array"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "outputCapture": {
          "default": "console",
          "enum": [
            "console",
            "std"
          ],
          "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "pathMapping": {
          "default": {},
          "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
          "type": "object",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "pauseForSourceMap": {
          "default": false,
          "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "perScriptSourcemaps": {
          "default": "auto",
          "description": "Whether scripts are loaded individually with unique sourcemaps containing the basename of the source file. This can be set to optimize sourcemap handling when dealing with lots of small scripts. If set to \"auto\", we'll detect known cases where this is appropriate.",
          "enum": [
            "yes",
            "no",
            "auto"
          ],
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "port": {
          "default": 0,
          "description": "Port for the browser to listen on. Defaults to \"0\", which will cause the browser to be debugged via pipes, which is generally more secure and should be chosen unless you need to attach to the browser from another tool.",
          "type": "number",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "profileStartup": {
          "default": true,
          "description": "If true, will start profiling soon as the process launches",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "resolveSourceMapLocations": {
          "default": null,
          "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
          "items": {
            "type": "string"
          },
          "type": [
            "array",
            "null"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "runtimeArgs": {
          "default": [],
          "description": "Optional arguments passed to the runtime executable.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "runtimeExecutable": {
          "default": "stable",
          "description": "Either 'canary', 'stable', 'custom' or path to the browser executable. Custom means a custom wrapper, custom build or CHROME_PATH environment variable.",
          "type": [
            "string",
            "null"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "server": {
          "oneOf": [
            {
              "additionalProperties": false,
              "default": {
                "program": "node my-server.js"
              },
              "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
              "properties": {
                "args": {
                  "default": [],
                  "description": "Command line arguments passed to the program.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "attachSimplePort": {
                  "default": 9229,
                  "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                  "type": "integer"
                },
                "autoAttachChildProcesses": {
                  "default": true,
                  "description": "Attach debugger to new child processes automatically.",
                  "type": "boolean"
                },
                "cascadeTerminateToConfigurations": {
                  "default": [],
                  "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                  "items": {
                    "type": "string",
                    "uniqueItems": true
                  },
                  "type": "array"
                },
                "console": {
                  "default": "internalConsole",
                  "description": "Where to launch the debug target.",
                  "enum": [
                    "internalConsole",
                    "integratedTerminal",
                    "externalTerminal"
                  ],
                  "enumDescriptions": [
                    "VS Code Debug Console (which doesn't support to read input from a program)",
                    "VS Code's integrated terminal",
                    "External terminal that can be configured via user settings"
                  ],
                  "type": "string"
                },
                "customDescriptionGenerator": {
                  "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                  "type": "string"
                },
                "customPropertiesGenerator": {
                  "deprecated": true,
                  "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                  "type": "string"
                },
                "cwd": {
                  "default": "${workspaceFolder}",
                  "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                  "type": "string"
                },
                "enableContentValidation": {
                  "default": true,
                  "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                  "type": "boolean"
                },
                "env": {
                  "additionalProperties": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "default": {},
                  "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                  "type": "object"
                },
                "envFile": {
                  "default": "${workspaceFolder}/.env",
                  "description": "Absolute path to a file containing environment variable definitions.",
                  "type": "string"
                },
                "killBehavior": {
                  "default": "forceful",
                  "enum": [
                    "forceful",
                    "polite",
                    "none"
                  ],
                  "markdownDescription": "Configures how debug processes are killed when stopping the session. Can be:\n\n- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.\n- polite: gracefully tears down the process tree. It's possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.\n- none: no termination will happen.",
                  "type": "string"
                },
                "localRoot": {
                  "default": null,
                  "description": "Path to the local directory containing the program.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "nodeVersionHint": {
                  "default": 12,
                  "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                  "minimum": 8,
                  "type": "number"
                },
                "outFiles": {
                  "default": [
                    "${workspaceFolder}/**/*.js",
                    "!**/node_modules/**"
                  ],
                  "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                  "items": {
                    "type": "string"
                  },
                  "type": [
                    "array"
                  ]
                },
                "outputCapture": {
                  "default": "console",
                  "enum": [
                    "console",
                    "std"
                  ],
                  "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                },
                "pauseForSourceMap": {
                  "default": false,
                  "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                  "type": "boolean"
                },
                "profileStartup": {
                  "default": true,
                  "description": "If true, will start profiling as soon as the process launches",
                  "type": "boolean"
                },
                "program": {
                  "default": "",
                  "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                  "type": "string"
                },
                "remoteRoot": {
                  "default": null,
                  "description": "Absolute path to the remote directory containing the program.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "resolveSourceMapLocations": {
                  "default": [
                    "${workspaceFolder}/**",
                    "!**/node_modules/**"
                  ],
                  "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                  "items": {
                    "type": "string"
                  },
                  "type": [
                    "array",
                    "null"
                  ]
                },
                "restart": {
                  "default": true,
                  "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                  "oneOf": [
                    {
                      "type": "boolean"
                    },
                    {
                      "properties": {
                        "delay": {
                          "default": 1000,
                          "minimum": 0,
                          "type": "number"
                        },
                        "maxAttempts": {
                          "default": 10,
                          "minimum": 0,
                          "type": "number"
                        }
                      },
                      "type": "object"
                    }
                  ]
                },
                "runtimeArgs": {
                  "default": [],
                  "description": "Optional arguments passed to the runtime executable.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "runtimeExecutable": {
                  "default": "node",
                  "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "runtimeSourcemapPausePatterns": {
                  "default": [],
                  "items": {
                    "type": "string"
                  },
                  "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                  "type": "array"
                },
                "runtimeVersion": {
                  "default": "default",
                  "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                  "type": "string"
                },
                "showAsyncStacks": {
                  "default": true,
                  "description": "Show the async calls that led to the current call stack.",
                  "oneOf": [
                    {
                      "type": "boolean"
                    },
                    {
                      "properties": {
                        "onAttach": {
                          "default": 32,
                          "type": "number"
                        }
                      },
                      "required": [
                        "onAttach"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "onceBreakpointResolved": {
                          "default": 32,
                          "type": "number"
                        }
                      },
                      "required": [
                        "onceBreakpointResolved"
                      ],
                      "type": "object"
                    }
                  ]
                },
                "skipFiles": {
                  "default": [
                    "<node_internals>/**"
                  ],
                  "description": "An array of file or folder names, or path globs, to skip when debugging.",
                  "type": "array"
                },
                "smartStep": {
                  "default": true,
                  "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                  "type": "boolean"
                },
                "sourceMapPathOverrides": {
                  "default": {
                    "meteor://💻app/*": "${workspaceFolder}/*",
                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                    "webpack://?:*/*": "${workspaceFolder}/*"
                  },
                  "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                  "type": "object"
                },
                "sourceMapRenames": {
                  "default": true,
                  "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                  "type": "boolean"
                },
                "sourceMaps": {
                  "default": true,
                  "description": "Use JavaScript source maps (if they exist).",
                  "type": "boolean"
                },
                "stopOnEntry": {
                  "default": true,
                  "description": "Automatically stop program after launch.",
                  "type": [
                    "boolean",
                    "string"
                  ]
                },
                "timeout": {
                  "default": 10000,
                  "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                  "type": "number"
                },
                "timeouts": {
                  "additionalProperties": false,
                  "default": {},
                  "description": "Timeouts for several debugger operations.",
                  "markdownDescription": "Timeouts for several debugger operations.",
                  "properties": {
                    "sourceMapCumulativePause": {
                      "default": 1000,
                      "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                      "type": "number"
                    },
                    "sourceMapMinPause": {
                      "default": 1000,
                      "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                      "type": "number"
                    }
                  },
                  "type": "object"
                },
                "trace": {
                  "default": true,
                  "description": "Configures what diagnostic output is produced.",
                  "oneOf": [
                    {
                      "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                      "type": "boolean"
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "console": {
                          "description": "Whether to return trace data from the launched application or browser.",
                          "type": "boolean"
                        },
                        "level": {
                          "description": "Configures the level of logs recorded.",
                          "enum": [
                            "fatal",
                            "error",
                            "warn",
                            "info",
                            "verbose"
                          ]
                        },
                        "logFile": {
                          "description": "Configures where on disk logs are written.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "stdio": {
                          "description": "Configures whether logs are also returned to the debug console.",
                          "type": "boolean"
                        },
                        "tags": {
                          "description": "Configures what types of logs are recorded.",
                          "items": {
                            "enum": [
                              "cdp",
                              "dap",
                              "runtime"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              },
              "type": "object"
            },
            {
              "additionalProperties": false,
              "default": {
                "program": "npm start"
              },
              "description": "JavaScript Debug Terminal",
              "properties": {
                "autoAttachChildProcesses": {
                  "default": true,
                  "description": "Attach debugger to new child processes automatically.",
                  "type": "boolean"
                },
                "cascadeTerminateToConfigurations": {
                  "default": [],
                  "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                  "items": {
                    "type": "string",
                    "uniqueItems": true
                  },
                  "type": "array"
                },
                "command": {
                  "default": "npm start",
                  "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "customDescriptionGenerator": {
                  "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                  "type": "string"
                },
                "customPropertiesGenerator": {
                  "deprecated": true,
                  "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                  "type": "string"
                },
                "cwd": {
                  "default": "${workspaceFolder}",
                  "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                  "docDefault": "localRoot || ${workspaceFolder}",
                  "type": "string"
                },
                "enableContentValidation": {
                  "default": true,
                  "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                  "type": "boolean"
                },
                "env": {
                  "additionalProperties": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "default": {},
                  "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                  "type": "object"
                },
                "envFile": {
                  "default": "${workspaceFolder}/.env",
                  "description": "Absolute path to a file containing environment variable definitions.",
                  "type": "string"
                },
                "localRoot": {
                  "default": null,
                  "description": "Path to the local directory containing the program.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "nodeVersionHint": {
                  "default": 12,
                  "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                  "minimum": 8,
                  "type": "number"
                },
                "outFiles": {
                  "default": [
                    "${workspaceFolder}/**/*.js",
                    "!**/node_modules/**"
                  ],
                  "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                  "items": {
                    "type": "string"
                  },
                  "type": [
                    "array"
                  ]
                },
                "outputCapture": {
                  "default": "console",
                  "enum": [
                    "console",
                    "std"
                  ],
                  "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                },
                "pauseForSourceMap": {
                  "default": false,
                  "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                  "type": "boolean"
                },
                "remoteRoot": {
                  "default": null,
                  "description": "Absolute path to the remote directory containing the program.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "resolveSourceMapLocations": {
                  "default": [
                    "${workspaceFolder}/**",
                    "!**/node_modules/**"
                  ],
                  "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                  "items": {
                    "type": "string"
                  },
                  "type": [
                    "array",
                    "null"
                  ]
                },
                "runtimeSourcemapPausePatterns": {
                  "default": [],
                  "items": {
                    "type": "string"
                  },
                  "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                  "type": "array"
                },
                "showAsyncStacks": {
                  "default": true,
                  "description": "Show the async calls that led to the current call stack.",
                  "oneOf": [
                    {
                      "type": "boolean"
                    },
                    {
                      "properties": {
                        "onAttach": {
                          "default": 32,
                          "type": "number"
                        }
                      },
                      "required": [
                        "onAttach"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "onceBreakpointResolved": {
                          "default": 32,
                          "type": "number"
                        }
                      },
                      "required": [
                        "onceBreakpointResolved"
                      ],
                      "type": "object"
                    }
                  ]
                },
                "skipFiles": {
                  "default": [
                    "<node_internals>/**"
                  ],
                  "description": "An array of file or folder names, or path globs, to skip when debugging.",
                  "type": "array"
                },
                "smartStep": {
                  "default": true,
                  "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                  "type": "boolean"
                },
                "sourceMapPathOverrides": {
                  "default": {
                    "meteor://💻app/*": "${workspaceFolder}/*",
                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                    "webpack://?:*/*": "${workspaceFolder}/*"
                  },
                  "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                  "type": "object"
                },
                "sourceMapRenames": {
                  "default": true,
                  "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                  "type": "boolean"
                },
                "sourceMaps": {
                  "default": true,
                  "description": "Use JavaScript source maps (if they exist).",
                  "type": "boolean"
                },
                "timeout": {
                  "default": 10000,
                  "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                  "type": "number"
                },
                "timeouts": {
                  "additionalProperties": false,
                  "default": {},
                  "description": "Timeouts for several debugger operations.",
                  "markdownDescription": "Timeouts for several debugger operations.",
                  "properties": {
                    "sourceMapCumulativePause": {
                      "default": 1000,
                      "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                      "type": "number"
                    },
                    "sourceMapMinPause": {
                      "default": 1000,
                      "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                      "type": "number"
                    }
                  },
                  "type": "object"
                },
                "trace": {
                  "default": true,
                  "description": "Configures what diagnostic output is produced.",
                  "oneOf": [
                    {
                      "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                      "type": "boolean"
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "console": {
                          "description": "Whether to return trace data from the launched application or browser.",
                          "type": "boolean"
                        },
                        "level": {
                          "description": "Configures the level of logs recorded.",
                          "enum": [
                            "fatal",
                            "error",
                            "warn",
                            "info",
                            "verbose"
                          ]
                        },
                        "logFile": {
                          "description": "Configures where on disk logs are written.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "stdio": {
                          "description": "Configures whether logs are also returned to the debug console.",
                          "type": "boolean"
                        },
                        "tags": {
                          "description": "Configures what types of logs are recorded.",
                          "items": {
                            "enum": [
                              "cdp",
                              "dap",
                              "runtime"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              },
              "type": "object"
            }
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "showAsyncStacks": {
          "default": true,
          "description": "Show the async calls that led to the current call stack.",
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "properties": {
                "onAttach": {
                  "default": 32,
                  "type": "number"
                }
              },
              "required": [
                "onAttach"
              ],
              "type": "object"
            },
            {
              "properties": {
                "onceBreakpointResolved": {
                  "default": 32,
                  "type": "number"
                }
              },
              "required": [
                "onceBreakpointResolved"
              ],
              "type": "object"
            }
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "skipFiles": {
          "default": [
            "<node_internals>/**"
          ],
          "description": "An array of file or folder names, or path globs, to skip when debugging.",
          "type": "array",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "smartStep": {
          "default": true,
          "description": "Automatically step through generated code that cannot be mapped back to the original source.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "sourceMapPathOverrides": {
          "default": {
            "meteor://💻app/*": "${workspaceFolder}/*",
            "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
            "webpack://?:*/*": "${workspaceFolder}/*"
          },
          "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
          "type": "object",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "sourceMapRenames": {
          "default": true,
          "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "sourceMaps": {
          "default": true,
          "description": "Use JavaScript source maps (if they exist).",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "timeout": {
          "default": 10000,
          "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
          "type": "number",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "timeouts": {
          "additionalProperties": false,
          "default": {},
          "description": "Timeouts for several debugger operations.",
          "markdownDescription": "Timeouts for several debugger operations.",
          "properties": {
            "sourceMapCumulativePause": {
              "default": 1000,
              "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
              "type": "number"
            },
            "sourceMapMinPause": {
              "default": 1000,
              "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
              "type": "number"
            }
          },
          "type": "object",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "trace": {
          "default": true,
          "description": "Configures what diagnostic output is produced.",
          "oneOf": [
            {
              "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
              "type": "boolean"
            },
            {
              "additionalProperties": false,
              "properties": {
                "console": {
                  "description": "Whether to return trace data from the launched application or browser.",
                  "type": "boolean"
                },
                "level": {
                  "description": "Configures the level of logs recorded.",
                  "enum": [
                    "fatal",
                    "error",
                    "warn",
                    "info",
                    "verbose"
                  ]
                },
                "logFile": {
                  "description": "Configures where on disk logs are written.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "stdio": {
                  "description": "Configures whether logs are also returned to the debug console.",
                  "type": "boolean"
                },
                "tags": {
                  "description": "Configures what types of logs are recorded.",
                  "items": {
                    "enum": [
                      "cdp",
                      "dap",
                      "runtime"
                    ]
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "url": {
          "default": "http://localhost:8080",
          "description": "Will search for a tab with this exact url and attach to it, if found",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "urlFilter": {
          "default": "",
          "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "userDataDir": {
          "default": true,
          "description": "By default, the browser is launched with a separate user profile in a temp folder. Use this option to override it. Set to false to launch with your default user profile. A new browser can't be launched if an instance is already running from `userDataDir`.",
          "type": [
            "string",
            "boolean"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "vueComponentPaths": {
          "default": [
            "${workspaceFolder}/**/*.vue"
          ],
          "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
          "type": "array",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "webRoot": {
          "default": "${workspaceFolder}",
          "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "serverReadyAction": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": false,
              "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
              "default": {
                "action": "openExternally"
              },
              "properties": {
                "action": {
                  "type": "string",
                  "enum": [
                    "openExternally"
                  ],
                  "enumDescriptions": [
                    "Open URI externally with the default application."
                  ],
                  "markdownDescription": "What to do with the URI when the server is ready.",
                  "default": "openExternally"
                },
                "pattern": {
                  "type": "string",
                  "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                  "default": "listening on port ([0-9]+)"
                },
                "uriFormat": {
                  "type": "string",
                  "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                  "default": "http://localhost:%s"
                }
              }
            },
            {
              "type": "object",
              "additionalProperties": false,
              "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
              "default": {
                "action": "debugWithEdge",
                "pattern": "listening on port ([0-9]+)",
                "uriFormat": "http://localhost:%s",
                "webRoot": "${workspaceFolder}"
              },
              "properties": {
                "action": {
                  "type": "string",
                  "enum": [
                    "debugWithChrome",
                    "debugWithEdge"
                  ],
                  "enumDescriptions": [
                    "Start debugging with the 'Debugger for Chrome'."
                  ],
                  "markdownDescription": "What to do with the URI when the server is ready.",
                  "default": "debugWithEdge"
                },
                "pattern": {
                  "type": "string",
                  "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                  "default": "listening on port ([0-9]+)"
                },
                "uriFormat": {
                  "type": "string",
                  "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                  "default": "http://localhost:%s"
                },
                "webRoot": {
                  "type": "string",
                  "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                  "default": "${workspaceFolder}"
                }
              }
            },
            {
              "type": "object",
              "additionalProperties": false,
              "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
              "default": {
                "action": "startDebugging",
                "name": "<launch browser config name>"
              },
              "required": [
                "name"
              ],
              "properties": {
                "action": {
                  "type": "string",
                  "enum": [
                    "startDebugging"
                  ],
                  "enumDescriptions": [
                    "Run another launch configuration."
                  ],
                  "markdownDescription": "What to do with the URI when the server is ready.",
                  "default": "startDebugging"
                },
                "pattern": {
                  "type": "string",
                  "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                  "default": "listening on port ([0-9]+)"
                },
                "name": {
                  "type": "string",
                  "markdownDescription": "Name of the launch configuration to run.",
                  "default": "Launch Browser"
                }
              }
            }
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "type": {
          "enum": [
            "pwa-chrome"
          ],
          "description": "Type of configuration.",
          "pattern": "^(?!node2)",
          "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
          "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
        },
        "request": {
          "enum": [
            "launch"
          ],
          "description": "Request type of configuration. Can be \"launch\" or \"attach\".",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "name": {
          "$ref": "#/definitions/common/properties/name",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "debugServer": {
          "$ref": "#/definitions/common/properties/debugServer",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "preLaunchTask": {
          "$ref": "#/definitions/common/properties/preLaunchTask",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "postDebugTask": {
          "$ref": "#/definitions/common/properties/postDebugTask",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "presentation": {
          "$ref": "#/definitions/common/properties/presentation",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "internalConsoleOptions": {
          "$ref": "#/definitions/common/properties/internalConsoleOptions",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        }
      },
      "required": [
        "name",
        "type",
        "request",
        "name",
        "type",
        "request",
        "name",
        "type",
        "request"
      ],
      "type": "object"
    },
    "chrome:attach": {
      "properties": {
        "address": {
          "default": "localhost",
          "description": "IP address or hostname the debugged browser is listening on.",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "browserAttachLocation": {
          "default": null,
          "description": "Forces the browser to attach in one location. In a remote workspace (through ssh or WSL, for example) this can be used to attach to a browser on the remote machine rather than locally.",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "enum": [
                "ui",
                "workspace"
              ],
              "type": "string"
            }
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "cascadeTerminateToConfigurations": {
          "default": [],
          "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
          "items": {
            "type": "string",
            "uniqueItems": true
          },
          "type": "array",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "customDescriptionGenerator": {
          "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "customPropertiesGenerator": {
          "deprecated": true,
          "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "disableNetworkCache": {
          "default": true,
          "description": "Controls whether to skip the network cache for each request",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "enableContentValidation": {
          "default": true,
          "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "inspectUri": {
          "default": null,
          "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `browserInspectUriPath` is the path part of the inspector URI on the launched browser (e.g.: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\").\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
          "type": [
            "string",
            "null"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "outFiles": {
          "default": [
            "${workspaceFolder}/**/*.js",
            "!**/node_modules/**"
          ],
          "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
          "items": {
            "type": "string"
          },
          "type": [
            "array"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "outputCapture": {
          "default": "console",
          "enum": [
            "console",
            "std"
          ],
          "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "pathMapping": {
          "default": {},
          "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
          "type": "object",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "pauseForSourceMap": {
          "default": false,
          "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "perScriptSourcemaps": {
          "default": "auto",
          "description": "Whether scripts are loaded individually with unique sourcemaps containing the basename of the source file. This can be set to optimize sourcemap handling when dealing with lots of small scripts. If set to \"auto\", we'll detect known cases where this is appropriate.",
          "enum": [
            "yes",
            "no",
            "auto"
          ],
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "port": {
          "default": 9229,
          "description": "Port to use to remote debugging the browser, given as `--remote-debugging-port` when launching the browser.",
          "type": "number",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "resolveSourceMapLocations": {
          "default": null,
          "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
          "items": {
            "type": "string"
          },
          "type": [
            "array",
            "null"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "restart": {
          "default": false,
          "markdownDescription": "Whether to reconnect if the browser connection is closed",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "server": {
          "oneOf": [
            {
              "additionalProperties": false,
              "default": {
                "program": "node my-server.js"
              },
              "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
              "properties": {
                "args": {
                  "default": [],
                  "description": "Command line arguments passed to the program.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "attachSimplePort": {
                  "default": 9229,
                  "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                  "type": "integer"
                },
                "autoAttachChildProcesses": {
                  "default": true,
                  "description": "Attach debugger to new child processes automatically.",
                  "type": "boolean"
                },
                "cascadeTerminateToConfigurations": {
                  "default": [],
                  "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                  "items": {
                    "type": "string",
                    "uniqueItems": true
                  },
                  "type": "array"
                },
                "console": {
                  "default": "internalConsole",
                  "description": "Where to launch the debug target.",
                  "enum": [
                    "internalConsole",
                    "integratedTerminal",
                    "externalTerminal"
                  ],
                  "enumDescriptions": [
                    "VS Code Debug Console (which doesn't support to read input from a program)",
                    "VS Code's integrated terminal",
                    "External terminal that can be configured via user settings"
                  ],
                  "type": "string"
                },
                "customDescriptionGenerator": {
                  "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                  "type": "string"
                },
                "customPropertiesGenerator": {
                  "deprecated": true,
                  "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                  "type": "string"
                },
                "cwd": {
                  "default": "${workspaceFolder}",
                  "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                  "type": "string"
                },
                "enableContentValidation": {
                  "default": true,
                  "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                  "type": "boolean"
                },
                "env": {
                  "additionalProperties": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "default": {},
                  "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                  "type": "object"
                },
                "envFile": {
                  "default": "${workspaceFolder}/.env",
                  "description": "Absolute path to a file containing environment variable definitions.",
                  "type": "string"
                },
                "killBehavior": {
                  "default": "forceful",
                  "enum": [
                    "forceful",
                    "polite",
                    "none"
                  ],
                  "markdownDescription": "Configures how debug processes are killed when stopping the session. Can be:\n\n- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.\n- polite: gracefully tears down the process tree. It's possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.\n- none: no termination will happen.",
                  "type": "string"
                },
                "localRoot": {
                  "default": null,
                  "description": "Path to the local directory containing the program.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "nodeVersionHint": {
                  "default": 12,
                  "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                  "minimum": 8,
                  "type": "number"
                },
                "outFiles": {
                  "default": [
                    "${workspaceFolder}/**/*.js",
                    "!**/node_modules/**"
                  ],
                  "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                  "items": {
                    "type": "string"
                  },
                  "type": [
                    "array"
                  ]
                },
                "outputCapture": {
                  "default": "console",
                  "enum": [
                    "console",
                    "std"
                  ],
                  "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                },
                "pauseForSourceMap": {
                  "default": false,
                  "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                  "type": "boolean"
                },
                "profileStartup": {
                  "default": true,
                  "description": "If true, will start profiling as soon as the process launches",
                  "type": "boolean"
                },
                "program": {
                  "default": "",
                  "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                  "type": "string"
                },
                "remoteRoot": {
                  "default": null,
                  "description": "Absolute path to the remote directory containing the program.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "resolveSourceMapLocations": {
                  "default": [
                    "${workspaceFolder}/**",
                    "!**/node_modules/**"
                  ],
                  "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                  "items": {
                    "type": "string"
                  },
                  "type": [
                    "array",
                    "null"
                  ]
                },
                "restart": {
                  "default": true,
                  "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                  "oneOf": [
                    {
                      "type": "boolean"
                    },
                    {
                      "properties": {
                        "delay": {
                          "default": 1000,
                          "minimum": 0,
                          "type": "number"
                        },
                        "maxAttempts": {
                          "default": 10,
                          "minimum": 0,
                          "type": "number"
                        }
                      },
                      "type": "object"
                    }
                  ]
                },
                "runtimeArgs": {
                  "default": [],
                  "description": "Optional arguments passed to the runtime executable.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "runtimeExecutable": {
                  "default": "node",
                  "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "runtimeSourcemapPausePatterns": {
                  "default": [],
                  "items": {
                    "type": "string"
                  },
                  "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                  "type": "array"
                },
                "runtimeVersion": {
                  "default": "default",
                  "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                  "type": "string"
                },
                "showAsyncStacks": {
                  "default": true,
                  "description": "Show the async calls that led to the current call stack.",
                  "oneOf": [
                    {
                      "type": "boolean"
                    },
                    {
                      "properties": {
                        "onAttach": {
                          "default": 32,
                          "type": "number"
                        }
                      },
                      "required": [
                        "onAttach"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "onceBreakpointResolved": {
                          "default": 32,
                          "type": "number"
                        }
                      },
                      "required": [
                        "onceBreakpointResolved"
                      ],
                      "type": "object"
                    }
                  ]
                },
                "skipFiles": {
                  "default": [
                    "<node_internals>/**"
                  ],
                  "description": "An array of file or folder names, or path globs, to skip when debugging.",
                  "type": "array"
                },
                "smartStep": {
                  "default": true,
                  "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                  "type": "boolean"
                },
                "sourceMapPathOverrides": {
                  "default": {
                    "meteor://💻app/*": "${workspaceFolder}/*",
                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                    "webpack://?:*/*": "${workspaceFolder}/*"
                  },
                  "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                  "type": "object"
                },
                "sourceMapRenames": {
                  "default": true,
                  "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                  "type": "boolean"
                },
                "sourceMaps": {
                  "default": true,
                  "description": "Use JavaScript source maps (if they exist).",
                  "type": "boolean"
                },
                "stopOnEntry": {
                  "default": true,
                  "description": "Automatically stop program after launch.",
                  "type": [
                    "boolean",
                    "string"
                  ]
                },
                "timeout": {
                  "default": 10000,
                  "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                  "type": "number"
                },
                "timeouts": {
                  "additionalProperties": false,
                  "default": {},
                  "description": "Timeouts for several debugger operations.",
                  "markdownDescription": "Timeouts for several debugger operations.",
                  "properties": {
                    "sourceMapCumulativePause": {
                      "default": 1000,
                      "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                      "type": "number"
                    },
                    "sourceMapMinPause": {
                      "default": 1000,
                      "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                      "type": "number"
                    }
                  },
                  "type": "object"
                },
                "trace": {
                  "default": true,
                  "description": "Configures what diagnostic output is produced.",
                  "oneOf": [
                    {
                      "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                      "type": "boolean"
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "console": {
                          "description": "Whether to return trace data from the launched application or browser.",
                          "type": "boolean"
                        },
                        "level": {
                          "description": "Configures the level of logs recorded.",
                          "enum": [
                            "fatal",
                            "error",
                            "warn",
                            "info",
                            "verbose"
                          ]
                        },
                        "logFile": {
                          "description": "Configures where on disk logs are written.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "stdio": {
                          "description": "Configures whether logs are also returned to the debug console.",
                          "type": "boolean"
                        },
                        "tags": {
                          "description": "Configures what types of logs are recorded.",
                          "items": {
                            "enum": [
                              "cdp",
                              "dap",
                              "runtime"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              },
              "type": "object"
            },
            {
              "additionalProperties": false,
              "default": {
                "program": "npm start"
              },
              "description": "JavaScript Debug Terminal",
              "properties": {
                "autoAttachChildProcesses": {
                  "default": true,
                  "description": "Attach debugger to new child processes automatically.",
                  "type": "boolean"
                },
                "cascadeTerminateToConfigurations": {
                  "default": [],
                  "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                  "items": {
                    "type": "string",
                    "uniqueItems": true
                  },
                  "type": "array"
                },
                "command": {
                  "default": "npm start",
                  "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "customDescriptionGenerator": {
                  "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                  "type": "string"
                },
                "customPropertiesGenerator": {
                  "deprecated": true,
                  "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                  "type": "string"
                },
                "cwd": {
                  "default": "${workspaceFolder}",
                  "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                  "docDefault": "localRoot || ${workspaceFolder}",
                  "type": "string"
                },
                "enableContentValidation": {
                  "default": true,
                  "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                  "type": "boolean"
                },
                "env": {
                  "additionalProperties": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "default": {},
                  "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                  "type": "object"
                },
                "envFile": {
                  "default": "${workspaceFolder}/.env",
                  "description": "Absolute path to a file containing environment variable definitions.",
                  "type": "string"
                },
                "localRoot": {
                  "default": null,
                  "description": "Path to the local directory containing the program.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "nodeVersionHint": {
                  "default": 12,
                  "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                  "minimum": 8,
                  "type": "number"
                },
                "outFiles": {
                  "default": [
                    "${workspaceFolder}/**/*.js",
                    "!**/node_modules/**"
                  ],
                  "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                  "items": {
                    "type": "string"
                  },
                  "type": [
                    "array"
                  ]
                },
                "outputCapture": {
                  "default": "console",
                  "enum": [
                    "console",
                    "std"
                  ],
                  "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                },
                "pauseForSourceMap": {
                  "default": false,
                  "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                  "type": "boolean"
                },
                "remoteRoot": {
                  "default": null,
                  "description": "Absolute path to the remote directory containing the program.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "resolveSourceMapLocations": {
                  "default": [
                    "${workspaceFolder}/**",
                    "!**/node_modules/**"
                  ],
                  "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                  "items": {
                    "type": "string"
                  },
                  "type": [
                    "array",
                    "null"
                  ]
                },
                "runtimeSourcemapPausePatterns": {
                  "default": [],
                  "items": {
                    "type": "string"
                  },
                  "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                  "type": "array"
                },
                "showAsyncStacks": {
                  "default": true,
                  "description": "Show the async calls that led to the current call stack.",
                  "oneOf": [
                    {
                      "type": "boolean"
                    },
                    {
                      "properties": {
                        "onAttach": {
                          "default": 32,
                          "type": "number"
                        }
                      },
                      "required": [
                        "onAttach"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "onceBreakpointResolved": {
                          "default": 32,
                          "type": "number"
                        }
                      },
                      "required": [
                        "onceBreakpointResolved"
                      ],
                      "type": "object"
                    }
                  ]
                },
                "skipFiles": {
                  "default": [
                    "<node_internals>/**"
                  ],
                  "description": "An array of file or folder names, or path globs, to skip when debugging.",
                  "type": "array"
                },
                "smartStep": {
                  "default": true,
                  "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                  "type": "boolean"
                },
                "sourceMapPathOverrides": {
                  "default": {
                    "meteor://💻app/*": "${workspaceFolder}/*",
                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                    "webpack://?:*/*": "${workspaceFolder}/*"
                  },
                  "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                  "type": "object"
                },
                "sourceMapRenames": {
                  "default": true,
                  "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                  "type": "boolean"
                },
                "sourceMaps": {
                  "default": true,
                  "description": "Use JavaScript source maps (if they exist).",
                  "type": "boolean"
                },
                "timeout": {
                  "default": 10000,
                  "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                  "type": "number"
                },
                "timeouts": {
                  "additionalProperties": false,
                  "default": {},
                  "description": "Timeouts for several debugger operations.",
                  "markdownDescription": "Timeouts for several debugger operations.",
                  "properties": {
                    "sourceMapCumulativePause": {
                      "default": 1000,
                      "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                      "type": "number"
                    },
                    "sourceMapMinPause": {
                      "default": 1000,
                      "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                      "type": "number"
                    }
                  },
                  "type": "object"
                },
                "trace": {
                  "default": true,
                  "description": "Configures what diagnostic output is produced.",
                  "oneOf": [
                    {
                      "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                      "type": "boolean"
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "console": {
                          "description": "Whether to return trace data from the launched application or browser.",
                          "type": "boolean"
                        },
                        "level": {
                          "description": "Configures the level of logs recorded.",
                          "enum": [
                            "fatal",
                            "error",
                            "warn",
                            "info",
                            "verbose"
                          ]
                        },
                        "logFile": {
                          "description": "Configures where on disk logs are written.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "stdio": {
                          "description": "Configures whether logs are also returned to the debug console.",
                          "type": "boolean"
                        },
                        "tags": {
                          "description": "Configures what types of logs are recorded.",
                          "items": {
                            "enum": [
                              "cdp",
                              "dap",
                              "runtime"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              },
              "type": "object"
            }
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "showAsyncStacks": {
          "default": true,
          "description": "Show the async calls that led to the current call stack.",
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "properties": {
                "onAttach": {
                  "default": 32,
                  "type": "number"
                }
              },
              "required": [
                "onAttach"
              ],
              "type": "object"
            },
            {
              "properties": {
                "onceBreakpointResolved": {
                  "default": 32,
                  "type": "number"
                }
              },
              "required": [
                "onceBreakpointResolved"
              ],
              "type": "object"
            }
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "skipFiles": {
          "default": [
            "<node_internals>/**"
          ],
          "description": "An array of file or folder names, or path globs, to skip when debugging.",
          "type": "array",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "smartStep": {
          "default": true,
          "description": "Automatically step through generated code that cannot be mapped back to the original source.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "sourceMapPathOverrides": {
          "default": {
            "meteor://💻app/*": "${workspaceFolder}/*",
            "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
            "webpack://?:*/*": "${workspaceFolder}/*"
          },
          "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
          "type": "object",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "sourceMapRenames": {
          "default": true,
          "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "sourceMaps": {
          "default": true,
          "description": "Use JavaScript source maps (if they exist).",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "targetSelection": {
          "default": "automatic",
          "enum": [
            "pick",
            "automatic"
          ],
          "markdownDescription": "Whether to attach to all targets that match the URL filter (\"automatic\") or ask to pick one (\"pick\").",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "timeout": {
          "default": 10000,
          "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
          "type": "number",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "timeouts": {
          "additionalProperties": false,
          "default": {},
          "description": "Timeouts for several debugger operations.",
          "markdownDescription": "Timeouts for several debugger operations.",
          "properties": {
            "sourceMapCumulativePause": {
              "default": 1000,
              "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
              "type": "number"
            },
            "sourceMapMinPause": {
              "default": 1000,
              "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
              "type": "number"
            }
          },
          "type": "object",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "trace": {
          "default": true,
          "description": "Configures what diagnostic output is produced.",
          "oneOf": [
            {
              "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
              "type": "boolean"
            },
            {
              "additionalProperties": false,
              "properties": {
                "console": {
                  "description": "Whether to return trace data from the launched application or browser.",
                  "type": "boolean"
                },
                "level": {
                  "description": "Configures the level of logs recorded.",
                  "enum": [
                    "fatal",
                    "error",
                    "warn",
                    "info",
                    "verbose"
                  ]
                },
                "logFile": {
                  "description": "Configures where on disk logs are written.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "stdio": {
                  "description": "Configures whether logs are also returned to the debug console.",
                  "type": "boolean"
                },
                "tags": {
                  "description": "Configures what types of logs are recorded.",
                  "items": {
                    "enum": [
                      "cdp",
                      "dap",
                      "runtime"
                    ]
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "url": {
          "default": "http://localhost:8080",
          "description": "Will search for a tab with this exact url and attach to it, if found",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "urlFilter": {
          "default": "",
          "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "vueComponentPaths": {
          "default": [
            "${workspaceFolder}/**/*.vue"
          ],
          "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
          "type": "array",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "webRoot": {
          "default": "${workspaceFolder}",
          "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "type": {
          "enum": [
            "chrome"
          ],
          "description": "Type of configuration.",
          "pattern": "^(?!node2)",
          "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
          "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
        },
        "request": {
          "enum": [
            "attach"
          ],
          "description": "Request type of configuration. Can be \"launch\" or \"attach\".",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "name": {
          "$ref": "#/definitions/common/properties/name",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "debugServer": {
          "$ref": "#/definitions/common/properties/debugServer",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "preLaunchTask": {
          "$ref": "#/definitions/common/properties/preLaunchTask",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "postDebugTask": {
          "$ref": "#/definitions/common/properties/postDebugTask",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "presentation": {
          "$ref": "#/definitions/common/properties/presentation",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "internalConsoleOptions": {
          "$ref": "#/definitions/common/properties/internalConsoleOptions",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        }
      },
      "required": [
        "name",
        "type",
        "request",
        "name",
        "type",
        "request",
        "name",
        "type",
        "request"
      ],
      "type": "object"
    },
    "chrome:launch": {
      "properties": {
        "browserLaunchLocation": {
          "default": null,
          "description": "Forces the browser to be launched in one location. In a remote workspace (through ssh or WSL, for example) this can be used to open the browser on the remote machine rather than locally.",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "enum": [
                "ui",
                "workspace"
              ],
              "type": "string"
            }
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "cascadeTerminateToConfigurations": {
          "default": [],
          "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
          "items": {
            "type": "string",
            "uniqueItems": true
          },
          "type": "array",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "cleanUp": {
          "default": "wholeBrowser",
          "description": "What clean-up to do after the debugging session finishes. Close only the tab being debug, vs. close the whole browser.",
          "enum": [
            "wholeBrowser",
            "onlyTab"
          ],
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "customDescriptionGenerator": {
          "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "customPropertiesGenerator": {
          "deprecated": true,
          "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "cwd": {
          "default": null,
          "description": "Optional working directory for the runtime executable.",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "disableNetworkCache": {
          "default": true,
          "description": "Controls whether to skip the network cache for each request",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "enableContentValidation": {
          "default": true,
          "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "env": {
          "default": {},
          "description": "Optional dictionary of environment key/value pairs for the browser.",
          "type": "object",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "file": {
          "default": "${workspaceFolder}/index.html",
          "description": "A local html file to open in the browser",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "includeDefaultArgs": {
          "default": true,
          "description": "Whether default browser launch arguments (to disable features that may make debugging harder) will be included in the launch.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "inspectUri": {
          "default": null,
          "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `browserInspectUriPath` is the path part of the inspector URI on the launched browser (e.g.: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\").\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
          "type": [
            "string",
            "null"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "outFiles": {
          "default": [
            "${workspaceFolder}/**/*.js",
            "!**/node_modules/**"
          ],
          "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
          "items": {
            "type": "string"
          },
          "type": [
            "array"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "outputCapture": {
          "default": "console",
          "enum": [
            "console",
            "std"
          ],
          "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "pathMapping": {
          "default": {},
          "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
          "type": "object",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "pauseForSourceMap": {
          "default": false,
          "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "perScriptSourcemaps": {
          "default": "auto",
          "description": "Whether scripts are loaded individually with unique sourcemaps containing the basename of the source file. This can be set to optimize sourcemap handling when dealing with lots of small scripts. If set to \"auto\", we'll detect known cases where this is appropriate.",
          "enum": [
            "yes",
            "no",
            "auto"
          ],
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "port": {
          "default": 0,
          "description": "Port for the browser to listen on. Defaults to \"0\", which will cause the browser to be debugged via pipes, which is generally more secure and should be chosen unless you need to attach to the browser from another tool.",
          "type": "number",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "profileStartup": {
          "default": true,
          "description": "If true, will start profiling soon as the process launches",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "resolveSourceMapLocations": {
          "default": null,
          "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
          "items": {
            "type": "string"
          },
          "type": [
            "array",
            "null"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "runtimeArgs": {
          "default": [],
          "description": "Optional arguments passed to the runtime executable.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "runtimeExecutable": {
          "default": "stable",
          "description": "Either 'canary', 'stable', 'custom' or path to the browser executable. Custom means a custom wrapper, custom build or CHROME_PATH environment variable.",
          "type": [
            "string",
            "null"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "server": {
          "oneOf": [
            {
              "additionalProperties": false,
              "default": {
                "program": "node my-server.js"
              },
              "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
              "properties": {
                "args": {
                  "default": [],
                  "description": "Command line arguments passed to the program.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "attachSimplePort": {
                  "default": 9229,
                  "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                  "type": "integer"
                },
                "autoAttachChildProcesses": {
                  "default": true,
                  "description": "Attach debugger to new child processes automatically.",
                  "type": "boolean"
                },
                "cascadeTerminateToConfigurations": {
                  "default": [],
                  "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                  "items": {
                    "type": "string",
                    "uniqueItems": true
                  },
                  "type": "array"
                },
                "console": {
                  "default": "internalConsole",
                  "description": "Where to launch the debug target.",
                  "enum": [
                    "internalConsole",
                    "integratedTerminal",
                    "externalTerminal"
                  ],
                  "enumDescriptions": [
                    "VS Code Debug Console (which doesn't support to read input from a program)",
                    "VS Code's integrated terminal",
                    "External terminal that can be configured via user settings"
                  ],
                  "type": "string"
                },
                "customDescriptionGenerator": {
                  "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                  "type": "string"
                },
                "customPropertiesGenerator": {
                  "deprecated": true,
                  "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                  "type": "string"
                },
                "cwd": {
                  "default": "${workspaceFolder}",
                  "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                  "type": "string"
                },
                "enableContentValidation": {
                  "default": true,
                  "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                  "type": "boolean"
                },
                "env": {
                  "additionalProperties": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "default": {},
                  "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                  "type": "object"
                },
                "envFile": {
                  "default": "${workspaceFolder}/.env",
                  "description": "Absolute path to a file containing environment variable definitions.",
                  "type": "string"
                },
                "killBehavior": {
                  "default": "forceful",
                  "enum": [
                    "forceful",
                    "polite",
                    "none"
                  ],
                  "markdownDescription": "Configures how debug processes are killed when stopping the session. Can be:\n\n- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.\n- polite: gracefully tears down the process tree. It's possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.\n- none: no termination will happen.",
                  "type": "string"
                },
                "localRoot": {
                  "default": null,
                  "description": "Path to the local directory containing the program.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "nodeVersionHint": {
                  "default": 12,
                  "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                  "minimum": 8,
                  "type": "number"
                },
                "outFiles": {
                  "default": [
                    "${workspaceFolder}/**/*.js",
                    "!**/node_modules/**"
                  ],
                  "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                  "items": {
                    "type": "string"
                  },
                  "type": [
                    "array"
                  ]
                },
                "outputCapture": {
                  "default": "console",
                  "enum": [
                    "console",
                    "std"
                  ],
                  "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                },
                "pauseForSourceMap": {
                  "default": false,
                  "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                  "type": "boolean"
                },
                "profileStartup": {
                  "default": true,
                  "description": "If true, will start profiling as soon as the process launches",
                  "type": "boolean"
                },
                "program": {
                  "default": "",
                  "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                  "type": "string"
                },
                "remoteRoot": {
                  "default": null,
                  "description": "Absolute path to the remote directory containing the program.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "resolveSourceMapLocations": {
                  "default": [
                    "${workspaceFolder}/**",
                    "!**/node_modules/**"
                  ],
                  "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                  "items": {
                    "type": "string"
                  },
                  "type": [
                    "array",
                    "null"
                  ]
                },
                "restart": {
                  "default": true,
                  "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                  "oneOf": [
                    {
                      "type": "boolean"
                    },
                    {
                      "properties": {
                        "delay": {
                          "default": 1000,
                          "minimum": 0,
                          "type": "number"
                        },
                        "maxAttempts": {
                          "default": 10,
                          "minimum": 0,
                          "type": "number"
                        }
                      },
                      "type": "object"
                    }
                  ]
                },
                "runtimeArgs": {
                  "default": [],
                  "description": "Optional arguments passed to the runtime executable.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "runtimeExecutable": {
                  "default": "node",
                  "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "runtimeSourcemapPausePatterns": {
                  "default": [],
                  "items": {
                    "type": "string"
                  },
                  "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                  "type": "array"
                },
                "runtimeVersion": {
                  "default": "default",
                  "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                  "type": "string"
                },
                "showAsyncStacks": {
                  "default": true,
                  "description": "Show the async calls that led to the current call stack.",
                  "oneOf": [
                    {
                      "type": "boolean"
                    },
                    {
                      "properties": {
                        "onAttach": {
                          "default": 32,
                          "type": "number"
                        }
                      },
                      "required": [
                        "onAttach"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "onceBreakpointResolved": {
                          "default": 32,
                          "type": "number"
                        }
                      },
                      "required": [
                        "onceBreakpointResolved"
                      ],
                      "type": "object"
                    }
                  ]
                },
                "skipFiles": {
                  "default": [
                    "<node_internals>/**"
                  ],
                  "description": "An array of file or folder names, or path globs, to skip when debugging.",
                  "type": "array"
                },
                "smartStep": {
                  "default": true,
                  "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                  "type": "boolean"
                },
                "sourceMapPathOverrides": {
                  "default": {
                    "meteor://💻app/*": "${workspaceFolder}/*",
                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                    "webpack://?:*/*": "${workspaceFolder}/*"
                  },
                  "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                  "type": "object"
                },
                "sourceMapRenames": {
                  "default": true,
                  "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                  "type": "boolean"
                },
                "sourceMaps": {
                  "default": true,
                  "description": "Use JavaScript source maps (if they exist).",
                  "type": "boolean"
                },
                "stopOnEntry": {
                  "default": true,
                  "description": "Automatically stop program after launch.",
                  "type": [
                    "boolean",
                    "string"
                  ]
                },
                "timeout": {
                  "default": 10000,
                  "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                  "type": "number"
                },
                "timeouts": {
                  "additionalProperties": false,
                  "default": {},
                  "description": "Timeouts for several debugger operations.",
                  "markdownDescription": "Timeouts for several debugger operations.",
                  "properties": {
                    "sourceMapCumulativePause": {
                      "default": 1000,
                      "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                      "type": "number"
                    },
                    "sourceMapMinPause": {
                      "default": 1000,
                      "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                      "type": "number"
                    }
                  },
                  "type": "object"
                },
                "trace": {
                  "default": true,
                  "description": "Configures what diagnostic output is produced.",
                  "oneOf": [
                    {
                      "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                      "type": "boolean"
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "console": {
                          "description": "Whether to return trace data from the launched application or browser.",
                          "type": "boolean"
                        },
                        "level": {
                          "description": "Configures the level of logs recorded.",
                          "enum": [
                            "fatal",
                            "error",
                            "warn",
                            "info",
                            "verbose"
                          ]
                        },
                        "logFile": {
                          "description": "Configures where on disk logs are written.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "stdio": {
                          "description": "Configures whether logs are also returned to the debug console.",
                          "type": "boolean"
                        },
                        "tags": {
                          "description": "Configures what types of logs are recorded.",
                          "items": {
                            "enum": [
                              "cdp",
                              "dap",
                              "runtime"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              },
              "type": "object"
            },
            {
              "additionalProperties": false,
              "default": {
                "program": "npm start"
              },
              "description": "JavaScript Debug Terminal",
              "properties": {
                "autoAttachChildProcesses": {
                  "default": true,
                  "description": "Attach debugger to new child processes automatically.",
                  "type": "boolean"
                },
                "cascadeTerminateToConfigurations": {
                  "default": [],
                  "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                  "items": {
                    "type": "string",
                    "uniqueItems": true
                  },
                  "type": "array"
                },
                "command": {
                  "default": "npm start",
                  "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "customDescriptionGenerator": {
                  "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                  "type": "string"
                },
                "customPropertiesGenerator": {
                  "deprecated": true,
                  "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                  "type": "string"
                },
                "cwd": {
                  "default": "${workspaceFolder}",
                  "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                  "docDefault": "localRoot || ${workspaceFolder}",
                  "type": "string"
                },
                "enableContentValidation": {
                  "default": true,
                  "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                  "type": "boolean"
                },
                "env": {
                  "additionalProperties": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "default": {},
                  "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                  "type": "object"
                },
                "envFile": {
                  "default": "${workspaceFolder}/.env",
                  "description": "Absolute path to a file containing environment variable definitions.",
                  "type": "string"
                },
                "localRoot": {
                  "default": null,
                  "description": "Path to the local directory containing the program.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "nodeVersionHint": {
                  "default": 12,
                  "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                  "minimum": 8,
                  "type": "number"
                },
                "outFiles": {
                  "default": [
                    "${workspaceFolder}/**/*.js",
                    "!**/node_modules/**"
                  ],
                  "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                  "items": {
                    "type": "string"
                  },
                  "type": [
                    "array"
                  ]
                },
                "outputCapture": {
                  "default": "console",
                  "enum": [
                    "console",
                    "std"
                  ],
                  "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                },
                "pauseForSourceMap": {
                  "default": false,
                  "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                  "type": "boolean"
                },
                "remoteRoot": {
                  "default": null,
                  "description": "Absolute path to the remote directory containing the program.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "resolveSourceMapLocations": {
                  "default": [
                    "${workspaceFolder}/**",
                    "!**/node_modules/**"
                  ],
                  "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                  "items": {
                    "type": "string"
                  },
                  "type": [
                    "array",
                    "null"
                  ]
                },
                "runtimeSourcemapPausePatterns": {
                  "default": [],
                  "items": {
                    "type": "string"
                  },
                  "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                  "type": "array"
                },
                "showAsyncStacks": {
                  "default": true,
                  "description": "Show the async calls that led to the current call stack.",
                  "oneOf": [
                    {
                      "type": "boolean"
                    },
                    {
                      "properties": {
                        "onAttach": {
                          "default": 32,
                          "type": "number"
                        }
                      },
                      "required": [
                        "onAttach"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "onceBreakpointResolved": {
                          "default": 32,
                          "type": "number"
                        }
                      },
                      "required": [
                        "onceBreakpointResolved"
                      ],
                      "type": "object"
                    }
                  ]
                },
                "skipFiles": {
                  "default": [
                    "<node_internals>/**"
                  ],
                  "description": "An array of file or folder names, or path globs, to skip when debugging.",
                  "type": "array"
                },
                "smartStep": {
                  "default": true,
                  "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                  "type": "boolean"
                },
                "sourceMapPathOverrides": {
                  "default": {
                    "meteor://💻app/*": "${workspaceFolder}/*",
                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                    "webpack://?:*/*": "${workspaceFolder}/*"
                  },
                  "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                  "type": "object"
                },
                "sourceMapRenames": {
                  "default": true,
                  "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                  "type": "boolean"
                },
                "sourceMaps": {
                  "default": true,
                  "description": "Use JavaScript source maps (if they exist).",
                  "type": "boolean"
                },
                "timeout": {
                  "default": 10000,
                  "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                  "type": "number"
                },
                "timeouts": {
                  "additionalProperties": false,
                  "default": {},
                  "description": "Timeouts for several debugger operations.",
                  "markdownDescription": "Timeouts for several debugger operations.",
                  "properties": {
                    "sourceMapCumulativePause": {
                      "default": 1000,
                      "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                      "type": "number"
                    },
                    "sourceMapMinPause": {
                      "default": 1000,
                      "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                      "type": "number"
                    }
                  },
                  "type": "object"
                },
                "trace": {
                  "default": true,
                  "description": "Configures what diagnostic output is produced.",
                  "oneOf": [
                    {
                      "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                      "type": "boolean"
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "console": {
                          "description": "Whether to return trace data from the launched application or browser.",
                          "type": "boolean"
                        },
                        "level": {
                          "description": "Configures the level of logs recorded.",
                          "enum": [
                            "fatal",
                            "error",
                            "warn",
                            "info",
                            "verbose"
                          ]
                        },
                        "logFile": {
                          "description": "Configures where on disk logs are written.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "stdio": {
                          "description": "Configures whether logs are also returned to the debug console.",
                          "type": "boolean"
                        },
                        "tags": {
                          "description": "Configures what types of logs are recorded.",
                          "items": {
                            "enum": [
                              "cdp",
                              "dap",
                              "runtime"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              },
              "type": "object"
            }
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "showAsyncStacks": {
          "default": true,
          "description": "Show the async calls that led to the current call stack.",
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "properties": {
                "onAttach": {
                  "default": 32,
                  "type": "number"
                }
              },
              "required": [
                "onAttach"
              ],
              "type": "object"
            },
            {
              "properties": {
                "onceBreakpointResolved": {
                  "default": 32,
                  "type": "number"
                }
              },
              "required": [
                "onceBreakpointResolved"
              ],
              "type": "object"
            }
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "skipFiles": {
          "default": [
            "<node_internals>/**"
          ],
          "description": "An array of file or folder names, or path globs, to skip when debugging.",
          "type": "array",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "smartStep": {
          "default": true,
          "description": "Automatically step through generated code that cannot be mapped back to the original source.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "sourceMapPathOverrides": {
          "default": {
            "meteor://💻app/*": "${workspaceFolder}/*",
            "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
            "webpack://?:*/*": "${workspaceFolder}/*"
          },
          "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
          "type": "object",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "sourceMapRenames": {
          "default": true,
          "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "sourceMaps": {
          "default": true,
          "description": "Use JavaScript source maps (if they exist).",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "timeout": {
          "default": 10000,
          "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
          "type": "number",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "timeouts": {
          "additionalProperties": false,
          "default": {},
          "description": "Timeouts for several debugger operations.",
          "markdownDescription": "Timeouts for several debugger operations.",
          "properties": {
            "sourceMapCumulativePause": {
              "default": 1000,
              "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
              "type": "number"
            },
            "sourceMapMinPause": {
              "default": 1000,
              "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
              "type": "number"
            }
          },
          "type": "object",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "trace": {
          "default": true,
          "description": "Configures what diagnostic output is produced.",
          "oneOf": [
            {
              "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
              "type": "boolean"
            },
            {
              "additionalProperties": false,
              "properties": {
                "console": {
                  "description": "Whether to return trace data from the launched application or browser.",
                  "type": "boolean"
                },
                "level": {
                  "description": "Configures the level of logs recorded.",
                  "enum": [
                    "fatal",
                    "error",
                    "warn",
                    "info",
                    "verbose"
                  ]
                },
                "logFile": {
                  "description": "Configures where on disk logs are written.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "stdio": {
                  "description": "Configures whether logs are also returned to the debug console.",
                  "type": "boolean"
                },
                "tags": {
                  "description": "Configures what types of logs are recorded.",
                  "items": {
                    "enum": [
                      "cdp",
                      "dap",
                      "runtime"
                    ]
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "url": {
          "default": "http://localhost:8080",
          "description": "Will search for a tab with this exact url and attach to it, if found",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "urlFilter": {
          "default": "",
          "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "userDataDir": {
          "default": true,
          "description": "By default, the browser is launched with a separate user profile in a temp folder. Use this option to override it. Set to false to launch with your default user profile. A new browser can't be launched if an instance is already running from `userDataDir`.",
          "type": [
            "string",
            "boolean"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "vueComponentPaths": {
          "default": [
            "${workspaceFolder}/**/*.vue"
          ],
          "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
          "type": "array",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "webRoot": {
          "default": "${workspaceFolder}",
          "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "serverReadyAction": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": false,
              "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
              "default": {
                "action": "openExternally"
              },
              "properties": {
                "action": {
                  "type": "string",
                  "enum": [
                    "openExternally"
                  ],
                  "enumDescriptions": [
                    "Open URI externally with the default application."
                  ],
                  "markdownDescription": "What to do with the URI when the server is ready.",
                  "default": "openExternally"
                },
                "pattern": {
                  "type": "string",
                  "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                  "default": "listening on port ([0-9]+)"
                },
                "uriFormat": {
                  "type": "string",
                  "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                  "default": "http://localhost:%s"
                }
              }
            },
            {
              "type": "object",
              "additionalProperties": false,
              "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
              "default": {
                "action": "debugWithEdge",
                "pattern": "listening on port ([0-9]+)",
                "uriFormat": "http://localhost:%s",
                "webRoot": "${workspaceFolder}"
              },
              "properties": {
                "action": {
                  "type": "string",
                  "enum": [
                    "debugWithChrome",
                    "debugWithEdge"
                  ],
                  "enumDescriptions": [
                    "Start debugging with the 'Debugger for Chrome'."
                  ],
                  "markdownDescription": "What to do with the URI when the server is ready.",
                  "default": "debugWithEdge"
                },
                "pattern": {
                  "type": "string",
                  "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                  "default": "listening on port ([0-9]+)"
                },
                "uriFormat": {
                  "type": "string",
                  "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                  "default": "http://localhost:%s"
                },
                "webRoot": {
                  "type": "string",
                  "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                  "default": "${workspaceFolder}"
                }
              }
            },
            {
              "type": "object",
              "additionalProperties": false,
              "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
              "default": {
                "action": "startDebugging",
                "name": "<launch browser config name>"
              },
              "required": [
                "name"
              ],
              "properties": {
                "action": {
                  "type": "string",
                  "enum": [
                    "startDebugging"
                  ],
                  "enumDescriptions": [
                    "Run another launch configuration."
                  ],
                  "markdownDescription": "What to do with the URI when the server is ready.",
                  "default": "startDebugging"
                },
                "pattern": {
                  "type": "string",
                  "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                  "default": "listening on port ([0-9]+)"
                },
                "name": {
                  "type": "string",
                  "markdownDescription": "Name of the launch configuration to run.",
                  "default": "Launch Browser"
                }
              }
            }
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "type": {
          "enum": [
            "chrome"
          ],
          "description": "Type of configuration.",
          "pattern": "^(?!node2)",
          "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
          "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
        },
        "request": {
          "enum": [
            "launch"
          ],
          "description": "Request type of configuration. Can be \"launch\" or \"attach\".",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "name": {
          "$ref": "#/definitions/common/properties/name",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "debugServer": {
          "$ref": "#/definitions/common/properties/debugServer",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "preLaunchTask": {
          "$ref": "#/definitions/common/properties/preLaunchTask",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "postDebugTask": {
          "$ref": "#/definitions/common/properties/postDebugTask",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "presentation": {
          "$ref": "#/definitions/common/properties/presentation",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "internalConsoleOptions": {
          "$ref": "#/definitions/common/properties/internalConsoleOptions",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        }
      },
      "required": [
        "name",
        "type",
        "request",
        "name",
        "type",
        "request",
        "name",
        "type",
        "request"
      ],
      "type": "object"
    },
    "pwa-msedge:attach": {
      "properties": {
        "address": {
          "default": "localhost",
          "description": "IP address or hostname the debugged browser is listening on.",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "browserAttachLocation": {
          "default": null,
          "description": "Forces the browser to attach in one location. In a remote workspace (through ssh or WSL, for example) this can be used to attach to a browser on the remote machine rather than locally.",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "enum": [
                "ui",
                "workspace"
              ],
              "type": "string"
            }
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "cascadeTerminateToConfigurations": {
          "default": [],
          "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
          "items": {
            "type": "string",
            "uniqueItems": true
          },
          "type": "array",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "customDescriptionGenerator": {
          "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "customPropertiesGenerator": {
          "deprecated": true,
          "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "disableNetworkCache": {
          "default": true,
          "description": "Controls whether to skip the network cache for each request",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "enableContentValidation": {
          "default": true,
          "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "inspectUri": {
          "default": null,
          "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `browserInspectUriPath` is the path part of the inspector URI on the launched browser (e.g.: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\").\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
          "type": [
            "string",
            "null"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "outFiles": {
          "default": [
            "${workspaceFolder}/**/*.js",
            "!**/node_modules/**"
          ],
          "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
          "items": {
            "type": "string"
          },
          "type": [
            "array"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "outputCapture": {
          "default": "console",
          "enum": [
            "console",
            "std"
          ],
          "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "pathMapping": {
          "default": {},
          "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
          "type": "object",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "pauseForSourceMap": {
          "default": false,
          "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "perScriptSourcemaps": {
          "default": "auto",
          "description": "Whether scripts are loaded individually with unique sourcemaps containing the basename of the source file. This can be set to optimize sourcemap handling when dealing with lots of small scripts. If set to \"auto\", we'll detect known cases where this is appropriate.",
          "enum": [
            "yes",
            "no",
            "auto"
          ],
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "port": {
          "default": 9229,
          "description": "Port to use to remote debugging the browser, given as `--remote-debugging-port` when launching the browser.",
          "type": "number",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "resolveSourceMapLocations": {
          "default": null,
          "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
          "items": {
            "type": "string"
          },
          "type": [
            "array",
            "null"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "restart": {
          "default": false,
          "markdownDescription": "Whether to reconnect if the browser connection is closed",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "server": {
          "oneOf": [
            {
              "additionalProperties": false,
              "default": {
                "program": "node my-server.js"
              },
              "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
              "properties": {
                "args": {
                  "default": [],
                  "description": "Command line arguments passed to the program.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "attachSimplePort": {
                  "default": 9229,
                  "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                  "type": "integer"
                },
                "autoAttachChildProcesses": {
                  "default": true,
                  "description": "Attach debugger to new child processes automatically.",
                  "type": "boolean"
                },
                "cascadeTerminateToConfigurations": {
                  "default": [],
                  "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                  "items": {
                    "type": "string",
                    "uniqueItems": true
                  },
                  "type": "array"
                },
                "console": {
                  "default": "internalConsole",
                  "description": "Where to launch the debug target.",
                  "enum": [
                    "internalConsole",
                    "integratedTerminal",
                    "externalTerminal"
                  ],
                  "enumDescriptions": [
                    "VS Code Debug Console (which doesn't support to read input from a program)",
                    "VS Code's integrated terminal",
                    "External terminal that can be configured via user settings"
                  ],
                  "type": "string"
                },
                "customDescriptionGenerator": {
                  "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                  "type": "string"
                },
                "customPropertiesGenerator": {
                  "deprecated": true,
                  "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                  "type": "string"
                },
                "cwd": {
                  "default": "${workspaceFolder}",
                  "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                  "type": "string"
                },
                "enableContentValidation": {
                  "default": true,
                  "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                  "type": "boolean"
                },
                "env": {
                  "additionalProperties": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "default": {},
                  "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                  "type": "object"
                },
                "envFile": {
                  "default": "${workspaceFolder}/.env",
                  "description": "Absolute path to a file containing environment variable definitions.",
                  "type": "string"
                },
                "killBehavior": {
                  "default": "forceful",
                  "enum": [
                    "forceful",
                    "polite",
                    "none"
                  ],
                  "markdownDescription": "Configures how debug processes are killed when stopping the session. Can be:\n\n- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.\n- polite: gracefully tears down the process tree. It's possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.\n- none: no termination will happen.",
                  "type": "string"
                },
                "localRoot": {
                  "default": null,
                  "description": "Path to the local directory containing the program.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "nodeVersionHint": {
                  "default": 12,
                  "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                  "minimum": 8,
                  "type": "number"
                },
                "outFiles": {
                  "default": [
                    "${workspaceFolder}/**/*.js",
                    "!**/node_modules/**"
                  ],
                  "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                  "items": {
                    "type": "string"
                  },
                  "type": [
                    "array"
                  ]
                },
                "outputCapture": {
                  "default": "console",
                  "enum": [
                    "console",
                    "std"
                  ],
                  "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                },
                "pauseForSourceMap": {
                  "default": false,
                  "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                  "type": "boolean"
                },
                "profileStartup": {
                  "default": true,
                  "description": "If true, will start profiling as soon as the process launches",
                  "type": "boolean"
                },
                "program": {
                  "default": "",
                  "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                  "type": "string"
                },
                "remoteRoot": {
                  "default": null,
                  "description": "Absolute path to the remote directory containing the program.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "resolveSourceMapLocations": {
                  "default": [
                    "${workspaceFolder}/**",
                    "!**/node_modules/**"
                  ],
                  "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                  "items": {
                    "type": "string"
                  },
                  "type": [
                    "array",
                    "null"
                  ]
                },
                "restart": {
                  "default": true,
                  "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                  "oneOf": [
                    {
                      "type": "boolean"
                    },
                    {
                      "properties": {
                        "delay": {
                          "default": 1000,
                          "minimum": 0,
                          "type": "number"
                        },
                        "maxAttempts": {
                          "default": 10,
                          "minimum": 0,
                          "type": "number"
                        }
                      },
                      "type": "object"
                    }
                  ]
                },
                "runtimeArgs": {
                  "default": [],
                  "description": "Optional arguments passed to the runtime executable.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "runtimeExecutable": {
                  "default": "node",
                  "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "runtimeSourcemapPausePatterns": {
                  "default": [],
                  "items": {
                    "type": "string"
                  },
                  "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                  "type": "array"
                },
                "runtimeVersion": {
                  "default": "default",
                  "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                  "type": "string"
                },
                "showAsyncStacks": {
                  "default": true,
                  "description": "Show the async calls that led to the current call stack.",
                  "oneOf": [
                    {
                      "type": "boolean"
                    },
                    {
                      "properties": {
                        "onAttach": {
                          "default": 32,
                          "type": "number"
                        }
                      },
                      "required": [
                        "onAttach"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "onceBreakpointResolved": {
                          "default": 32,
                          "type": "number"
                        }
                      },
                      "required": [
                        "onceBreakpointResolved"
                      ],
                      "type": "object"
                    }
                  ]
                },
                "skipFiles": {
                  "default": [
                    "<node_internals>/**"
                  ],
                  "description": "An array of file or folder names, or path globs, to skip when debugging.",
                  "type": "array"
                },
                "smartStep": {
                  "default": true,
                  "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                  "type": "boolean"
                },
                "sourceMapPathOverrides": {
                  "default": {
                    "meteor://💻app/*": "${workspaceFolder}/*",
                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                    "webpack://?:*/*": "${workspaceFolder}/*"
                  },
                  "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                  "type": "object"
                },
                "sourceMapRenames": {
                  "default": true,
                  "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                  "type": "boolean"
                },
                "sourceMaps": {
                  "default": true,
                  "description": "Use JavaScript source maps (if they exist).",
                  "type": "boolean"
                },
                "stopOnEntry": {
                  "default": true,
                  "description": "Automatically stop program after launch.",
                  "type": [
                    "boolean",
                    "string"
                  ]
                },
                "timeout": {
                  "default": 10000,
                  "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                  "type": "number"
                },
                "timeouts": {
                  "additionalProperties": false,
                  "default": {},
                  "description": "Timeouts for several debugger operations.",
                  "markdownDescription": "Timeouts for several debugger operations.",
                  "properties": {
                    "sourceMapCumulativePause": {
                      "default": 1000,
                      "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                      "type": "number"
                    },
                    "sourceMapMinPause": {
                      "default": 1000,
                      "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                      "type": "number"
                    }
                  },
                  "type": "object"
                },
                "trace": {
                  "default": true,
                  "description": "Configures what diagnostic output is produced.",
                  "oneOf": [
                    {
                      "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                      "type": "boolean"
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "console": {
                          "description": "Whether to return trace data from the launched application or browser.",
                          "type": "boolean"
                        },
                        "level": {
                          "description": "Configures the level of logs recorded.",
                          "enum": [
                            "fatal",
                            "error",
                            "warn",
                            "info",
                            "verbose"
                          ]
                        },
                        "logFile": {
                          "description": "Configures where on disk logs are written.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "stdio": {
                          "description": "Configures whether logs are also returned to the debug console.",
                          "type": "boolean"
                        },
                        "tags": {
                          "description": "Configures what types of logs are recorded.",
                          "items": {
                            "enum": [
                              "cdp",
                              "dap",
                              "runtime"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              },
              "type": "object"
            },
            {
              "additionalProperties": false,
              "default": {
                "program": "npm start"
              },
              "description": "JavaScript Debug Terminal",
              "properties": {
                "autoAttachChildProcesses": {
                  "default": true,
                  "description": "Attach debugger to new child processes automatically.",
                  "type": "boolean"
                },
                "cascadeTerminateToConfigurations": {
                  "default": [],
                  "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                  "items": {
                    "type": "string",
                    "uniqueItems": true
                  },
                  "type": "array"
                },
                "command": {
                  "default": "npm start",
                  "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "customDescriptionGenerator": {
                  "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                  "type": "string"
                },
                "customPropertiesGenerator": {
                  "deprecated": true,
                  "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                  "type": "string"
                },
                "cwd": {
                  "default": "${workspaceFolder}",
                  "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                  "docDefault": "localRoot || ${workspaceFolder}",
                  "type": "string"
                },
                "enableContentValidation": {
                  "default": true,
                  "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                  "type": "boolean"
                },
                "env": {
                  "additionalProperties": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "default": {},
                  "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                  "type": "object"
                },
                "envFile": {
                  "default": "${workspaceFolder}/.env",
                  "description": "Absolute path to a file containing environment variable definitions.",
                  "type": "string"
                },
                "localRoot": {
                  "default": null,
                  "description": "Path to the local directory containing the program.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "nodeVersionHint": {
                  "default": 12,
                  "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                  "minimum": 8,
                  "type": "number"
                },
                "outFiles": {
                  "default": [
                    "${workspaceFolder}/**/*.js",
                    "!**/node_modules/**"
                  ],
                  "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                  "items": {
                    "type": "string"
                  },
                  "type": [
                    "array"
                  ]
                },
                "outputCapture": {
                  "default": "console",
                  "enum": [
                    "console",
                    "std"
                  ],
                  "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                },
                "pauseForSourceMap": {
                  "default": false,
                  "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                  "type": "boolean"
                },
                "remoteRoot": {
                  "default": null,
                  "description": "Absolute path to the remote directory containing the program.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "resolveSourceMapLocations": {
                  "default": [
                    "${workspaceFolder}/**",
                    "!**/node_modules/**"
                  ],
                  "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                  "items": {
                    "type": "string"
                  },
                  "type": [
                    "array",
                    "null"
                  ]
                },
                "runtimeSourcemapPausePatterns": {
                  "default": [],
                  "items": {
                    "type": "string"
                  },
                  "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                  "type": "array"
                },
                "showAsyncStacks": {
                  "default": true,
                  "description": "Show the async calls that led to the current call stack.",
                  "oneOf": [
                    {
                      "type": "boolean"
                    },
                    {
                      "properties": {
                        "onAttach": {
                          "default": 32,
                          "type": "number"
                        }
                      },
                      "required": [
                        "onAttach"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "onceBreakpointResolved": {
                          "default": 32,
                          "type": "number"
                        }
                      },
                      "required": [
                        "onceBreakpointResolved"
                      ],
                      "type": "object"
                    }
                  ]
                },
                "skipFiles": {
                  "default": [
                    "<node_internals>/**"
                  ],
                  "description": "An array of file or folder names, or path globs, to skip when debugging.",
                  "type": "array"
                },
                "smartStep": {
                  "default": true,
                  "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                  "type": "boolean"
                },
                "sourceMapPathOverrides": {
                  "default": {
                    "meteor://💻app/*": "${workspaceFolder}/*",
                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                    "webpack://?:*/*": "${workspaceFolder}/*"
                  },
                  "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                  "type": "object"
                },
                "sourceMapRenames": {
                  "default": true,
                  "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                  "type": "boolean"
                },
                "sourceMaps": {
                  "default": true,
                  "description": "Use JavaScript source maps (if they exist).",
                  "type": "boolean"
                },
                "timeout": {
                  "default": 10000,
                  "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                  "type": "number"
                },
                "timeouts": {
                  "additionalProperties": false,
                  "default": {},
                  "description": "Timeouts for several debugger operations.",
                  "markdownDescription": "Timeouts for several debugger operations.",
                  "properties": {
                    "sourceMapCumulativePause": {
                      "default": 1000,
                      "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                      "type": "number"
                    },
                    "sourceMapMinPause": {
                      "default": 1000,
                      "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                      "type": "number"
                    }
                  },
                  "type": "object"
                },
                "trace": {
                  "default": true,
                  "description": "Configures what diagnostic output is produced.",
                  "oneOf": [
                    {
                      "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                      "type": "boolean"
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "console": {
                          "description": "Whether to return trace data from the launched application or browser.",
                          "type": "boolean"
                        },
                        "level": {
                          "description": "Configures the level of logs recorded.",
                          "enum": [
                            "fatal",
                            "error",
                            "warn",
                            "info",
                            "verbose"
                          ]
                        },
                        "logFile": {
                          "description": "Configures where on disk logs are written.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "stdio": {
                          "description": "Configures whether logs are also returned to the debug console.",
                          "type": "boolean"
                        },
                        "tags": {
                          "description": "Configures what types of logs are recorded.",
                          "items": {
                            "enum": [
                              "cdp",
                              "dap",
                              "runtime"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              },
              "type": "object"
            }
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "showAsyncStacks": {
          "default": true,
          "description": "Show the async calls that led to the current call stack.",
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "properties": {
                "onAttach": {
                  "default": 32,
                  "type": "number"
                }
              },
              "required": [
                "onAttach"
              ],
              "type": "object"
            },
            {
              "properties": {
                "onceBreakpointResolved": {
                  "default": 32,
                  "type": "number"
                }
              },
              "required": [
                "onceBreakpointResolved"
              ],
              "type": "object"
            }
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "skipFiles": {
          "default": [
            "<node_internals>/**"
          ],
          "description": "An array of file or folder names, or path globs, to skip when debugging.",
          "type": "array",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "smartStep": {
          "default": true,
          "description": "Automatically step through generated code that cannot be mapped back to the original source.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "sourceMapPathOverrides": {
          "default": {
            "meteor://💻app/*": "${workspaceFolder}/*",
            "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
            "webpack://?:*/*": "${workspaceFolder}/*"
          },
          "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
          "type": "object",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "sourceMapRenames": {
          "default": true,
          "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "sourceMaps": {
          "default": true,
          "description": "Use JavaScript source maps (if they exist).",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "targetSelection": {
          "default": "automatic",
          "enum": [
            "pick",
            "automatic"
          ],
          "markdownDescription": "Whether to attach to all targets that match the URL filter (\"automatic\") or ask to pick one (\"pick\").",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "timeout": {
          "default": 10000,
          "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
          "type": "number",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "timeouts": {
          "additionalProperties": false,
          "default": {},
          "description": "Timeouts for several debugger operations.",
          "markdownDescription": "Timeouts for several debugger operations.",
          "properties": {
            "sourceMapCumulativePause": {
              "default": 1000,
              "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
              "type": "number"
            },
            "sourceMapMinPause": {
              "default": 1000,
              "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
              "type": "number"
            }
          },
          "type": "object",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "trace": {
          "default": true,
          "description": "Configures what diagnostic output is produced.",
          "oneOf": [
            {
              "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
              "type": "boolean"
            },
            {
              "additionalProperties": false,
              "properties": {
                "console": {
                  "description": "Whether to return trace data from the launched application or browser.",
                  "type": "boolean"
                },
                "level": {
                  "description": "Configures the level of logs recorded.",
                  "enum": [
                    "fatal",
                    "error",
                    "warn",
                    "info",
                    "verbose"
                  ]
                },
                "logFile": {
                  "description": "Configures where on disk logs are written.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "stdio": {
                  "description": "Configures whether logs are also returned to the debug console.",
                  "type": "boolean"
                },
                "tags": {
                  "description": "Configures what types of logs are recorded.",
                  "items": {
                    "enum": [
                      "cdp",
                      "dap",
                      "runtime"
                    ]
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "url": {
          "default": "http://localhost:8080",
          "description": "Will search for a tab with this exact url and attach to it, if found",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "urlFilter": {
          "default": "",
          "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "useWebView": {
          "default": false,
          "description": "(Edge (Chromium) only) When 'true', the debugger will treat the runtime executable as a host application that contains a WebView allowing you to debug the WebView script content.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "vueComponentPaths": {
          "default": [
            "${workspaceFolder}/**/*.vue"
          ],
          "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
          "type": "array",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "webRoot": {
          "default": "${workspaceFolder}",
          "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "type": {
          "enum": [
            "pwa-msedge"
          ],
          "description": "Type of configuration.",
          "pattern": "^(?!node2)",
          "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
          "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
        },
        "request": {
          "enum": [
            "attach"
          ],
          "description": "Request type of configuration. Can be \"launch\" or \"attach\".",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "name": {
          "$ref": "#/definitions/common/properties/name",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "debugServer": {
          "$ref": "#/definitions/common/properties/debugServer",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "preLaunchTask": {
          "$ref": "#/definitions/common/properties/preLaunchTask",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "postDebugTask": {
          "$ref": "#/definitions/common/properties/postDebugTask",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "presentation": {
          "$ref": "#/definitions/common/properties/presentation",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "internalConsoleOptions": {
          "$ref": "#/definitions/common/properties/internalConsoleOptions",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        }
      },
      "required": [
        "name",
        "type",
        "request",
        "name",
        "type",
        "request",
        "name",
        "type",
        "request"
      ],
      "type": "object"
    },
    "pwa-msedge:launch": {
      "properties": {
        "address": {
          "default": "localhost",
          "description": "When debugging webviews, the IP address or hostname the webview is listening on. Will be automatically discovered if not set.",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "browserLaunchLocation": {
          "default": null,
          "description": "Forces the browser to be launched in one location. In a remote workspace (through ssh or WSL, for example) this can be used to open the browser on the remote machine rather than locally.",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "enum": [
                "ui",
                "workspace"
              ],
              "type": "string"
            }
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "cascadeTerminateToConfigurations": {
          "default": [],
          "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
          "items": {
            "type": "string",
            "uniqueItems": true
          },
          "type": "array",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "cleanUp": {
          "default": "wholeBrowser",
          "description": "What clean-up to do after the debugging session finishes. Close only the tab being debug, vs. close the whole browser.",
          "enum": [
            "wholeBrowser",
            "onlyTab"
          ],
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "customDescriptionGenerator": {
          "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "customPropertiesGenerator": {
          "deprecated": true,
          "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "cwd": {
          "default": null,
          "description": "Optional working directory for the runtime executable.",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "disableNetworkCache": {
          "default": true,
          "description": "Controls whether to skip the network cache for each request",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "enableContentValidation": {
          "default": true,
          "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "env": {
          "default": {},
          "description": "Optional dictionary of environment key/value pairs for the browser.",
          "type": "object",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "file": {
          "default": "${workspaceFolder}/index.html",
          "description": "A local html file to open in the browser",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "includeDefaultArgs": {
          "default": true,
          "description": "Whether default browser launch arguments (to disable features that may make debugging harder) will be included in the launch.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "inspectUri": {
          "default": null,
          "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `browserInspectUriPath` is the path part of the inspector URI on the launched browser (e.g.: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\").\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
          "type": [
            "string",
            "null"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "outFiles": {
          "default": [
            "${workspaceFolder}/**/*.js",
            "!**/node_modules/**"
          ],
          "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
          "items": {
            "type": "string"
          },
          "type": [
            "array"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "outputCapture": {
          "default": "console",
          "enum": [
            "console",
            "std"
          ],
          "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "pathMapping": {
          "default": {},
          "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
          "type": "object",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "pauseForSourceMap": {
          "default": false,
          "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "perScriptSourcemaps": {
          "default": "auto",
          "description": "Whether scripts are loaded individually with unique sourcemaps containing the basename of the source file. This can be set to optimize sourcemap handling when dealing with lots of small scripts. If set to \"auto\", we'll detect known cases where this is appropriate.",
          "enum": [
            "yes",
            "no",
            "auto"
          ],
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "port": {
          "default": 9229,
          "description": "When debugging webviews, the port the webview debugger is listening on. Will be automatically discovered if not set.",
          "type": "number",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "profileStartup": {
          "default": true,
          "description": "If true, will start profiling soon as the process launches",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "resolveSourceMapLocations": {
          "default": null,
          "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
          "items": {
            "type": "string"
          },
          "type": [
            "array",
            "null"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "runtimeArgs": {
          "default": [],
          "description": "Optional arguments passed to the runtime executable.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "runtimeExecutable": {
          "default": "stable",
          "description": "Either 'canary', 'stable', 'dev', 'custom' or path to the browser executable. Custom means a custom wrapper, custom build or EDGE_PATH environment variable.",
          "type": [
            "string",
            "null"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "server": {
          "oneOf": [
            {
              "additionalProperties": false,
              "default": {
                "program": "node my-server.js"
              },
              "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
              "properties": {
                "args": {
                  "default": [],
                  "description": "Command line arguments passed to the program.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "attachSimplePort": {
                  "default": 9229,
                  "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                  "type": "integer"
                },
                "autoAttachChildProcesses": {
                  "default": true,
                  "description": "Attach debugger to new child processes automatically.",
                  "type": "boolean"
                },
                "cascadeTerminateToConfigurations": {
                  "default": [],
                  "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                  "items": {
                    "type": "string",
                    "uniqueItems": true
                  },
                  "type": "array"
                },
                "console": {
                  "default": "internalConsole",
                  "description": "Where to launch the debug target.",
                  "enum": [
                    "internalConsole",
                    "integratedTerminal",
                    "externalTerminal"
                  ],
                  "enumDescriptions": [
                    "VS Code Debug Console (which doesn't support to read input from a program)",
                    "VS Code's integrated terminal",
                    "External terminal that can be configured via user settings"
                  ],
                  "type": "string"
                },
                "customDescriptionGenerator": {
                  "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                  "type": "string"
                },
                "customPropertiesGenerator": {
                  "deprecated": true,
                  "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                  "type": "string"
                },
                "cwd": {
                  "default": "${workspaceFolder}",
                  "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                  "type": "string"
                },
                "enableContentValidation": {
                  "default": true,
                  "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                  "type": "boolean"
                },
                "env": {
                  "additionalProperties": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "default": {},
                  "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                  "type": "object"
                },
                "envFile": {
                  "default": "${workspaceFolder}/.env",
                  "description": "Absolute path to a file containing environment variable definitions.",
                  "type": "string"
                },
                "killBehavior": {
                  "default": "forceful",
                  "enum": [
                    "forceful",
                    "polite",
                    "none"
                  ],
                  "markdownDescription": "Configures how debug processes are killed when stopping the session. Can be:\n\n- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.\n- polite: gracefully tears down the process tree. It's possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.\n- none: no termination will happen.",
                  "type": "string"
                },
                "localRoot": {
                  "default": null,
                  "description": "Path to the local directory containing the program.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "nodeVersionHint": {
                  "default": 12,
                  "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                  "minimum": 8,
                  "type": "number"
                },
                "outFiles": {
                  "default": [
                    "${workspaceFolder}/**/*.js",
                    "!**/node_modules/**"
                  ],
                  "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                  "items": {
                    "type": "string"
                  },
                  "type": [
                    "array"
                  ]
                },
                "outputCapture": {
                  "default": "console",
                  "enum": [
                    "console",
                    "std"
                  ],
                  "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                },
                "pauseForSourceMap": {
                  "default": false,
                  "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                  "type": "boolean"
                },
                "profileStartup": {
                  "default": true,
                  "description": "If true, will start profiling as soon as the process launches",
                  "type": "boolean"
                },
                "program": {
                  "default": "",
                  "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                  "type": "string"
                },
                "remoteRoot": {
                  "default": null,
                  "description": "Absolute path to the remote directory containing the program.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "resolveSourceMapLocations": {
                  "default": [
                    "${workspaceFolder}/**",
                    "!**/node_modules/**"
                  ],
                  "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                  "items": {
                    "type": "string"
                  },
                  "type": [
                    "array",
                    "null"
                  ]
                },
                "restart": {
                  "default": true,
                  "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                  "oneOf": [
                    {
                      "type": "boolean"
                    },
                    {
                      "properties": {
                        "delay": {
                          "default": 1000,
                          "minimum": 0,
                          "type": "number"
                        },
                        "maxAttempts": {
                          "default": 10,
                          "minimum": 0,
                          "type": "number"
                        }
                      },
                      "type": "object"
                    }
                  ]
                },
                "runtimeArgs": {
                  "default": [],
                  "description": "Optional arguments passed to the runtime executable.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "runtimeExecutable": {
                  "default": "node",
                  "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "runtimeSourcemapPausePatterns": {
                  "default": [],
                  "items": {
                    "type": "string"
                  },
                  "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                  "type": "array"
                },
                "runtimeVersion": {
                  "default": "default",
                  "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                  "type": "string"
                },
                "showAsyncStacks": {
                  "default": true,
                  "description": "Show the async calls that led to the current call stack.",
                  "oneOf": [
                    {
                      "type": "boolean"
                    },
                    {
                      "properties": {
                        "onAttach": {
                          "default": 32,
                          "type": "number"
                        }
                      },
                      "required": [
                        "onAttach"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "onceBreakpointResolved": {
                          "default": 32,
                          "type": "number"
                        }
                      },
                      "required": [
                        "onceBreakpointResolved"
                      ],
                      "type": "object"
                    }
                  ]
                },
                "skipFiles": {
                  "default": [
                    "<node_internals>/**"
                  ],
                  "description": "An array of file or folder names, or path globs, to skip when debugging.",
                  "type": "array"
                },
                "smartStep": {
                  "default": true,
                  "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                  "type": "boolean"
                },
                "sourceMapPathOverrides": {
                  "default": {
                    "meteor://💻app/*": "${workspaceFolder}/*",
                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                    "webpack://?:*/*": "${workspaceFolder}/*"
                  },
                  "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                  "type": "object"
                },
                "sourceMapRenames": {
                  "default": true,
                  "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                  "type": "boolean"
                },
                "sourceMaps": {
                  "default": true,
                  "description": "Use JavaScript source maps (if they exist).",
                  "type": "boolean"
                },
                "stopOnEntry": {
                  "default": true,
                  "description": "Automatically stop program after launch.",
                  "type": [
                    "boolean",
                    "string"
                  ]
                },
                "timeout": {
                  "default": 10000,
                  "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                  "type": "number"
                },
                "timeouts": {
                  "additionalProperties": false,
                  "default": {},
                  "description": "Timeouts for several debugger operations.",
                  "markdownDescription": "Timeouts for several debugger operations.",
                  "properties": {
                    "sourceMapCumulativePause": {
                      "default": 1000,
                      "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                      "type": "number"
                    },
                    "sourceMapMinPause": {
                      "default": 1000,
                      "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                      "type": "number"
                    }
                  },
                  "type": "object"
                },
                "trace": {
                  "default": true,
                  "description": "Configures what diagnostic output is produced.",
                  "oneOf": [
                    {
                      "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                      "type": "boolean"
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "console": {
                          "description": "Whether to return trace data from the launched application or browser.",
                          "type": "boolean"
                        },
                        "level": {
                          "description": "Configures the level of logs recorded.",
                          "enum": [
                            "fatal",
                            "error",
                            "warn",
                            "info",
                            "verbose"
                          ]
                        },
                        "logFile": {
                          "description": "Configures where on disk logs are written.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "stdio": {
                          "description": "Configures whether logs are also returned to the debug console.",
                          "type": "boolean"
                        },
                        "tags": {
                          "description": "Configures what types of logs are recorded.",
                          "items": {
                            "enum": [
                              "cdp",
                              "dap",
                              "runtime"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              },
              "type": "object"
            },
            {
              "additionalProperties": false,
              "default": {
                "program": "npm start"
              },
              "description": "JavaScript Debug Terminal",
              "properties": {
                "autoAttachChildProcesses": {
                  "default": true,
                  "description": "Attach debugger to new child processes automatically.",
                  "type": "boolean"
                },
                "cascadeTerminateToConfigurations": {
                  "default": [],
                  "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                  "items": {
                    "type": "string",
                    "uniqueItems": true
                  },
                  "type": "array"
                },
                "command": {
                  "default": "npm start",
                  "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "customDescriptionGenerator": {
                  "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                  "type": "string"
                },
                "customPropertiesGenerator": {
                  "deprecated": true,
                  "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                  "type": "string"
                },
                "cwd": {
                  "default": "${workspaceFolder}",
                  "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                  "docDefault": "localRoot || ${workspaceFolder}",
                  "type": "string"
                },
                "enableContentValidation": {
                  "default": true,
                  "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                  "type": "boolean"
                },
                "env": {
                  "additionalProperties": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "default": {},
                  "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                  "type": "object"
                },
                "envFile": {
                  "default": "${workspaceFolder}/.env",
                  "description": "Absolute path to a file containing environment variable definitions.",
                  "type": "string"
                },
                "localRoot": {
                  "default": null,
                  "description": "Path to the local directory containing the program.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "nodeVersionHint": {
                  "default": 12,
                  "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                  "minimum": 8,
                  "type": "number"
                },
                "outFiles": {
                  "default": [
                    "${workspaceFolder}/**/*.js",
                    "!**/node_modules/**"
                  ],
                  "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                  "items": {
                    "type": "string"
                  },
                  "type": [
                    "array"
                  ]
                },
                "outputCapture": {
                  "default": "console",
                  "enum": [
                    "console",
                    "std"
                  ],
                  "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                },
                "pauseForSourceMap": {
                  "default": false,
                  "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                  "type": "boolean"
                },
                "remoteRoot": {
                  "default": null,
                  "description": "Absolute path to the remote directory containing the program.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "resolveSourceMapLocations": {
                  "default": [
                    "${workspaceFolder}/**",
                    "!**/node_modules/**"
                  ],
                  "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                  "items": {
                    "type": "string"
                  },
                  "type": [
                    "array",
                    "null"
                  ]
                },
                "runtimeSourcemapPausePatterns": {
                  "default": [],
                  "items": {
                    "type": "string"
                  },
                  "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                  "type": "array"
                },
                "showAsyncStacks": {
                  "default": true,
                  "description": "Show the async calls that led to the current call stack.",
                  "oneOf": [
                    {
                      "type": "boolean"
                    },
                    {
                      "properties": {
                        "onAttach": {
                          "default": 32,
                          "type": "number"
                        }
                      },
                      "required": [
                        "onAttach"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "onceBreakpointResolved": {
                          "default": 32,
                          "type": "number"
                        }
                      },
                      "required": [
                        "onceBreakpointResolved"
                      ],
                      "type": "object"
                    }
                  ]
                },
                "skipFiles": {
                  "default": [
                    "<node_internals>/**"
                  ],
                  "description": "An array of file or folder names, or path globs, to skip when debugging.",
                  "type": "array"
                },
                "smartStep": {
                  "default": true,
                  "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                  "type": "boolean"
                },
                "sourceMapPathOverrides": {
                  "default": {
                    "meteor://💻app/*": "${workspaceFolder}/*",
                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                    "webpack://?:*/*": "${workspaceFolder}/*"
                  },
                  "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                  "type": "object"
                },
                "sourceMapRenames": {
                  "default": true,
                  "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                  "type": "boolean"
                },
                "sourceMaps": {
                  "default": true,
                  "description": "Use JavaScript source maps (if they exist).",
                  "type": "boolean"
                },
                "timeout": {
                  "default": 10000,
                  "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                  "type": "number"
                },
                "timeouts": {
                  "additionalProperties": false,
                  "default": {},
                  "description": "Timeouts for several debugger operations.",
                  "markdownDescription": "Timeouts for several debugger operations.",
                  "properties": {
                    "sourceMapCumulativePause": {
                      "default": 1000,
                      "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                      "type": "number"
                    },
                    "sourceMapMinPause": {
                      "default": 1000,
                      "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                      "type": "number"
                    }
                  },
                  "type": "object"
                },
                "trace": {
                  "default": true,
                  "description": "Configures what diagnostic output is produced.",
                  "oneOf": [
                    {
                      "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                      "type": "boolean"
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "console": {
                          "description": "Whether to return trace data from the launched application or browser.",
                          "type": "boolean"
                        },
                        "level": {
                          "description": "Configures the level of logs recorded.",
                          "enum": [
                            "fatal",
                            "error",
                            "warn",
                            "info",
                            "verbose"
                          ]
                        },
                        "logFile": {
                          "description": "Configures where on disk logs are written.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "stdio": {
                          "description": "Configures whether logs are also returned to the debug console.",
                          "type": "boolean"
                        },
                        "tags": {
                          "description": "Configures what types of logs are recorded.",
                          "items": {
                            "enum": [
                              "cdp",
                              "dap",
                              "runtime"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              },
              "type": "object"
            }
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "showAsyncStacks": {
          "default": true,
          "description": "Show the async calls that led to the current call stack.",
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "properties": {
                "onAttach": {
                  "default": 32,
                  "type": "number"
                }
              },
              "required": [
                "onAttach"
              ],
              "type": "object"
            },
            {
              "properties": {
                "onceBreakpointResolved": {
                  "default": 32,
                  "type": "number"
                }
              },
              "required": [
                "onceBreakpointResolved"
              ],
              "type": "object"
            }
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "skipFiles": {
          "default": [
            "<node_internals>/**"
          ],
          "description": "An array of file or folder names, or path globs, to skip when debugging.",
          "type": "array",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "smartStep": {
          "default": true,
          "description": "Automatically step through generated code that cannot be mapped back to the original source.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "sourceMapPathOverrides": {
          "default": {
            "meteor://💻app/*": "${workspaceFolder}/*",
            "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
            "webpack://?:*/*": "${workspaceFolder}/*"
          },
          "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
          "type": "object",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "sourceMapRenames": {
          "default": true,
          "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "sourceMaps": {
          "default": true,
          "description": "Use JavaScript source maps (if they exist).",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "timeout": {
          "default": 10000,
          "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
          "type": "number",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "timeouts": {
          "additionalProperties": false,
          "default": {},
          "description": "Timeouts for several debugger operations.",
          "markdownDescription": "Timeouts for several debugger operations.",
          "properties": {
            "sourceMapCumulativePause": {
              "default": 1000,
              "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
              "type": "number"
            },
            "sourceMapMinPause": {
              "default": 1000,
              "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
              "type": "number"
            }
          },
          "type": "object",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "trace": {
          "default": true,
          "description": "Configures what diagnostic output is produced.",
          "oneOf": [
            {
              "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
              "type": "boolean"
            },
            {
              "additionalProperties": false,
              "properties": {
                "console": {
                  "description": "Whether to return trace data from the launched application or browser.",
                  "type": "boolean"
                },
                "level": {
                  "description": "Configures the level of logs recorded.",
                  "enum": [
                    "fatal",
                    "error",
                    "warn",
                    "info",
                    "verbose"
                  ]
                },
                "logFile": {
                  "description": "Configures where on disk logs are written.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "stdio": {
                  "description": "Configures whether logs are also returned to the debug console.",
                  "type": "boolean"
                },
                "tags": {
                  "description": "Configures what types of logs are recorded.",
                  "items": {
                    "enum": [
                      "cdp",
                      "dap",
                      "runtime"
                    ]
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "url": {
          "default": "http://localhost:8080",
          "description": "Will search for a tab with this exact url and attach to it, if found",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "urlFilter": {
          "default": "",
          "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "useWebView": {
          "default": false,
          "description": "(Edge (Chromium) only) When 'true', the debugger will treat the runtime executable as a host application that contains a WebView allowing you to debug the WebView script content.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "userDataDir": {
          "default": true,
          "description": "By default, the browser is launched with a separate user profile in a temp folder. Use this option to override it. Set to false to launch with your default user profile. A new browser can't be launched if an instance is already running from `userDataDir`.",
          "type": [
            "string",
            "boolean"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "vueComponentPaths": {
          "default": [
            "${workspaceFolder}/**/*.vue"
          ],
          "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
          "type": "array",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "webRoot": {
          "default": "${workspaceFolder}",
          "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "serverReadyAction": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": false,
              "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
              "default": {
                "action": "openExternally"
              },
              "properties": {
                "action": {
                  "type": "string",
                  "enum": [
                    "openExternally"
                  ],
                  "enumDescriptions": [
                    "Open URI externally with the default application."
                  ],
                  "markdownDescription": "What to do with the URI when the server is ready.",
                  "default": "openExternally"
                },
                "pattern": {
                  "type": "string",
                  "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                  "default": "listening on port ([0-9]+)"
                },
                "uriFormat": {
                  "type": "string",
                  "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                  "default": "http://localhost:%s"
                }
              }
            },
            {
              "type": "object",
              "additionalProperties": false,
              "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
              "default": {
                "action": "debugWithEdge",
                "pattern": "listening on port ([0-9]+)",
                "uriFormat": "http://localhost:%s",
                "webRoot": "${workspaceFolder}"
              },
              "properties": {
                "action": {
                  "type": "string",
                  "enum": [
                    "debugWithChrome",
                    "debugWithEdge"
                  ],
                  "enumDescriptions": [
                    "Start debugging with the 'Debugger for Chrome'."
                  ],
                  "markdownDescription": "What to do with the URI when the server is ready.",
                  "default": "debugWithEdge"
                },
                "pattern": {
                  "type": "string",
                  "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                  "default": "listening on port ([0-9]+)"
                },
                "uriFormat": {
                  "type": "string",
                  "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                  "default": "http://localhost:%s"
                },
                "webRoot": {
                  "type": "string",
                  "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                  "default": "${workspaceFolder}"
                }
              }
            },
            {
              "type": "object",
              "additionalProperties": false,
              "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
              "default": {
                "action": "startDebugging",
                "name": "<launch browser config name>"
              },
              "required": [
                "name"
              ],
              "properties": {
                "action": {
                  "type": "string",
                  "enum": [
                    "startDebugging"
                  ],
                  "enumDescriptions": [
                    "Run another launch configuration."
                  ],
                  "markdownDescription": "What to do with the URI when the server is ready.",
                  "default": "startDebugging"
                },
                "pattern": {
                  "type": "string",
                  "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                  "default": "listening on port ([0-9]+)"
                },
                "name": {
                  "type": "string",
                  "markdownDescription": "Name of the launch configuration to run.",
                  "default": "Launch Browser"
                }
              }
            }
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "type": {
          "enum": [
            "pwa-msedge"
          ],
          "description": "Type of configuration.",
          "pattern": "^(?!node2)",
          "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
          "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
        },
        "request": {
          "enum": [
            "launch"
          ],
          "description": "Request type of configuration. Can be \"launch\" or \"attach\".",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "name": {
          "$ref": "#/definitions/common/properties/name",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "debugServer": {
          "$ref": "#/definitions/common/properties/debugServer",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "preLaunchTask": {
          "$ref": "#/definitions/common/properties/preLaunchTask",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "postDebugTask": {
          "$ref": "#/definitions/common/properties/postDebugTask",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "presentation": {
          "$ref": "#/definitions/common/properties/presentation",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "internalConsoleOptions": {
          "$ref": "#/definitions/common/properties/internalConsoleOptions",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        }
      },
      "required": [
        "name",
        "type",
        "request",
        "name",
        "type",
        "request",
        "name",
        "type",
        "request"
      ],
      "type": "object"
    },
    "msedge:attach": {
      "properties": {
        "address": {
          "default": "localhost",
          "description": "IP address or hostname the debugged browser is listening on.",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "browserAttachLocation": {
          "default": null,
          "description": "Forces the browser to attach in one location. In a remote workspace (through ssh or WSL, for example) this can be used to attach to a browser on the remote machine rather than locally.",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "enum": [
                "ui",
                "workspace"
              ],
              "type": "string"
            }
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "cascadeTerminateToConfigurations": {
          "default": [],
          "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
          "items": {
            "type": "string",
            "uniqueItems": true
          },
          "type": "array",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "customDescriptionGenerator": {
          "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "customPropertiesGenerator": {
          "deprecated": true,
          "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "disableNetworkCache": {
          "default": true,
          "description": "Controls whether to skip the network cache for each request",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "enableContentValidation": {
          "default": true,
          "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "inspectUri": {
          "default": null,
          "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `browserInspectUriPath` is the path part of the inspector URI on the launched browser (e.g.: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\").\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
          "type": [
            "string",
            "null"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "outFiles": {
          "default": [
            "${workspaceFolder}/**/*.js",
            "!**/node_modules/**"
          ],
          "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
          "items": {
            "type": "string"
          },
          "type": [
            "array"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "outputCapture": {
          "default": "console",
          "enum": [
            "console",
            "std"
          ],
          "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "pathMapping": {
          "default": {},
          "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
          "type": "object",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "pauseForSourceMap": {
          "default": false,
          "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "perScriptSourcemaps": {
          "default": "auto",
          "description": "Whether scripts are loaded individually with unique sourcemaps containing the basename of the source file. This can be set to optimize sourcemap handling when dealing with lots of small scripts. If set to \"auto\", we'll detect known cases where this is appropriate.",
          "enum": [
            "yes",
            "no",
            "auto"
          ],
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "port": {
          "default": 9229,
          "description": "Port to use to remote debugging the browser, given as `--remote-debugging-port` when launching the browser.",
          "type": "number",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "resolveSourceMapLocations": {
          "default": null,
          "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
          "items": {
            "type": "string"
          },
          "type": [
            "array",
            "null"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "restart": {
          "default": false,
          "markdownDescription": "Whether to reconnect if the browser connection is closed",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "server": {
          "oneOf": [
            {
              "additionalProperties": false,
              "default": {
                "program": "node my-server.js"
              },
              "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
              "properties": {
                "args": {
                  "default": [],
                  "description": "Command line arguments passed to the program.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "attachSimplePort": {
                  "default": 9229,
                  "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                  "type": "integer"
                },
                "autoAttachChildProcesses": {
                  "default": true,
                  "description": "Attach debugger to new child processes automatically.",
                  "type": "boolean"
                },
                "cascadeTerminateToConfigurations": {
                  "default": [],
                  "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                  "items": {
                    "type": "string",
                    "uniqueItems": true
                  },
                  "type": "array"
                },
                "console": {
                  "default": "internalConsole",
                  "description": "Where to launch the debug target.",
                  "enum": [
                    "internalConsole",
                    "integratedTerminal",
                    "externalTerminal"
                  ],
                  "enumDescriptions": [
                    "VS Code Debug Console (which doesn't support to read input from a program)",
                    "VS Code's integrated terminal",
                    "External terminal that can be configured via user settings"
                  ],
                  "type": "string"
                },
                "customDescriptionGenerator": {
                  "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                  "type": "string"
                },
                "customPropertiesGenerator": {
                  "deprecated": true,
                  "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                  "type": "string"
                },
                "cwd": {
                  "default": "${workspaceFolder}",
                  "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                  "type": "string"
                },
                "enableContentValidation": {
                  "default": true,
                  "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                  "type": "boolean"
                },
                "env": {
                  "additionalProperties": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "default": {},
                  "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                  "type": "object"
                },
                "envFile": {
                  "default": "${workspaceFolder}/.env",
                  "description": "Absolute path to a file containing environment variable definitions.",
                  "type": "string"
                },
                "killBehavior": {
                  "default": "forceful",
                  "enum": [
                    "forceful",
                    "polite",
                    "none"
                  ],
                  "markdownDescription": "Configures how debug processes are killed when stopping the session. Can be:\n\n- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.\n- polite: gracefully tears down the process tree. It's possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.\n- none: no termination will happen.",
                  "type": "string"
                },
                "localRoot": {
                  "default": null,
                  "description": "Path to the local directory containing the program.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "nodeVersionHint": {
                  "default": 12,
                  "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                  "minimum": 8,
                  "type": "number"
                },
                "outFiles": {
                  "default": [
                    "${workspaceFolder}/**/*.js",
                    "!**/node_modules/**"
                  ],
                  "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                  "items": {
                    "type": "string"
                  },
                  "type": [
                    "array"
                  ]
                },
                "outputCapture": {
                  "default": "console",
                  "enum": [
                    "console",
                    "std"
                  ],
                  "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                },
                "pauseForSourceMap": {
                  "default": false,
                  "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                  "type": "boolean"
                },
                "profileStartup": {
                  "default": true,
                  "description": "If true, will start profiling as soon as the process launches",
                  "type": "boolean"
                },
                "program": {
                  "default": "",
                  "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                  "type": "string"
                },
                "remoteRoot": {
                  "default": null,
                  "description": "Absolute path to the remote directory containing the program.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "resolveSourceMapLocations": {
                  "default": [
                    "${workspaceFolder}/**",
                    "!**/node_modules/**"
                  ],
                  "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                  "items": {
                    "type": "string"
                  },
                  "type": [
                    "array",
                    "null"
                  ]
                },
                "restart": {
                  "default": true,
                  "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                  "oneOf": [
                    {
                      "type": "boolean"
                    },
                    {
                      "properties": {
                        "delay": {
                          "default": 1000,
                          "minimum": 0,
                          "type": "number"
                        },
                        "maxAttempts": {
                          "default": 10,
                          "minimum": 0,
                          "type": "number"
                        }
                      },
                      "type": "object"
                    }
                  ]
                },
                "runtimeArgs": {
                  "default": [],
                  "description": "Optional arguments passed to the runtime executable.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "runtimeExecutable": {
                  "default": "node",
                  "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "runtimeSourcemapPausePatterns": {
                  "default": [],
                  "items": {
                    "type": "string"
                  },
                  "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                  "type": "array"
                },
                "runtimeVersion": {
                  "default": "default",
                  "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                  "type": "string"
                },
                "showAsyncStacks": {
                  "default": true,
                  "description": "Show the async calls that led to the current call stack.",
                  "oneOf": [
                    {
                      "type": "boolean"
                    },
                    {
                      "properties": {
                        "onAttach": {
                          "default": 32,
                          "type": "number"
                        }
                      },
                      "required": [
                        "onAttach"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "onceBreakpointResolved": {
                          "default": 32,
                          "type": "number"
                        }
                      },
                      "required": [
                        "onceBreakpointResolved"
                      ],
                      "type": "object"
                    }
                  ]
                },
                "skipFiles": {
                  "default": [
                    "<node_internals>/**"
                  ],
                  "description": "An array of file or folder names, or path globs, to skip when debugging.",
                  "type": "array"
                },
                "smartStep": {
                  "default": true,
                  "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                  "type": "boolean"
                },
                "sourceMapPathOverrides": {
                  "default": {
                    "meteor://💻app/*": "${workspaceFolder}/*",
                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                    "webpack://?:*/*": "${workspaceFolder}/*"
                  },
                  "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                  "type": "object"
                },
                "sourceMapRenames": {
                  "default": true,
                  "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                  "type": "boolean"
                },
                "sourceMaps": {
                  "default": true,
                  "description": "Use JavaScript source maps (if they exist).",
                  "type": "boolean"
                },
                "stopOnEntry": {
                  "default": true,
                  "description": "Automatically stop program after launch.",
                  "type": [
                    "boolean",
                    "string"
                  ]
                },
                "timeout": {
                  "default": 10000,
                  "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                  "type": "number"
                },
                "timeouts": {
                  "additionalProperties": false,
                  "default": {},
                  "description": "Timeouts for several debugger operations.",
                  "markdownDescription": "Timeouts for several debugger operations.",
                  "properties": {
                    "sourceMapCumulativePause": {
                      "default": 1000,
                      "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                      "type": "number"
                    },
                    "sourceMapMinPause": {
                      "default": 1000,
                      "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                      "type": "number"
                    }
                  },
                  "type": "object"
                },
                "trace": {
                  "default": true,
                  "description": "Configures what diagnostic output is produced.",
                  "oneOf": [
                    {
                      "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                      "type": "boolean"
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "console": {
                          "description": "Whether to return trace data from the launched application or browser.",
                          "type": "boolean"
                        },
                        "level": {
                          "description": "Configures the level of logs recorded.",
                          "enum": [
                            "fatal",
                            "error",
                            "warn",
                            "info",
                            "verbose"
                          ]
                        },
                        "logFile": {
                          "description": "Configures where on disk logs are written.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "stdio": {
                          "description": "Configures whether logs are also returned to the debug console.",
                          "type": "boolean"
                        },
                        "tags": {
                          "description": "Configures what types of logs are recorded.",
                          "items": {
                            "enum": [
                              "cdp",
                              "dap",
                              "runtime"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              },
              "type": "object"
            },
            {
              "additionalProperties": false,
              "default": {
                "program": "npm start"
              },
              "description": "JavaScript Debug Terminal",
              "properties": {
                "autoAttachChildProcesses": {
                  "default": true,
                  "description": "Attach debugger to new child processes automatically.",
                  "type": "boolean"
                },
                "cascadeTerminateToConfigurations": {
                  "default": [],
                  "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                  "items": {
                    "type": "string",
                    "uniqueItems": true
                  },
                  "type": "array"
                },
                "command": {
                  "default": "npm start",
                  "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "customDescriptionGenerator": {
                  "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                  "type": "string"
                },
                "customPropertiesGenerator": {
                  "deprecated": true,
                  "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                  "type": "string"
                },
                "cwd": {
                  "default": "${workspaceFolder}",
                  "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                  "docDefault": "localRoot || ${workspaceFolder}",
                  "type": "string"
                },
                "enableContentValidation": {
                  "default": true,
                  "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                  "type": "boolean"
                },
                "env": {
                  "additionalProperties": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "default": {},
                  "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                  "type": "object"
                },
                "envFile": {
                  "default": "${workspaceFolder}/.env",
                  "description": "Absolute path to a file containing environment variable definitions.",
                  "type": "string"
                },
                "localRoot": {
                  "default": null,
                  "description": "Path to the local directory containing the program.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "nodeVersionHint": {
                  "default": 12,
                  "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                  "minimum": 8,
                  "type": "number"
                },
                "outFiles": {
                  "default": [
                    "${workspaceFolder}/**/*.js",
                    "!**/node_modules/**"
                  ],
                  "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                  "items": {
                    "type": "string"
                  },
                  "type": [
                    "array"
                  ]
                },
                "outputCapture": {
                  "default": "console",
                  "enum": [
                    "console",
                    "std"
                  ],
                  "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                },
                "pauseForSourceMap": {
                  "default": false,
                  "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                  "type": "boolean"
                },
                "remoteRoot": {
                  "default": null,
                  "description": "Absolute path to the remote directory containing the program.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "resolveSourceMapLocations": {
                  "default": [
                    "${workspaceFolder}/**",
                    "!**/node_modules/**"
                  ],
                  "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                  "items": {
                    "type": "string"
                  },
                  "type": [
                    "array",
                    "null"
                  ]
                },
                "runtimeSourcemapPausePatterns": {
                  "default": [],
                  "items": {
                    "type": "string"
                  },
                  "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                  "type": "array"
                },
                "showAsyncStacks": {
                  "default": true,
                  "description": "Show the async calls that led to the current call stack.",
                  "oneOf": [
                    {
                      "type": "boolean"
                    },
                    {
                      "properties": {
                        "onAttach": {
                          "default": 32,
                          "type": "number"
                        }
                      },
                      "required": [
                        "onAttach"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "onceBreakpointResolved": {
                          "default": 32,
                          "type": "number"
                        }
                      },
                      "required": [
                        "onceBreakpointResolved"
                      ],
                      "type": "object"
                    }
                  ]
                },
                "skipFiles": {
                  "default": [
                    "<node_internals>/**"
                  ],
                  "description": "An array of file or folder names, or path globs, to skip when debugging.",
                  "type": "array"
                },
                "smartStep": {
                  "default": true,
                  "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                  "type": "boolean"
                },
                "sourceMapPathOverrides": {
                  "default": {
                    "meteor://💻app/*": "${workspaceFolder}/*",
                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                    "webpack://?:*/*": "${workspaceFolder}/*"
                  },
                  "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                  "type": "object"
                },
                "sourceMapRenames": {
                  "default": true,
                  "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                  "type": "boolean"
                },
                "sourceMaps": {
                  "default": true,
                  "description": "Use JavaScript source maps (if they exist).",
                  "type": "boolean"
                },
                "timeout": {
                  "default": 10000,
                  "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                  "type": "number"
                },
                "timeouts": {
                  "additionalProperties": false,
                  "default": {},
                  "description": "Timeouts for several debugger operations.",
                  "markdownDescription": "Timeouts for several debugger operations.",
                  "properties": {
                    "sourceMapCumulativePause": {
                      "default": 1000,
                      "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                      "type": "number"
                    },
                    "sourceMapMinPause": {
                      "default": 1000,
                      "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                      "type": "number"
                    }
                  },
                  "type": "object"
                },
                "trace": {
                  "default": true,
                  "description": "Configures what diagnostic output is produced.",
                  "oneOf": [
                    {
                      "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                      "type": "boolean"
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "console": {
                          "description": "Whether to return trace data from the launched application or browser.",
                          "type": "boolean"
                        },
                        "level": {
                          "description": "Configures the level of logs recorded.",
                          "enum": [
                            "fatal",
                            "error",
                            "warn",
                            "info",
                            "verbose"
                          ]
                        },
                        "logFile": {
                          "description": "Configures where on disk logs are written.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "stdio": {
                          "description": "Configures whether logs are also returned to the debug console.",
                          "type": "boolean"
                        },
                        "tags": {
                          "description": "Configures what types of logs are recorded.",
                          "items": {
                            "enum": [
                              "cdp",
                              "dap",
                              "runtime"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              },
              "type": "object"
            }
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "showAsyncStacks": {
          "default": true,
          "description": "Show the async calls that led to the current call stack.",
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "properties": {
                "onAttach": {
                  "default": 32,
                  "type": "number"
                }
              },
              "required": [
                "onAttach"
              ],
              "type": "object"
            },
            {
              "properties": {
                "onceBreakpointResolved": {
                  "default": 32,
                  "type": "number"
                }
              },
              "required": [
                "onceBreakpointResolved"
              ],
              "type": "object"
            }
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "skipFiles": {
          "default": [
            "<node_internals>/**"
          ],
          "description": "An array of file or folder names, or path globs, to skip when debugging.",
          "type": "array",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "smartStep": {
          "default": true,
          "description": "Automatically step through generated code that cannot be mapped back to the original source.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "sourceMapPathOverrides": {
          "default": {
            "meteor://💻app/*": "${workspaceFolder}/*",
            "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
            "webpack://?:*/*": "${workspaceFolder}/*"
          },
          "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
          "type": "object",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "sourceMapRenames": {
          "default": true,
          "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "sourceMaps": {
          "default": true,
          "description": "Use JavaScript source maps (if they exist).",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "targetSelection": {
          "default": "automatic",
          "enum": [
            "pick",
            "automatic"
          ],
          "markdownDescription": "Whether to attach to all targets that match the URL filter (\"automatic\") or ask to pick one (\"pick\").",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "timeout": {
          "default": 10000,
          "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
          "type": "number",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "timeouts": {
          "additionalProperties": false,
          "default": {},
          "description": "Timeouts for several debugger operations.",
          "markdownDescription": "Timeouts for several debugger operations.",
          "properties": {
            "sourceMapCumulativePause": {
              "default": 1000,
              "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
              "type": "number"
            },
            "sourceMapMinPause": {
              "default": 1000,
              "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
              "type": "number"
            }
          },
          "type": "object",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "trace": {
          "default": true,
          "description": "Configures what diagnostic output is produced.",
          "oneOf": [
            {
              "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
              "type": "boolean"
            },
            {
              "additionalProperties": false,
              "properties": {
                "console": {
                  "description": "Whether to return trace data from the launched application or browser.",
                  "type": "boolean"
                },
                "level": {
                  "description": "Configures the level of logs recorded.",
                  "enum": [
                    "fatal",
                    "error",
                    "warn",
                    "info",
                    "verbose"
                  ]
                },
                "logFile": {
                  "description": "Configures where on disk logs are written.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "stdio": {
                  "description": "Configures whether logs are also returned to the debug console.",
                  "type": "boolean"
                },
                "tags": {
                  "description": "Configures what types of logs are recorded.",
                  "items": {
                    "enum": [
                      "cdp",
                      "dap",
                      "runtime"
                    ]
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "url": {
          "default": "http://localhost:8080",
          "description": "Will search for a tab with this exact url and attach to it, if found",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "urlFilter": {
          "default": "",
          "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "useWebView": {
          "default": false,
          "description": "(Edge (Chromium) only) When 'true', the debugger will treat the runtime executable as a host application that contains a WebView allowing you to debug the WebView script content.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "vueComponentPaths": {
          "default": [
            "${workspaceFolder}/**/*.vue"
          ],
          "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
          "type": "array",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "webRoot": {
          "default": "${workspaceFolder}",
          "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "type": {
          "enum": [
            "msedge"
          ],
          "description": "Type of configuration.",
          "pattern": "^(?!node2)",
          "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
          "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
        },
        "request": {
          "enum": [
            "attach"
          ],
          "description": "Request type of configuration. Can be \"launch\" or \"attach\".",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "name": {
          "$ref": "#/definitions/common/properties/name",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "debugServer": {
          "$ref": "#/definitions/common/properties/debugServer",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "preLaunchTask": {
          "$ref": "#/definitions/common/properties/preLaunchTask",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "postDebugTask": {
          "$ref": "#/definitions/common/properties/postDebugTask",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "presentation": {
          "$ref": "#/definitions/common/properties/presentation",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "internalConsoleOptions": {
          "$ref": "#/definitions/common/properties/internalConsoleOptions",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        }
      },
      "required": [
        "name",
        "type",
        "request",
        "name",
        "type",
        "request",
        "name",
        "type",
        "request"
      ],
      "type": "object"
    },
    "msedge:launch": {
      "properties": {
        "address": {
          "default": "localhost",
          "description": "When debugging webviews, the IP address or hostname the webview is listening on. Will be automatically discovered if not set.",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "browserLaunchLocation": {
          "default": null,
          "description": "Forces the browser to be launched in one location. In a remote workspace (through ssh or WSL, for example) this can be used to open the browser on the remote machine rather than locally.",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "enum": [
                "ui",
                "workspace"
              ],
              "type": "string"
            }
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "cascadeTerminateToConfigurations": {
          "default": [],
          "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
          "items": {
            "type": "string",
            "uniqueItems": true
          },
          "type": "array",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "cleanUp": {
          "default": "wholeBrowser",
          "description": "What clean-up to do after the debugging session finishes. Close only the tab being debug, vs. close the whole browser.",
          "enum": [
            "wholeBrowser",
            "onlyTab"
          ],
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "customDescriptionGenerator": {
          "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "customPropertiesGenerator": {
          "deprecated": true,
          "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "cwd": {
          "default": null,
          "description": "Optional working directory for the runtime executable.",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "disableNetworkCache": {
          "default": true,
          "description": "Controls whether to skip the network cache for each request",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "enableContentValidation": {
          "default": true,
          "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "env": {
          "default": {},
          "description": "Optional dictionary of environment key/value pairs for the browser.",
          "type": "object",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "file": {
          "default": "${workspaceFolder}/index.html",
          "description": "A local html file to open in the browser",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "includeDefaultArgs": {
          "default": true,
          "description": "Whether default browser launch arguments (to disable features that may make debugging harder) will be included in the launch.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "inspectUri": {
          "default": null,
          "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `browserInspectUriPath` is the path part of the inspector URI on the launched browser (e.g.: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\").\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
          "type": [
            "string",
            "null"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "outFiles": {
          "default": [
            "${workspaceFolder}/**/*.js",
            "!**/node_modules/**"
          ],
          "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
          "items": {
            "type": "string"
          },
          "type": [
            "array"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "outputCapture": {
          "default": "console",
          "enum": [
            "console",
            "std"
          ],
          "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "pathMapping": {
          "default": {},
          "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
          "type": "object",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "pauseForSourceMap": {
          "default": false,
          "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "perScriptSourcemaps": {
          "default": "auto",
          "description": "Whether scripts are loaded individually with unique sourcemaps containing the basename of the source file. This can be set to optimize sourcemap handling when dealing with lots of small scripts. If set to \"auto\", we'll detect known cases where this is appropriate.",
          "enum": [
            "yes",
            "no",
            "auto"
          ],
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "port": {
          "default": 9229,
          "description": "When debugging webviews, the port the webview debugger is listening on. Will be automatically discovered if not set.",
          "type": "number",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "profileStartup": {
          "default": true,
          "description": "If true, will start profiling soon as the process launches",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "resolveSourceMapLocations": {
          "default": null,
          "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
          "items": {
            "type": "string"
          },
          "type": [
            "array",
            "null"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "runtimeArgs": {
          "default": [],
          "description": "Optional arguments passed to the runtime executable.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "runtimeExecutable": {
          "default": "stable",
          "description": "Either 'canary', 'stable', 'dev', 'custom' or path to the browser executable. Custom means a custom wrapper, custom build or EDGE_PATH environment variable.",
          "type": [
            "string",
            "null"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "server": {
          "oneOf": [
            {
              "additionalProperties": false,
              "default": {
                "program": "node my-server.js"
              },
              "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
              "properties": {
                "args": {
                  "default": [],
                  "description": "Command line arguments passed to the program.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "attachSimplePort": {
                  "default": 9229,
                  "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                  "type": "integer"
                },
                "autoAttachChildProcesses": {
                  "default": true,
                  "description": "Attach debugger to new child processes automatically.",
                  "type": "boolean"
                },
                "cascadeTerminateToConfigurations": {
                  "default": [],
                  "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                  "items": {
                    "type": "string",
                    "uniqueItems": true
                  },
                  "type": "array"
                },
                "console": {
                  "default": "internalConsole",
                  "description": "Where to launch the debug target.",
                  "enum": [
                    "internalConsole",
                    "integratedTerminal",
                    "externalTerminal"
                  ],
                  "enumDescriptions": [
                    "VS Code Debug Console (which doesn't support to read input from a program)",
                    "VS Code's integrated terminal",
                    "External terminal that can be configured via user settings"
                  ],
                  "type": "string"
                },
                "customDescriptionGenerator": {
                  "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                  "type": "string"
                },
                "customPropertiesGenerator": {
                  "deprecated": true,
                  "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                  "type": "string"
                },
                "cwd": {
                  "default": "${workspaceFolder}",
                  "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                  "type": "string"
                },
                "enableContentValidation": {
                  "default": true,
                  "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                  "type": "boolean"
                },
                "env": {
                  "additionalProperties": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "default": {},
                  "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                  "type": "object"
                },
                "envFile": {
                  "default": "${workspaceFolder}/.env",
                  "description": "Absolute path to a file containing environment variable definitions.",
                  "type": "string"
                },
                "killBehavior": {
                  "default": "forceful",
                  "enum": [
                    "forceful",
                    "polite",
                    "none"
                  ],
                  "markdownDescription": "Configures how debug processes are killed when stopping the session. Can be:\n\n- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.\n- polite: gracefully tears down the process tree. It's possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.\n- none: no termination will happen.",
                  "type": "string"
                },
                "localRoot": {
                  "default": null,
                  "description": "Path to the local directory containing the program.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "nodeVersionHint": {
                  "default": 12,
                  "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                  "minimum": 8,
                  "type": "number"
                },
                "outFiles": {
                  "default": [
                    "${workspaceFolder}/**/*.js",
                    "!**/node_modules/**"
                  ],
                  "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                  "items": {
                    "type": "string"
                  },
                  "type": [
                    "array"
                  ]
                },
                "outputCapture": {
                  "default": "console",
                  "enum": [
                    "console",
                    "std"
                  ],
                  "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                },
                "pauseForSourceMap": {
                  "default": false,
                  "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                  "type": "boolean"
                },
                "profileStartup": {
                  "default": true,
                  "description": "If true, will start profiling as soon as the process launches",
                  "type": "boolean"
                },
                "program": {
                  "default": "",
                  "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                  "type": "string"
                },
                "remoteRoot": {
                  "default": null,
                  "description": "Absolute path to the remote directory containing the program.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "resolveSourceMapLocations": {
                  "default": [
                    "${workspaceFolder}/**",
                    "!**/node_modules/**"
                  ],
                  "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                  "items": {
                    "type": "string"
                  },
                  "type": [
                    "array",
                    "null"
                  ]
                },
                "restart": {
                  "default": true,
                  "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                  "oneOf": [
                    {
                      "type": "boolean"
                    },
                    {
                      "properties": {
                        "delay": {
                          "default": 1000,
                          "minimum": 0,
                          "type": "number"
                        },
                        "maxAttempts": {
                          "default": 10,
                          "minimum": 0,
                          "type": "number"
                        }
                      },
                      "type": "object"
                    }
                  ]
                },
                "runtimeArgs": {
                  "default": [],
                  "description": "Optional arguments passed to the runtime executable.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "runtimeExecutable": {
                  "default": "node",
                  "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "runtimeSourcemapPausePatterns": {
                  "default": [],
                  "items": {
                    "type": "string"
                  },
                  "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                  "type": "array"
                },
                "runtimeVersion": {
                  "default": "default",
                  "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                  "type": "string"
                },
                "showAsyncStacks": {
                  "default": true,
                  "description": "Show the async calls that led to the current call stack.",
                  "oneOf": [
                    {
                      "type": "boolean"
                    },
                    {
                      "properties": {
                        "onAttach": {
                          "default": 32,
                          "type": "number"
                        }
                      },
                      "required": [
                        "onAttach"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "onceBreakpointResolved": {
                          "default": 32,
                          "type": "number"
                        }
                      },
                      "required": [
                        "onceBreakpointResolved"
                      ],
                      "type": "object"
                    }
                  ]
                },
                "skipFiles": {
                  "default": [
                    "<node_internals>/**"
                  ],
                  "description": "An array of file or folder names, or path globs, to skip when debugging.",
                  "type": "array"
                },
                "smartStep": {
                  "default": true,
                  "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                  "type": "boolean"
                },
                "sourceMapPathOverrides": {
                  "default": {
                    "meteor://💻app/*": "${workspaceFolder}/*",
                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                    "webpack://?:*/*": "${workspaceFolder}/*"
                  },
                  "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                  "type": "object"
                },
                "sourceMapRenames": {
                  "default": true,
                  "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                  "type": "boolean"
                },
                "sourceMaps": {
                  "default": true,
                  "description": "Use JavaScript source maps (if they exist).",
                  "type": "boolean"
                },
                "stopOnEntry": {
                  "default": true,
                  "description": "Automatically stop program after launch.",
                  "type": [
                    "boolean",
                    "string"
                  ]
                },
                "timeout": {
                  "default": 10000,
                  "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                  "type": "number"
                },
                "timeouts": {
                  "additionalProperties": false,
                  "default": {},
                  "description": "Timeouts for several debugger operations.",
                  "markdownDescription": "Timeouts for several debugger operations.",
                  "properties": {
                    "sourceMapCumulativePause": {
                      "default": 1000,
                      "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                      "type": "number"
                    },
                    "sourceMapMinPause": {
                      "default": 1000,
                      "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                      "type": "number"
                    }
                  },
                  "type": "object"
                },
                "trace": {
                  "default": true,
                  "description": "Configures what diagnostic output is produced.",
                  "oneOf": [
                    {
                      "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                      "type": "boolean"
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "console": {
                          "description": "Whether to return trace data from the launched application or browser.",
                          "type": "boolean"
                        },
                        "level": {
                          "description": "Configures the level of logs recorded.",
                          "enum": [
                            "fatal",
                            "error",
                            "warn",
                            "info",
                            "verbose"
                          ]
                        },
                        "logFile": {
                          "description": "Configures where on disk logs are written.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "stdio": {
                          "description": "Configures whether logs are also returned to the debug console.",
                          "type": "boolean"
                        },
                        "tags": {
                          "description": "Configures what types of logs are recorded.",
                          "items": {
                            "enum": [
                              "cdp",
                              "dap",
                              "runtime"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              },
              "type": "object"
            },
            {
              "additionalProperties": false,
              "default": {
                "program": "npm start"
              },
              "description": "JavaScript Debug Terminal",
              "properties": {
                "autoAttachChildProcesses": {
                  "default": true,
                  "description": "Attach debugger to new child processes automatically.",
                  "type": "boolean"
                },
                "cascadeTerminateToConfigurations": {
                  "default": [],
                  "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                  "items": {
                    "type": "string",
                    "uniqueItems": true
                  },
                  "type": "array"
                },
                "command": {
                  "default": "npm start",
                  "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "customDescriptionGenerator": {
                  "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                  "type": "string"
                },
                "customPropertiesGenerator": {
                  "deprecated": true,
                  "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                  "type": "string"
                },
                "cwd": {
                  "default": "${workspaceFolder}",
                  "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                  "docDefault": "localRoot || ${workspaceFolder}",
                  "type": "string"
                },
                "enableContentValidation": {
                  "default": true,
                  "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                  "type": "boolean"
                },
                "env": {
                  "additionalProperties": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "default": {},
                  "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                  "type": "object"
                },
                "envFile": {
                  "default": "${workspaceFolder}/.env",
                  "description": "Absolute path to a file containing environment variable definitions.",
                  "type": "string"
                },
                "localRoot": {
                  "default": null,
                  "description": "Path to the local directory containing the program.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "nodeVersionHint": {
                  "default": 12,
                  "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                  "minimum": 8,
                  "type": "number"
                },
                "outFiles": {
                  "default": [
                    "${workspaceFolder}/**/*.js",
                    "!**/node_modules/**"
                  ],
                  "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                  "items": {
                    "type": "string"
                  },
                  "type": [
                    "array"
                  ]
                },
                "outputCapture": {
                  "default": "console",
                  "enum": [
                    "console",
                    "std"
                  ],
                  "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                },
                "pauseForSourceMap": {
                  "default": false,
                  "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                  "type": "boolean"
                },
                "remoteRoot": {
                  "default": null,
                  "description": "Absolute path to the remote directory containing the program.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "resolveSourceMapLocations": {
                  "default": [
                    "${workspaceFolder}/**",
                    "!**/node_modules/**"
                  ],
                  "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                  "items": {
                    "type": "string"
                  },
                  "type": [
                    "array",
                    "null"
                  ]
                },
                "runtimeSourcemapPausePatterns": {
                  "default": [],
                  "items": {
                    "type": "string"
                  },
                  "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                  "type": "array"
                },
                "showAsyncStacks": {
                  "default": true,
                  "description": "Show the async calls that led to the current call stack.",
                  "oneOf": [
                    {
                      "type": "boolean"
                    },
                    {
                      "properties": {
                        "onAttach": {
                          "default": 32,
                          "type": "number"
                        }
                      },
                      "required": [
                        "onAttach"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "onceBreakpointResolved": {
                          "default": 32,
                          "type": "number"
                        }
                      },
                      "required": [
                        "onceBreakpointResolved"
                      ],
                      "type": "object"
                    }
                  ]
                },
                "skipFiles": {
                  "default": [
                    "<node_internals>/**"
                  ],
                  "description": "An array of file or folder names, or path globs, to skip when debugging.",
                  "type": "array"
                },
                "smartStep": {
                  "default": true,
                  "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                  "type": "boolean"
                },
                "sourceMapPathOverrides": {
                  "default": {
                    "meteor://💻app/*": "${workspaceFolder}/*",
                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                    "webpack://?:*/*": "${workspaceFolder}/*"
                  },
                  "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                  "type": "object"
                },
                "sourceMapRenames": {
                  "default": true,
                  "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                  "type": "boolean"
                },
                "sourceMaps": {
                  "default": true,
                  "description": "Use JavaScript source maps (if they exist).",
                  "type": "boolean"
                },
                "timeout": {
                  "default": 10000,
                  "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                  "type": "number"
                },
                "timeouts": {
                  "additionalProperties": false,
                  "default": {},
                  "description": "Timeouts for several debugger operations.",
                  "markdownDescription": "Timeouts for several debugger operations.",
                  "properties": {
                    "sourceMapCumulativePause": {
                      "default": 1000,
                      "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                      "type": "number"
                    },
                    "sourceMapMinPause": {
                      "default": 1000,
                      "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                      "type": "number"
                    }
                  },
                  "type": "object"
                },
                "trace": {
                  "default": true,
                  "description": "Configures what diagnostic output is produced.",
                  "oneOf": [
                    {
                      "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                      "type": "boolean"
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "console": {
                          "description": "Whether to return trace data from the launched application or browser.",
                          "type": "boolean"
                        },
                        "level": {
                          "description": "Configures the level of logs recorded.",
                          "enum": [
                            "fatal",
                            "error",
                            "warn",
                            "info",
                            "verbose"
                          ]
                        },
                        "logFile": {
                          "description": "Configures where on disk logs are written.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "stdio": {
                          "description": "Configures whether logs are also returned to the debug console.",
                          "type": "boolean"
                        },
                        "tags": {
                          "description": "Configures what types of logs are recorded.",
                          "items": {
                            "enum": [
                              "cdp",
                              "dap",
                              "runtime"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              },
              "type": "object"
            }
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "showAsyncStacks": {
          "default": true,
          "description": "Show the async calls that led to the current call stack.",
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "properties": {
                "onAttach": {
                  "default": 32,
                  "type": "number"
                }
              },
              "required": [
                "onAttach"
              ],
              "type": "object"
            },
            {
              "properties": {
                "onceBreakpointResolved": {
                  "default": 32,
                  "type": "number"
                }
              },
              "required": [
                "onceBreakpointResolved"
              ],
              "type": "object"
            }
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "skipFiles": {
          "default": [
            "<node_internals>/**"
          ],
          "description": "An array of file or folder names, or path globs, to skip when debugging.",
          "type": "array",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "smartStep": {
          "default": true,
          "description": "Automatically step through generated code that cannot be mapped back to the original source.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "sourceMapPathOverrides": {
          "default": {
            "meteor://💻app/*": "${workspaceFolder}/*",
            "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
            "webpack://?:*/*": "${workspaceFolder}/*"
          },
          "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
          "type": "object",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "sourceMapRenames": {
          "default": true,
          "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "sourceMaps": {
          "default": true,
          "description": "Use JavaScript source maps (if they exist).",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "timeout": {
          "default": 10000,
          "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
          "type": "number",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "timeouts": {
          "additionalProperties": false,
          "default": {},
          "description": "Timeouts for several debugger operations.",
          "markdownDescription": "Timeouts for several debugger operations.",
          "properties": {
            "sourceMapCumulativePause": {
              "default": 1000,
              "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
              "type": "number"
            },
            "sourceMapMinPause": {
              "default": 1000,
              "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
              "type": "number"
            }
          },
          "type": "object",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "trace": {
          "default": true,
          "description": "Configures what diagnostic output is produced.",
          "oneOf": [
            {
              "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
              "type": "boolean"
            },
            {
              "additionalProperties": false,
              "properties": {
                "console": {
                  "description": "Whether to return trace data from the launched application or browser.",
                  "type": "boolean"
                },
                "level": {
                  "description": "Configures the level of logs recorded.",
                  "enum": [
                    "fatal",
                    "error",
                    "warn",
                    "info",
                    "verbose"
                  ]
                },
                "logFile": {
                  "description": "Configures where on disk logs are written.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "stdio": {
                  "description": "Configures whether logs are also returned to the debug console.",
                  "type": "boolean"
                },
                "tags": {
                  "description": "Configures what types of logs are recorded.",
                  "items": {
                    "enum": [
                      "cdp",
                      "dap",
                      "runtime"
                    ]
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "url": {
          "default": "http://localhost:8080",
          "description": "Will search for a tab with this exact url and attach to it, if found",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "urlFilter": {
          "default": "",
          "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "useWebView": {
          "default": false,
          "description": "(Edge (Chromium) only) When 'true', the debugger will treat the runtime executable as a host application that contains a WebView allowing you to debug the WebView script content.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "userDataDir": {
          "default": true,
          "description": "By default, the browser is launched with a separate user profile in a temp folder. Use this option to override it. Set to false to launch with your default user profile. A new browser can't be launched if an instance is already running from `userDataDir`.",
          "type": [
            "string",
            "boolean"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "vueComponentPaths": {
          "default": [
            "${workspaceFolder}/**/*.vue"
          ],
          "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
          "type": "array",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "webRoot": {
          "default": "${workspaceFolder}",
          "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "serverReadyAction": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": false,
              "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
              "default": {
                "action": "openExternally"
              },
              "properties": {
                "action": {
                  "type": "string",
                  "enum": [
                    "openExternally"
                  ],
                  "enumDescriptions": [
                    "Open URI externally with the default application."
                  ],
                  "markdownDescription": "What to do with the URI when the server is ready.",
                  "default": "openExternally"
                },
                "pattern": {
                  "type": "string",
                  "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                  "default": "listening on port ([0-9]+)"
                },
                "uriFormat": {
                  "type": "string",
                  "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                  "default": "http://localhost:%s"
                }
              }
            },
            {
              "type": "object",
              "additionalProperties": false,
              "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
              "default": {
                "action": "debugWithEdge",
                "pattern": "listening on port ([0-9]+)",
                "uriFormat": "http://localhost:%s",
                "webRoot": "${workspaceFolder}"
              },
              "properties": {
                "action": {
                  "type": "string",
                  "enum": [
                    "debugWithChrome",
                    "debugWithEdge"
                  ],
                  "enumDescriptions": [
                    "Start debugging with the 'Debugger for Chrome'."
                  ],
                  "markdownDescription": "What to do with the URI when the server is ready.",
                  "default": "debugWithEdge"
                },
                "pattern": {
                  "type": "string",
                  "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                  "default": "listening on port ([0-9]+)"
                },
                "uriFormat": {
                  "type": "string",
                  "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                  "default": "http://localhost:%s"
                },
                "webRoot": {
                  "type": "string",
                  "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                  "default": "${workspaceFolder}"
                }
              }
            },
            {
              "type": "object",
              "additionalProperties": false,
              "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
              "default": {
                "action": "startDebugging",
                "name": "<launch browser config name>"
              },
              "required": [
                "name"
              ],
              "properties": {
                "action": {
                  "type": "string",
                  "enum": [
                    "startDebugging"
                  ],
                  "enumDescriptions": [
                    "Run another launch configuration."
                  ],
                  "markdownDescription": "What to do with the URI when the server is ready.",
                  "default": "startDebugging"
                },
                "pattern": {
                  "type": "string",
                  "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                  "default": "listening on port ([0-9]+)"
                },
                "name": {
                  "type": "string",
                  "markdownDescription": "Name of the launch configuration to run.",
                  "default": "Launch Browser"
                }
              }
            }
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "type": {
          "enum": [
            "msedge"
          ],
          "description": "Type of configuration.",
          "pattern": "^(?!node2)",
          "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
          "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
        },
        "request": {
          "enum": [
            "launch"
          ],
          "description": "Request type of configuration. Can be \"launch\" or \"attach\".",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "name": {
          "$ref": "#/definitions/common/properties/name",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "debugServer": {
          "$ref": "#/definitions/common/properties/debugServer",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "preLaunchTask": {
          "$ref": "#/definitions/common/properties/preLaunchTask",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "postDebugTask": {
          "$ref": "#/definitions/common/properties/postDebugTask",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "presentation": {
          "$ref": "#/definitions/common/properties/presentation",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "internalConsoleOptions": {
          "$ref": "#/definitions/common/properties/internalConsoleOptions",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        }
      },
      "required": [
        "name",
        "type",
        "request",
        "name",
        "type",
        "request",
        "name",
        "type",
        "request"
      ],
      "type": "object"
    },
    "go:launch": {
      "required": [
        "name",
        "type",
        "request",
        "name",
        "type",
        "request",
        "name",
        "type",
        "request"
      ],
      "properties": {
        "debugAdapter": {
          "enum": [
            "legacy",
            "dlv-dap"
          ],
          "description": "Select which debug adapter to use with this launch configuration.",
          "default": "dlv-dap",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "program": {
          "type": "string",
          "description": "Path to the program folder (or any go file within that folder) when in `debug` or `test` mode, and to the pre-built binary file to debug in `exec` mode. If it is not an absolute path, the extension interpretes it as a workspace relative path.",
          "default": "${workspaceFolder}",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "mode": {
          "enum": [
            "auto",
            "debug",
            "test",
            "exec",
            "replay",
            "core"
          ],
          "description": "One of `auto`, `debug`, `test`, `exec`, `replay`, `core`. In `auto` mode, the extension will choose either `debug` or `test` depending on active editor window.",
          "default": "auto",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "traceDirPath": {
          "type": "string",
          "description": "Directory in which the record trace is located or to be created for a new output trace. For use on 'replay' mode only",
          "default": "",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "coreFilePath": {
          "type": "string",
          "description": "Path to the core dump file to open. For use on 'core' mode only",
          "default": "",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "stopOnEntry": {
          "type": "boolean",
          "description": "Automatically stop program after launch.",
          "default": false,
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "args": {
          "type": "array",
          "description": "Command line arguments passed to the debugged program.",
          "items": {
            "type": "string"
          },
          "default": [],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "showLog": {
          "type": "boolean",
          "description": "Show log output from the delve debugger. Maps to dlv's `--log` flag.",
          "default": false,
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "cwd": {
          "type": "string",
          "description": "Workspace relative or absolute path to the working directory of the program being debugged if a non-empty value is specified. The `program` folder is used as the working directory if `cwd` is omitted or empty.",
          "default": "",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "env": {
          "type": "object",
          "description": "Environment variables passed to the program.",
          "default": {},
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "substitutePath": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "from": {
                "type": "string",
                "description": "The absolute local path to be replaced when passing paths to the debugger.",
                "default": ""
              },
              "to": {
                "type": "string",
                "description": "The absolute remote path to be replaced when passing paths back to the client.",
                "default": ""
              }
            }
          },
          "description": "An array of mappings from a local path (editor) to the remote path (debugee). This setting is useful when working in a file system with symbolic links, running remote debugging, or debugging an executable compiled externally. The debug adapter will replace the local path with the remote path in all of the calls.",
          "default": [],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "buildFlags": {
          "type": "string",
          "description": "Build flags, to be passed to the Go compiler. Maps to dlv's `--build-flags` flag.",
          "default": "",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "dlvFlags": {
          "type": "array",
          "description": "Extra flags for `dlv`. See `dlv help` for the full list of supported. Flags such as `--log-output`, `--log`, `--log-dest`, `--api-version`, `--output`, `--backend` already have corresponding properties in the debug configuration, and flags such as `--listen` and `--headless` are used internally. If they are specified in `dlvFlags`, they may be ignored or cause an error.",
          "items": {
            "type": "string"
          },
          "default": [],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "port": {
          "type": "number",
          "description": "When applied to remote-attach configurations, will look for \"dlv ... --headless --listen=<host>:<port>\" server started externally. In dlv-dap mode this will apply to all other configurations as well. The extension will try to connect to an external server started with \"dlv dap --listen=<host>:<port>\" to ask it to launch/attach to the target process.",
          "default": 2345,
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "host": {
          "type": "string",
          "description": "When applied to remote-attach configurations, will look for \"dlv ... --headless --listen=<host>:<port>\" server started externally. In dlv-dap mode this will apply to all other configurations as well. The extension will try to connect to an external server started with \"dlv dap --listen=<host>:<port>\" to ask it to launch/attach to the target process.",
          "default": "127.0.0.1",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "trace": {
          "type": "string",
          "enum": [
            "verbose",
            "trace",
            "log",
            "info",
            "warn",
            "error"
          ],
          "default": "error",
          "description": "Various levels of logging shown in the debug console & 'Go Debug' output channel. When using the `legacy` debug adapter, the logs will also be written to a file if it is set to a value other than `error`.",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "envFile": {
          "type": [
            "string",
            "array"
          ],
          "items": {
            "type": "string"
          },
          "description": "Absolute path to a file containing environment variable definitions. Multiple files can be specified by provided an array of absolute paths",
          "default": "${workspaceFolder}/.env",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "backend": {
          "type": "string",
          "enum": [
            "default",
            "native",
            "lldb",
            "rr"
          ],
          "description": "Backend used by delve. Maps to `dlv`'s `--backend` flag.",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "output": {
          "type": "string",
          "description": "Output path for the binary of the debugee.",
          "default": "debug",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "logOutput": {
          "type": "string",
          "enum": [
            "debugger",
            "gdbwire",
            "lldbout",
            "debuglineerr",
            "rpc",
            "dap"
          ],
          "description": "Comma separated list of components that should produce debug output. Maps to dlv's `--log-output` flag. Check `dlv log` for details.",
          "default": "debugger",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "logDest": {
          "type": "string",
          "description": "dlv's `--log-dest` flag. See `dlv log` for details. Number argument is not allowed. Supported only in `dlv-dap` mode, and on Linux and Mac OS.",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "dlvLoadConfig": {
          "type": "object",
          "properties": {
            "followPointers": {
              "type": "boolean",
              "description": "FollowPointers requests pointers to be automatically dereferenced.",
              "default": true
            },
            "maxVariableRecurse": {
              "type": "number",
              "description": "MaxVariableRecurse is how far to recurse when evaluating nested types.",
              "default": 1
            },
            "maxStringLen": {
              "type": "number",
              "description": "MaxStringLen is the maximum number of bytes read from a string.",
              "default": 64
            },
            "maxArrayValues": {
              "type": "number",
              "description": "MaxArrayValues is the maximum number of elements read from an array, a slice or a map.",
              "default": 64
            },
            "maxStructFields": {
              "type": "number",
              "description": "MaxStructFields is the maximum number of fields read from a struct, -1 will read all fields.",
              "default": -1
            }
          },
          "description": "LoadConfig describes to delve, how to load values from target's memory. Not applicable when using `dlv-dap` mode.",
          "default": {
            "followPointers": true,
            "maxVariableRecurse": 1,
            "maxStringLen": 64,
            "maxArrayValues": 64,
            "maxStructFields": -1
          },
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "apiVersion": {
          "type": "number",
          "enum": [
            1,
            2
          ],
          "description": "Delve Api Version to use. Default value is 2. Maps to dlv's `--api-version` flag. Not applicable when using `dlv-dap` mode.",
          "default": 2,
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "stackTraceDepth": {
          "type": "number",
          "description": "Maximum depth of stack trace collected from Delve.",
          "default": 50,
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "showGlobalVariables": {
          "type": "boolean",
          "default": false,
          "description": "Boolean value to indicate whether global package variables should be shown in the variables pane or not.",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "showRegisters": {
          "type": "boolean",
          "default": false,
          "description": "Boolean value to indicate whether register variables should be shown in the variables pane or not.",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "hideSystemGoroutines": {
          "type": "boolean",
          "default": false,
          "description": "Boolean value to indicate whether system goroutines should be hidden from call stack view.",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "console": {
          "default": "internalConsole",
          "description": "(Experimental) Where to launch the debugger and the debug target: internal console, integrated terminal, or external terminal. It is ignored in remote debugging.",
          "enum": [
            "internalConsole",
            "integratedTerminal",
            "externalTerminal"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "asRoot": {
          "default": false,
          "description": "(Experimental) Debug with elevated permissions (on Unix). It requires `integrated` or `external` console modes and is ignored in remote debugging.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "serverReadyAction": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": false,
              "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
              "default": {
                "action": "openExternally"
              },
              "properties": {
                "action": {
                  "type": "string",
                  "enum": [
                    "openExternally"
                  ],
                  "enumDescriptions": [
                    "Open URI externally with the default application."
                  ],
                  "markdownDescription": "What to do with the URI when the server is ready.",
                  "default": "openExternally"
                },
                "pattern": {
                  "type": "string",
                  "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                  "default": "listening on port ([0-9]+)"
                },
                "uriFormat": {
                  "type": "string",
                  "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                  "default": "http://localhost:%s"
                }
              }
            },
            {
              "type": "object",
              "additionalProperties": false,
              "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
              "default": {
                "action": "debugWithEdge",
                "pattern": "listening on port ([0-9]+)",
                "uriFormat": "http://localhost:%s",
                "webRoot": "${workspaceFolder}"
              },
              "properties": {
                "action": {
                  "type": "string",
                  "enum": [
                    "debugWithChrome",
                    "debugWithEdge"
                  ],
                  "enumDescriptions": [
                    "Start debugging with the 'Debugger for Chrome'."
                  ],
                  "markdownDescription": "What to do with the URI when the server is ready.",
                  "default": "debugWithEdge"
                },
                "pattern": {
                  "type": "string",
                  "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                  "default": "listening on port ([0-9]+)"
                },
                "uriFormat": {
                  "type": "string",
                  "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                  "default": "http://localhost:%s"
                },
                "webRoot": {
                  "type": "string",
                  "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                  "default": "${workspaceFolder}"
                }
              }
            },
            {
              "type": "object",
              "additionalProperties": false,
              "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
              "default": {
                "action": "startDebugging",
                "name": "<launch browser config name>"
              },
              "required": [
                "name"
              ],
              "properties": {
                "action": {
                  "type": "string",
                  "enum": [
                    "startDebugging"
                  ],
                  "enumDescriptions": [
                    "Run another launch configuration."
                  ],
                  "markdownDescription": "What to do with the URI when the server is ready.",
                  "default": "startDebugging"
                },
                "pattern": {
                  "type": "string",
                  "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                  "default": "listening on port ([0-9]+)"
                },
                "name": {
                  "type": "string",
                  "markdownDescription": "Name of the launch configuration to run.",
                  "default": "Launch Browser"
                }
              }
            }
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "type": {
          "enum": [
            "go"
          ],
          "description": "Type of configuration.",
          "pattern": "^(?!node2)",
          "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
          "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
        },
        "request": {
          "enum": [
            "launch"
          ],
          "description": "Request type of configuration. Can be \"launch\" or \"attach\".",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "name": {
          "$ref": "#/definitions/common/properties/name",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "debugServer": {
          "$ref": "#/definitions/common/properties/debugServer",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "preLaunchTask": {
          "$ref": "#/definitions/common/properties/preLaunchTask",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "postDebugTask": {
          "$ref": "#/definitions/common/properties/postDebugTask",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "presentation": {
          "$ref": "#/definitions/common/properties/presentation",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "internalConsoleOptions": {
          "$ref": "#/definitions/common/properties/internalConsoleOptions",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        }
      },
      "type": "object"
    },
    "go:attach": {
      "required": [
        "name",
        "type",
        "request",
        "name",
        "type",
        "request",
        "name",
        "type",
        "request"
      ],
      "properties": {
        "debugAdapter": {
          "enum": [
            "legacy",
            "dlv-dap"
          ],
          "description": "Select which debug adapter to use with this launch configuration.",
          "default": "dlv-dap",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "processId": {
          "anyOf": [
            {
              "enum": [
                "${command:pickProcess}",
                "${command:pickGoProcess}"
              ],
              "description": "Use process picker to select a process to attach, or Process ID as integer."
            },
            {
              "type": "string",
              "description": "Attach to a process by name. If more than one process matches the name, use the process picker to select a process."
            },
            {
              "type": "number",
              "description": "The numeric ID of the process to be debugged. If 0, use the process picker to select a process."
            }
          ],
          "default": 0,
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "mode": {
          "enum": [
            "local",
            "remote"
          ],
          "description": "Indicates local or remote debugging. Local is similar to the `dlv attach` command, remote - to `dlv connect`",
          "default": "local",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "stopOnEntry": {
          "type": "boolean",
          "description": "Automatically stop program after attach.",
          "default": false,
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "dlvFlags": {
          "type": "array",
          "description": "Extra flags for `dlv`. See `dlv help` for the full list of supported. Flags such as `--log-output`, `--log`, `--log-dest`, `--api-version`, `--output`, `--backend` already have corresponding properties in the debug configuration, and flags such as `--listen` and `--headless` are used internally. If they are specified in `dlvFlags`, they may be ignored or cause an error.",
          "items": {
            "type": "string"
          },
          "default": [],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "showLog": {
          "type": "boolean",
          "description": "Show log output from the delve debugger. Maps to dlv's `--log` flag.",
          "default": false,
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "cwd": {
          "type": "string",
          "description": "Workspace relative or absolute path to the working directory of the program being debugged. Default is the current workspace.",
          "default": "${workspaceFolder}",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "remotePath": {
          "type": "string",
          "description": "The path to the source code on the remote machine, when the remote path is different from the local machine. If specified, becomes the first entry in substitutePath. Not supported with `dlv-dap`.",
          "markdownDeprecationMessage": "Use `substitutePath` instead.",
          "default": "",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "port": {
          "type": "number",
          "description": "When applied to remote-attach configurations, will look for \"dlv ... --headless --listen=<host>:<port>\" server started externally. In dlv-dap mode, this will apply to all other configurations as well. The extension will try to connect to an external server started with \"dlv dap --listen=<host>:<port>\" to ask it to launch/attach to the target process.",
          "default": 2345,
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "host": {
          "type": "string",
          "description": "When applied to remote-attach configurations, will look for \"dlv ... --headless --listen=<host>:<port>\" server started externally. In dlv-dap mode, this will apply to all other configurations as well. The extension will try to connect to an external server started with \"dlv dap --listen=<host>:<port>\" to ask it to launch/attach to the target process.",
          "default": "127.0.0.1",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "substitutePath": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "from": {
                "type": "string",
                "description": "The absolute local path to be replaced when passing paths to the debugger.",
                "default": ""
              },
              "to": {
                "type": "string",
                "description": "The absolute remote path to be replaced when passing paths back to the client.",
                "default": ""
              }
            }
          },
          "description": "An array of mappings from a local path (editor) to the remote path (debugee). This setting is useful when working in a file system with symbolic links, running remote debugging, or debugging an executable compiled externally. The debug adapter will replace the local path with the remote path in all of the calls.  Overriden by `remotePath`.",
          "default": [],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "trace": {
          "type": "string",
          "enum": [
            "verbose",
            "trace",
            "log",
            "info",
            "warn",
            "error"
          ],
          "default": "error",
          "description": "Various levels of logging shown in the debug console & 'Go Debug' output channel. When using the `legacy` debug adapter, the logs will also be written to a file if it is set to a value other than `error`.",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "backend": {
          "type": "string",
          "enum": [
            "default",
            "native",
            "lldb",
            "rr"
          ],
          "description": "Backend used by delve. Maps to `dlv`'s `--backend` flag.",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "logOutput": {
          "type": "string",
          "enum": [
            "debugger",
            "gdbwire",
            "lldbout",
            "debuglineerr",
            "rpc",
            "dap"
          ],
          "description": "Comma separated list of components that should produce debug output. Maps to dlv's `--log-output` flag. Check `dlv log` for details.",
          "default": "debugger",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "logDest": {
          "type": "string",
          "description": "dlv's `--log-dest` flag. See `dlv log` for details. Number argument is not allowed. Supported only in `dlv-dap` mode and on Linux and Mac OS.",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "dlvLoadConfig": {
          "type": "object",
          "properties": {
            "followPointers": {
              "type": "boolean",
              "description": "FollowPointers requests pointers to be automatically dereferenced",
              "default": true
            },
            "maxVariableRecurse": {
              "type": "number",
              "description": "MaxVariableRecurse is how far to recurse when evaluating nested types",
              "default": 1
            },
            "maxStringLen": {
              "type": "number",
              "description": "MaxStringLen is the maximum number of bytes read from a string",
              "default": 64
            },
            "maxArrayValues": {
              "type": "number",
              "description": "MaxArrayValues is the maximum number of elements read from an array, a slice or a map",
              "default": 64
            },
            "maxStructFields": {
              "type": "number",
              "description": "MaxStructFields is the maximum number of fields read from a struct, -1 will read all fields",
              "default": -1
            }
          },
          "description": "LoadConfig describes to delve, how to load values from target's memory. Not applicable when using `dlv-dap` mode.",
          "default": {
            "followPointers": true,
            "maxVariableRecurse": 1,
            "maxStringLen": 64,
            "maxArrayValues": 64,
            "maxStructFields": -1
          },
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "apiVersion": {
          "type": "number",
          "enum": [
            1,
            2
          ],
          "description": "Delve Api Version to use. Default value is 2. Not applicable when using `dlv-dap` mode.",
          "default": 2,
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "stackTraceDepth": {
          "type": "number",
          "description": "Maximum depth of stack trace collected from Delve.",
          "default": 50,
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "showGlobalVariables": {
          "type": "boolean",
          "default": false,
          "description": "Boolean value to indicate whether global package variables should be shown in the variables pane or not.",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "showRegisters": {
          "type": "boolean",
          "default": false,
          "description": "Boolean value to indicate whether register variables should be shown in the variables pane or not.",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "hideSystemGoroutines": {
          "type": "boolean",
          "default": false,
          "description": "Boolean value to indicate whether system goroutines should be hidden from call stack view.",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "console": {
          "default": "internalConsole",
          "description": "(Experimental) Where to launch the debugger: internal console, integrated terminal, or external terminal. This does not affect tty of the running program. It is ignored in remote debugging.",
          "enum": [
            "internalConsole",
            "integratedTerminal",
            "externalTerminal"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "asRoot": {
          "default": false,
          "description": "(Experimental) Debug with elevated permissions (on Unix). This requires `integrated` or `external` console modes and is ignored in remote debugging.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "type": {
          "enum": [
            "go"
          ],
          "description": "Type of configuration.",
          "pattern": "^(?!node2)",
          "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
          "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
        },
        "request": {
          "enum": [
            "attach"
          ],
          "description": "Request type of configuration. Can be \"launch\" or \"attach\".",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "name": {
          "$ref": "#/definitions/common/properties/name",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "debugServer": {
          "$ref": "#/definitions/common/properties/debugServer",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "preLaunchTask": {
          "$ref": "#/definitions/common/properties/preLaunchTask",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "postDebugTask": {
          "$ref": "#/definitions/common/properties/postDebugTask",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "presentation": {
          "$ref": "#/definitions/common/properties/presentation",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "internalConsoleOptions": {
          "$ref": "#/definitions/common/properties/internalConsoleOptions",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        }
      },
      "type": "object"
    },
    "docker:launch": {
      "properties": {
        "containerName": {
          "type": "string",
          "description": "Name of the container used for debugging.",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "dockerServerReadyAction": {
          "description": "Options for launching a browser to the Docker container. Similar to serverReadyAction, but replaces container ports with host ports.",
          "properties": {
            "action": {
              "type": "string",
              "description": "The action to take when the pattern is found.",
              "enum": [
                "debugWithChrome",
                "openExternally"
              ]
            },
            "containerName": {
              "type": "string",
              "description": "The container name to match the host port."
            },
            "pattern": {
              "type": "string",
              "description": "The regex pattern to look for in Debug console output.",
              "default": "(https?://\\S+|[0-9]+)"
            },
            "uriFormat": {
              "type": "string",
              "description": "The URI format to launch.",
              "default": "http://localhost:%s"
            },
            "webRoot": {
              "type": "string",
              "description": "The root folder from which web pages are served."
            }
          },
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "removeContainerAfterDebug": {
          "type": "boolean",
          "description": "Whether to remove the debug container after debugging.",
          "default": true,
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "platform": {
          "type": "string",
          "description": "The target platform for the application.",
          "enum": [
            "netCore",
            "node",
            "python"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "netCore": {
          "description": "Options for debugging .NET Core projects in Docker.",
          "properties": {
            "appProject": {
              "type": "string",
              "description": "The .NET Core project (.csproj, .fsproj, etc.) to debug."
            }
          },
          "required": [
            "appProject"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "node": {
          "description": "Options for debugging Node.js projects in Docker.",
          "properties": {
            "port": {
              "type": "integer",
              "description": "The debug port to use."
            },
            "address": {
              "type": "string",
              "description": "TCP/IP address of the debug port."
            },
            "sourceMaps": {
              "type": "boolean",
              "description": "Enable source maps by setting this to `true`."
            },
            "outFiles": {
              "type": "array",
              "description": "Array of glob patterns for locating generated JavaScript files.",
              "items": {
                "type": "string"
              }
            },
            "autoAttachChildProcesses": {
              "type": "boolean",
              "description": "Track all subprocesses of debuggee and automatically attach to those that are launched in debug mode."
            },
            "timeout": {
              "type": "integer",
              "description": "When restarting a session, give up after this number of milliseconds."
            },
            "stopOnEntry": {
              "type": "boolean",
              "description": "Break immediately when the program launches."
            },
            "localRoot": {
              "type": "string",
              "description": "VS Code's root directory."
            },
            "package": {
              "type": "string",
              "description": "The path to the package.json for the application."
            },
            "remoteRoot": {
              "type": "string",
              "description": "Node's root directory within the Docker container."
            },
            "smartStep": {
              "type": "boolean",
              "description": "Try to automatically step over code that doesn't map to source files."
            },
            "skipFiles": {
              "type": "array",
              "description": "Automatically skip files covered by these glob patterns.",
              "items": {
                "type": "string"
              }
            },
            "trace": {
              "type": "boolean",
              "description": "Enable diagnostic output."
            }
          },
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "python": {
          "description": "Options for debugging Python applications in Docker.",
          "properties": {
            "host": {
              "type": "string",
              "description": "The host for remote debugging.",
              "default": "localhost"
            },
            "port": {
              "type": "number",
              "description": "The port for remote debugging.",
              "default": 5678
            },
            "pathMappings": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "localRoot": {
                    "type": "string",
                    "description": "The host path."
                  },
                  "remoteRoot": {
                    "type": "string",
                    "description": "The container path."
                  }
                }
              }
            },
            "justMyCode": {
              "type": "boolean",
              "description": "Debug only user-written code."
            },
            "django": {
              "type": "boolean",
              "description": "Django debugging.",
              "default": false
            },
            "fastapi": {
              "type": "boolean",
              "description": "FastAPI debugging.",
              "default": false
            },
            "jinja": {
              "type": "boolean",
              "description": "Jinja template debugging (e.g. Flask).",
              "default": false
            },
            "projectType": {
              "type": "string",
              "description": "Type of the Python app.",
              "enum": [
                "django",
                "fastapi",
                "flask",
                "general"
              ]
            },
            "args": {
              "type": "array",
              "description": "Arguments passed to the Python app.",
              "items": {
                "type": "string"
              }
            }
          },
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "serverReadyAction": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": false,
              "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
              "default": {
                "action": "openExternally"
              },
              "properties": {
                "action": {
                  "type": "string",
                  "enum": [
                    "openExternally"
                  ],
                  "enumDescriptions": [
                    "Open URI externally with the default application."
                  ],
                  "markdownDescription": "What to do with the URI when the server is ready.",
                  "default": "openExternally"
                },
                "pattern": {
                  "type": "string",
                  "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                  "default": "listening on port ([0-9]+)"
                },
                "uriFormat": {
                  "type": "string",
                  "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                  "default": "http://localhost:%s"
                }
              }
            },
            {
              "type": "object",
              "additionalProperties": false,
              "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
              "default": {
                "action": "debugWithEdge",
                "pattern": "listening on port ([0-9]+)",
                "uriFormat": "http://localhost:%s",
                "webRoot": "${workspaceFolder}"
              },
              "properties": {
                "action": {
                  "type": "string",
                  "enum": [
                    "debugWithChrome",
                    "debugWithEdge"
                  ],
                  "enumDescriptions": [
                    "Start debugging with the 'Debugger for Chrome'."
                  ],
                  "markdownDescription": "What to do with the URI when the server is ready.",
                  "default": "debugWithEdge"
                },
                "pattern": {
                  "type": "string",
                  "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                  "default": "listening on port ([0-9]+)"
                },
                "uriFormat": {
                  "type": "string",
                  "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                  "default": "http://localhost:%s"
                },
                "webRoot": {
                  "type": "string",
                  "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                  "default": "${workspaceFolder}"
                }
              }
            },
            {
              "type": "object",
              "additionalProperties": false,
              "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
              "default": {
                "action": "startDebugging",
                "name": "<launch browser config name>"
              },
              "required": [
                "name"
              ],
              "properties": {
                "action": {
                  "type": "string",
                  "enum": [
                    "startDebugging"
                  ],
                  "enumDescriptions": [
                    "Run another launch configuration."
                  ],
                  "markdownDescription": "What to do with the URI when the server is ready.",
                  "default": "startDebugging"
                },
                "pattern": {
                  "type": "string",
                  "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                  "default": "listening on port ([0-9]+)"
                },
                "name": {
                  "type": "string",
                  "markdownDescription": "Name of the launch configuration to run.",
                  "default": "Launch Browser"
                }
              }
            }
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "type": {
          "enum": [
            "docker"
          ],
          "description": "Type of configuration.",
          "pattern": "^(?!node2)",
          "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
          "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
        },
        "request": {
          "enum": [
            "launch"
          ],
          "description": "Request type of configuration. Can be \"launch\" or \"attach\".",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "name": {
          "$ref": "#/definitions/common/properties/name",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "debugServer": {
          "$ref": "#/definitions/common/properties/debugServer",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "preLaunchTask": {
          "$ref": "#/definitions/common/properties/preLaunchTask",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "postDebugTask": {
          "$ref": "#/definitions/common/properties/postDebugTask",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "presentation": {
          "$ref": "#/definitions/common/properties/presentation",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "internalConsoleOptions": {
          "$ref": "#/definitions/common/properties/internalConsoleOptions",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        }
      },
      "required": [
        "name",
        "type",
        "request",
        "name",
        "type",
        "request",
        "name",
        "type",
        "request"
      ],
      "type": "object"
    },
    "docker:attach": {
      "properties": {
        "containerName": {
          "type": "string",
          "description": "The container name to attach to. If not specified, then user will be prompted to pick a container.",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "processName": {
          "type": "string",
          "description": "The process name to attach to. If this is used, 'processId' should not be used.",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "processId": {
          "anyOf": [
            {
              "type": "string",
              "description": "The process id to attach to. Use \"${command:pickProcess}\" to get a list of running processes to attach to. If 'processId' used, 'processName' should not be used.",
              "default": "${command:pickProcess}"
            },
            {
              "type": "integer",
              "description": "The process id to attach to. Use \"${command:pickProcess}\" to get a list of running processes to attach to. If 'processId' used, 'processName' should not be used.",
              "default": 0
            }
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "platform": {
          "type": "string",
          "description": "The target platform for the application.",
          "enum": [
            "netCore"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "sourceFileMap": {
          "type": "object",
          "description": "Optional source file mappings passed to the debug engine. Example: '{ \"/src\":\"${workspaceFolder}\" }'",
          "additionalProperties": {
            "type": "string"
          },
          "default": {
            "<insert-source-path-here>": "<insert-target-path-here>"
          },
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "netCore": {
          "description": "Options for debugging .NET Core projects in Docker.",
          "properties": {
            "debuggerPath": {
              "type": "string",
              "description": "The path for the debugger in the target container, for example `/remote_debugger/vsdbg`."
            }
          },
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "type": {
          "enum": [
            "docker"
          ],
          "description": "Type of configuration.",
          "pattern": "^(?!node2)",
          "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
          "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
        },
        "request": {
          "enum": [
            "attach"
          ],
          "description": "Request type of configuration. Can be \"launch\" or \"attach\".",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "name": {
          "$ref": "#/definitions/common/properties/name",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "debugServer": {
          "$ref": "#/definitions/common/properties/debugServer",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "preLaunchTask": {
          "$ref": "#/definitions/common/properties/preLaunchTask",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "postDebugTask": {
          "$ref": "#/definitions/common/properties/postDebugTask",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "presentation": {
          "$ref": "#/definitions/common/properties/presentation",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "internalConsoleOptions": {
          "$ref": "#/definitions/common/properties/internalConsoleOptions",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        }
      },
      "required": [
        "name",
        "type",
        "request",
        "name",
        "type",
        "request",
        "name",
        "type",
        "request"
      ],
      "type": "object"
    },
    "python:attach": {
      "properties": {
        "connect": {
          "label": "Attach by connecting to debugpy over a socket.",
          "properties": {
            "host": {
              "default": "127.0.0.1",
              "description": "Hostname or IP address to connect to.",
              "type": "string"
            },
            "port": {
              "description": "Port to connect to.",
              "type": "number"
            }
          },
          "required": [
            "port"
          ],
          "type": "object",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "debugAdapterPath": {
          "description": "Path (fully qualified) to the python debug adapter executable.",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "django": {
          "default": false,
          "description": "Django debugging.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "host": {
          "default": "127.0.0.1",
          "description": "Hostname or IP address to connect to.",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "jinja": {
          "default": null,
          "description": "Jinja template debugging (e.g. Flask).",
          "enum": [
            false,
            null,
            true
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "justMyCode": {
          "default": true,
          "description": "If true, show and debug only user-written code. If false, show and debug all code, including library calls.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "listen": {
          "label": "Attach by listening for incoming socket connection from debugpy",
          "properties": {
            "host": {
              "default": "127.0.0.1",
              "description": "Hostname or IP address of the interface to listen on.",
              "type": "string"
            },
            "port": {
              "description": "Port to listen on.",
              "type": "number"
            }
          },
          "required": [
            "port"
          ],
          "type": "object",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "logToFile": {
          "default": false,
          "description": "Enable logging of debugger events to a log file.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "pathMappings": {
          "default": [],
          "items": {
            "label": "Path mapping",
            "properties": {
              "localRoot": {
                "default": "${workspaceFolder}",
                "label": "Local source root.",
                "type": "string"
              },
              "remoteRoot": {
                "default": "",
                "label": "Remote source root.",
                "type": "string"
              }
            },
            "required": [
              "localRoot",
              "remoteRoot"
            ],
            "type": "object"
          },
          "label": "Path mappings.",
          "type": "array",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "port": {
          "description": "Port to connect to.",
          "type": "number",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "processId": {
          "anyOf": [
            {
              "default": "${command:pickProcess}",
              "description": "Use process picker to select a process to attach, or Process ID as integer.",
              "enum": [
                "${command:pickProcess}"
              ]
            },
            {
              "description": "ID of the local process to attach to.",
              "type": "integer"
            }
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "redirectOutput": {
          "default": true,
          "description": "Redirect output.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "showReturnValue": {
          "default": true,
          "description": "Show return value of functions when stepping.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "subProcess": {
          "default": false,
          "description": "Whether to enable Sub Process debugging",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "type": {
          "enum": [
            "python"
          ],
          "description": "Type of configuration.",
          "pattern": "^(?!node2)",
          "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
          "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
        },
        "request": {
          "enum": [
            "attach"
          ],
          "description": "Request type of configuration. Can be \"launch\" or \"attach\".",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "name": {
          "$ref": "#/definitions/common/properties/name",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "debugServer": {
          "$ref": "#/definitions/common/properties/debugServer",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "preLaunchTask": {
          "$ref": "#/definitions/common/properties/preLaunchTask",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "postDebugTask": {
          "$ref": "#/definitions/common/properties/postDebugTask",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "presentation": {
          "$ref": "#/definitions/common/properties/presentation",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "internalConsoleOptions": {
          "$ref": "#/definitions/common/properties/internalConsoleOptions",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        }
      },
      "required": [
        "name",
        "type",
        "request",
        "name",
        "type",
        "request",
        "name",
        "type",
        "request"
      ],
      "type": "object"
    },
    "python:launch": {
      "properties": {
        "args": {
          "default": [],
          "description": "Command line arguments passed to the program",
          "items": {
            "type": "string"
          },
          "type": "array",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "autoReload": {
          "default": {},
          "description": "Configures automatic reload of code on edit.",
          "properties": {
            "enable": {
              "default": false,
              "description": "Automatically reload code on edit.",
              "type": "boolean"
            },
            "exclude": {
              "default": [
                "**/.git/**",
                "**/.metadata/**",
                "**/__pycache__/**",
                "**/node_modules/**",
                "**/site-packages/**"
              ],
              "description": "Glob patterns of paths to exclude from auto reload.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "include": {
              "default": [
                "**/*.py",
                "**/*.pyw"
              ],
              "description": "Glob patterns of paths to include in auto reload.",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "console": {
          "default": "integratedTerminal",
          "description": "Where to launch the debug target: internal console, integrated terminal, or external terminal.",
          "enum": [
            "externalTerminal",
            "integratedTerminal",
            "internalConsole"
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "cwd": {
          "default": "${workspaceFolder}",
          "description": "Absolute path to the working directory of the program being debugged. Default is the root directory of the file (leave empty).",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "debugAdapterPath": {
          "description": "Path (fully qualified) to the python debug adapter executable.",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "django": {
          "default": false,
          "description": "Django debugging.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "env": {
          "additionalProperties": {
            "type": "string"
          },
          "default": {},
          "description": "Environment variables defined as a key value pair. Property ends up being the Environment Variable and the value of the property ends up being the value of the Env Variable.",
          "type": "object",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "envFile": {
          "default": "${workspaceFolder}/.env",
          "description": "Absolute path to a file containing environment variable definitions.",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "gevent": {
          "default": false,
          "description": "Enable debugging of gevent monkey-patched code.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "host": {
          "default": "localhost",
          "description": "IP address of the of the local debug server (default is localhost).",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "jinja": {
          "default": null,
          "description": "Jinja template debugging (e.g. Flask).",
          "enum": [
            false,
            null,
            true
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "justMyCode": {
          "default": true,
          "description": "Debug only user-written code.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "logToFile": {
          "default": false,
          "description": "Enable logging of debugger events to a log file.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "module": {
          "default": "",
          "description": "Name of the module to be debugged.",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "pathMappings": {
          "default": [],
          "items": {
            "label": "Path mapping",
            "properties": {
              "localRoot": {
                "default": "${workspaceFolder}",
                "label": "Local source root.",
                "type": "string"
              },
              "remoteRoot": {
                "default": "",
                "label": "Remote source root.",
                "type": "string"
              }
            },
            "required": [
              "localRoot",
              "remoteRoot"
            ],
            "type": "object"
          },
          "label": "Path mappings.",
          "type": "array",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "port": {
          "default": 0,
          "description": "Debug port (default is 0, resulting in the use of a dynamic port).",
          "type": "number",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "program": {
          "default": "${file}",
          "description": "Absolute path to the program.",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "purpose": {
          "default": [],
          "description": "Tells extension to use this configuration for test debugging, or when using debug-in-terminal command.",
          "items": {
            "enum": [
              "debug-test",
              "debug-in-terminal"
            ],
            "enumDescriptions": [
              "Use this configuration while debugging tests using test view or test debug commands.",
              "Use this configuration while debugging a file using debug in terminal button in the editor."
            ]
          },
          "type": "array",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "pyramid": {
          "default": false,
          "description": "Whether debugging Pyramid applications",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "python": {
          "default": "${command:python.interpreterPath}",
          "description": "Absolute path to the Python interpreter executable; overrides workspace configuration if set.",
          "type": "string",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "pythonArgs": {
          "default": [],
          "description": "Command-line arguments passed to the Python interpreter. To pass arguments to the debug target, use \"args\".",
          "items": {
            "type": "string"
          },
          "type": "array",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "redirectOutput": {
          "default": true,
          "description": "Redirect output.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "showReturnValue": {
          "default": true,
          "description": "Show return value of functions when stepping.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "stopOnEntry": {
          "default": false,
          "description": "Automatically stop after launch.",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "subProcess": {
          "default": false,
          "description": "Whether to enable Sub Process debugging",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "sudo": {
          "default": false,
          "description": "Running debug program under elevated permissions (on Unix).",
          "type": "boolean",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "serverReadyAction": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": false,
              "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
              "default": {
                "action": "openExternally"
              },
              "properties": {
                "action": {
                  "type": "string",
                  "enum": [
                    "openExternally"
                  ],
                  "enumDescriptions": [
                    "Open URI externally with the default application."
                  ],
                  "markdownDescription": "What to do with the URI when the server is ready.",
                  "default": "openExternally"
                },
                "pattern": {
                  "type": "string",
                  "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                  "default": "listening on port ([0-9]+)"
                },
                "uriFormat": {
                  "type": "string",
                  "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                  "default": "http://localhost:%s"
                }
              }
            },
            {
              "type": "object",
              "additionalProperties": false,
              "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
              "default": {
                "action": "debugWithEdge",
                "pattern": "listening on port ([0-9]+)",
                "uriFormat": "http://localhost:%s",
                "webRoot": "${workspaceFolder}"
              },
              "properties": {
                "action": {
                  "type": "string",
                  "enum": [
                    "debugWithChrome",
                    "debugWithEdge"
                  ],
                  "enumDescriptions": [
                    "Start debugging with the 'Debugger for Chrome'."
                  ],
                  "markdownDescription": "What to do with the URI when the server is ready.",
                  "default": "debugWithEdge"
                },
                "pattern": {
                  "type": "string",
                  "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                  "default": "listening on port ([0-9]+)"
                },
                "uriFormat": {
                  "type": "string",
                  "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                  "default": "http://localhost:%s"
                },
                "webRoot": {
                  "type": "string",
                  "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                  "default": "${workspaceFolder}"
                }
              }
            },
            {
              "type": "object",
              "additionalProperties": false,
              "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
              "default": {
                "action": "startDebugging",
                "name": "<launch browser config name>"
              },
              "required": [
                "name"
              ],
              "properties": {
                "action": {
                  "type": "string",
                  "enum": [
                    "startDebugging"
                  ],
                  "enumDescriptions": [
                    "Run another launch configuration."
                  ],
                  "markdownDescription": "What to do with the URI when the server is ready.",
                  "default": "startDebugging"
                },
                "pattern": {
                  "type": "string",
                  "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                  "default": "listening on port ([0-9]+)"
                },
                "name": {
                  "type": "string",
                  "markdownDescription": "Name of the launch configuration to run.",
                  "default": "Launch Browser"
                }
              }
            }
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "type": {
          "enum": [
            "python"
          ],
          "description": "Type of configuration.",
          "pattern": "^(?!node2)",
          "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
          "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
        },
        "request": {
          "enum": [
            "launch"
          ],
          "description": "Request type of configuration. Can be \"launch\" or \"attach\".",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "name": {
          "$ref": "#/definitions/common/properties/name",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "debugServer": {
          "$ref": "#/definitions/common/properties/debugServer",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "preLaunchTask": {
          "$ref": "#/definitions/common/properties/preLaunchTask",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "postDebugTask": {
          "$ref": "#/definitions/common/properties/postDebugTask",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "presentation": {
          "$ref": "#/definitions/common/properties/presentation",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "internalConsoleOptions": {
          "$ref": "#/definitions/common/properties/internalConsoleOptions",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        }
      },
      "required": [
        "name",
        "type",
        "request",
        "name",
        "type",
        "request",
        "name",
        "type",
        "request"
      ],
      "type": "object"
    },
    "Python Kernel Debug Adapter:launch": {
      "properties": {
        "serverReadyAction": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": false,
              "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
              "default": {
                "action": "openExternally"
              },
              "properties": {
                "action": {
                  "type": "string",
                  "enum": [
                    "openExternally"
                  ],
                  "enumDescriptions": [
                    "Open URI externally with the default application."
                  ],
                  "markdownDescription": "What to do with the URI when the server is ready.",
                  "default": "openExternally"
                },
                "pattern": {
                  "type": "string",
                  "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                  "default": "listening on port ([0-9]+)"
                },
                "uriFormat": {
                  "type": "string",
                  "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                  "default": "http://localhost:%s"
                }
              }
            },
            {
              "type": "object",
              "additionalProperties": false,
              "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
              "default": {
                "action": "debugWithEdge",
                "pattern": "listening on port ([0-9]+)",
                "uriFormat": "http://localhost:%s",
                "webRoot": "${workspaceFolder}"
              },
              "properties": {
                "action": {
                  "type": "string",
                  "enum": [
                    "debugWithChrome",
                    "debugWithEdge"
                  ],
                  "enumDescriptions": [
                    "Start debugging with the 'Debugger for Chrome'."
                  ],
                  "markdownDescription": "What to do with the URI when the server is ready.",
                  "default": "debugWithEdge"
                },
                "pattern": {
                  "type": "string",
                  "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                  "default": "listening on port ([0-9]+)"
                },
                "uriFormat": {
                  "type": "string",
                  "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                  "default": "http://localhost:%s"
                },
                "webRoot": {
                  "type": "string",
                  "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                  "default": "${workspaceFolder}"
                }
              }
            },
            {
              "type": "object",
              "additionalProperties": false,
              "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
              "default": {
                "action": "startDebugging",
                "name": "<launch browser config name>"
              },
              "required": [
                "name"
              ],
              "properties": {
                "action": {
                  "type": "string",
                  "enum": [
                    "startDebugging"
                  ],
                  "enumDescriptions": [
                    "Run another launch configuration."
                  ],
                  "markdownDescription": "What to do with the URI when the server is ready.",
                  "default": "startDebugging"
                },
                "pattern": {
                  "type": "string",
                  "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                  "default": "listening on port ([0-9]+)"
                },
                "name": {
                  "type": "string",
                  "markdownDescription": "Name of the launch configuration to run.",
                  "default": "Launch Browser"
                }
              }
            }
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "type": {
          "enum": [
            "Python Kernel Debug Adapter"
          ],
          "description": "Type of configuration.",
          "pattern": "^(?!node2)",
          "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
          "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
        },
        "request": {
          "enum": [
            "launch"
          ],
          "description": "Request type of configuration. Can be \"launch\" or \"attach\".",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "name": {
          "$ref": "#/definitions/common/properties/name",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "debugServer": {
          "$ref": "#/definitions/common/properties/debugServer",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "preLaunchTask": {
          "$ref": "#/definitions/common/properties/preLaunchTask",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "postDebugTask": {
          "$ref": "#/definitions/common/properties/postDebugTask",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "presentation": {
          "$ref": "#/definitions/common/properties/presentation",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "internalConsoleOptions": {
          "$ref": "#/definitions/common/properties/internalConsoleOptions",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        }
      },
      "required": [
        "name",
        "type",
        "request",
        "name",
        "type",
        "request",
        "name",
        "type",
        "request"
      ],
      "type": "object"
    },
    "vslsJoin:launch": {
      "required": [
        "name",
        "type",
        "request",
        "name",
        "type",
        "request",
        "name",
        "type",
        "request",
        "agentUri",
        "joinedInfo",
        "localPath",
        "pipeName"
      ],
      "properties": {
        "agentUri": {
          "type": "string",
          "description": "Agent Uri to connect to Live Share services",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "joinedInfo": {
          "type": "object",
          "description": "Join Info",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "localPath": {
          "type": "string",
          "description": "Local path of workspace",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "pipeName": {
          "type": "string",
          "description": "Pipe name to request host services",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "serverReadyAction": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": false,
              "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
              "default": {
                "action": "openExternally"
              },
              "properties": {
                "action": {
                  "type": "string",
                  "enum": [
                    "openExternally"
                  ],
                  "enumDescriptions": [
                    "Open URI externally with the default application."
                  ],
                  "markdownDescription": "What to do with the URI when the server is ready.",
                  "default": "openExternally"
                },
                "pattern": {
                  "type": "string",
                  "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                  "default": "listening on port ([0-9]+)"
                },
                "uriFormat": {
                  "type": "string",
                  "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                  "default": "http://localhost:%s"
                }
              }
            },
            {
              "type": "object",
              "additionalProperties": false,
              "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
              "default": {
                "action": "debugWithEdge",
                "pattern": "listening on port ([0-9]+)",
                "uriFormat": "http://localhost:%s",
                "webRoot": "${workspaceFolder}"
              },
              "properties": {
                "action": {
                  "type": "string",
                  "enum": [
                    "debugWithChrome",
                    "debugWithEdge"
                  ],
                  "enumDescriptions": [
                    "Start debugging with the 'Debugger for Chrome'."
                  ],
                  "markdownDescription": "What to do with the URI when the server is ready.",
                  "default": "debugWithEdge"
                },
                "pattern": {
                  "type": "string",
                  "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                  "default": "listening on port ([0-9]+)"
                },
                "uriFormat": {
                  "type": "string",
                  "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                  "default": "http://localhost:%s"
                },
                "webRoot": {
                  "type": "string",
                  "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                  "default": "${workspaceFolder}"
                }
              }
            },
            {
              "type": "object",
              "additionalProperties": false,
              "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
              "default": {
                "action": "startDebugging",
                "name": "<launch browser config name>"
              },
              "required": [
                "name"
              ],
              "properties": {
                "action": {
                  "type": "string",
                  "enum": [
                    "startDebugging"
                  ],
                  "enumDescriptions": [
                    "Run another launch configuration."
                  ],
                  "markdownDescription": "What to do with the URI when the server is ready.",
                  "default": "startDebugging"
                },
                "pattern": {
                  "type": "string",
                  "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                  "default": "listening on port ([0-9]+)"
                },
                "name": {
                  "type": "string",
                  "markdownDescription": "Name of the launch configuration to run.",
                  "default": "Launch Browser"
                }
              }
            }
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "type": {
          "enum": [
            "vslsJoin"
          ],
          "description": "Type of configuration.",
          "pattern": "^(?!node2)",
          "deprecationMessage": "Configured debug type 'vslsJoin' is installed but not supported in this environment.",
          "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
          "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
        },
        "request": {
          "enum": [
            "launch"
          ],
          "description": "Request type of configuration. Can be \"launch\" or \"attach\".",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "name": {
          "$ref": "#/definitions/common/properties/name",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "debugServer": {
          "$ref": "#/definitions/common/properties/debugServer",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "preLaunchTask": {
          "$ref": "#/definitions/common/properties/preLaunchTask",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "postDebugTask": {
          "$ref": "#/definitions/common/properties/postDebugTask",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "presentation": {
          "$ref": "#/definitions/common/properties/presentation",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "internalConsoleOptions": {
          "$ref": "#/definitions/common/properties/internalConsoleOptions",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        }
      },
      "type": "object"
    },
    "vslsShare:launch": {
      "required": [
        "name",
        "type",
        "request",
        "name",
        "type",
        "request",
        "name",
        "type",
        "request",
        "agentUri",
        "joinedInfo",
        "pipeName",
        "adapterProxy"
      ],
      "properties": {
        "agentUri": {
          "type": "string",
          "description": "Agent Uri to connect to Live Share services",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "joinedInfo": {
          "type": "object",
          "description": "Join Info",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "pipeName": {
          "type": "string",
          "description": "Pipe name to request host services",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "adapterProxy": {
          "type": "object",
          "description": "The adapter proxy",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "serverReadyAction": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": false,
              "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
              "default": {
                "action": "openExternally"
              },
              "properties": {
                "action": {
                  "type": "string",
                  "enum": [
                    "openExternally"
                  ],
                  "enumDescriptions": [
                    "Open URI externally with the default application."
                  ],
                  "markdownDescription": "What to do with the URI when the server is ready.",
                  "default": "openExternally"
                },
                "pattern": {
                  "type": "string",
                  "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                  "default": "listening on port ([0-9]+)"
                },
                "uriFormat": {
                  "type": "string",
                  "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                  "default": "http://localhost:%s"
                }
              }
            },
            {
              "type": "object",
              "additionalProperties": false,
              "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
              "default": {
                "action": "debugWithEdge",
                "pattern": "listening on port ([0-9]+)",
                "uriFormat": "http://localhost:%s",
                "webRoot": "${workspaceFolder}"
              },
              "properties": {
                "action": {
                  "type": "string",
                  "enum": [
                    "debugWithChrome",
                    "debugWithEdge"
                  ],
                  "enumDescriptions": [
                    "Start debugging with the 'Debugger for Chrome'."
                  ],
                  "markdownDescription": "What to do with the URI when the server is ready.",
                  "default": "debugWithEdge"
                },
                "pattern": {
                  "type": "string",
                  "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                  "default": "listening on port ([0-9]+)"
                },
                "uriFormat": {
                  "type": "string",
                  "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                  "default": "http://localhost:%s"
                },
                "webRoot": {
                  "type": "string",
                  "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                  "default": "${workspaceFolder}"
                }
              }
            },
            {
              "type": "object",
              "additionalProperties": false,
              "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
              "default": {
                "action": "startDebugging",
                "name": "<launch browser config name>"
              },
              "required": [
                "name"
              ],
              "properties": {
                "action": {
                  "type": "string",
                  "enum": [
                    "startDebugging"
                  ],
                  "enumDescriptions": [
                    "Run another launch configuration."
                  ],
                  "markdownDescription": "What to do with the URI when the server is ready.",
                  "default": "startDebugging"
                },
                "pattern": {
                  "type": "string",
                  "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                  "default": "listening on port ([0-9]+)"
                },
                "name": {
                  "type": "string",
                  "markdownDescription": "Name of the launch configuration to run.",
                  "default": "Launch Browser"
                }
              }
            }
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "type": {
          "enum": [
            "vslsShare"
          ],
          "description": "Type of configuration.",
          "pattern": "^(?!node2)",
          "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
          "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
        },
        "request": {
          "enum": [
            "launch"
          ],
          "description": "Request type of configuration. Can be \"launch\" or \"attach\".",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "name": {
          "$ref": "#/definitions/common/properties/name",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "debugServer": {
          "$ref": "#/definitions/common/properties/debugServer",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "preLaunchTask": {
          "$ref": "#/definitions/common/properties/preLaunchTask",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "postDebugTask": {
          "$ref": "#/definitions/common/properties/postDebugTask",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "presentation": {
          "$ref": "#/definitions/common/properties/presentation",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "internalConsoleOptions": {
          "$ref": "#/definitions/common/properties/internalConsoleOptions",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        }
      },
      "type": "object"
    },
    "Ruby:launch": {
      "required": [
        "name",
        "type",
        "request",
        "name",
        "type",
        "request",
        "name",
        "type",
        "request",
        "program"
      ],
      "properties": {
        "program": {
          "type": "string",
          "description": "Absolute path to the program.",
          "default": "${workspaceRoot}/main.rb",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "stopOnEntry": {
          "type": "boolean",
          "description": "Automatically stop after launch.",
          "default": true,
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "showDebuggerOutput": {
          "type": "boolean",
          "description": "Show output of the debugger in the console.",
          "default": false,
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "args": {
          "type": "array",
          "description": "Command line arguments passed to the program.",
          "items": {
            "type": "string"
          },
          "default": [],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "env": {
          "type": "object",
          "description": "Additional environment variables to pass to the debugging (and debugged) process.",
          "default": {},
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "cwd": {
          "type": "string",
          "description": "Absolute path to the working directory of the program being debugged.",
          "default": "${workspaceRoot}",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "useBundler": {
          "type": "boolean",
          "description": "Use `bundle exec` to run rdebug-ide. Enable this option if you have used bundle install --path with rdebug-ide as a bundled gem.",
          "default": false,
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "pathToRuby": {
          "type": "string",
          "description": "Path to the Ruby executable if it is not 'ruby', used to run the program without the debugger (under CTRL+F5)",
          "default": "ruby",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "pathToBundler": {
          "type": "string",
          "description": "If you use the `useBunder` option, and `bundle` is not in your path, provide the absolute path to `bundle` (eg. \"/usr/bin/bundle\" )",
          "default": "bundle",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "pathToRDebugIDE": {
          "type": "string",
          "description": "If `rdebug-ide` is not in your path, provide the absolute path to `rdebug-ide` (eg. \"c:\\ruby\\rdebug-ide.bat\" )",
          "default": "rdebug-ide",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "debuggerPort": {
          "type": "string",
          "description": "If you want to run more than one debugger, you can specify the port here.",
          "default": "1234",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "includes": {
          "type": "array",
          "description": "Additional paths to be added to Ruby's include path",
          "default": [],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "serverReadyAction": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": false,
              "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
              "default": {
                "action": "openExternally"
              },
              "properties": {
                "action": {
                  "type": "string",
                  "enum": [
                    "openExternally"
                  ],
                  "enumDescriptions": [
                    "Open URI externally with the default application."
                  ],
                  "markdownDescription": "What to do with the URI when the server is ready.",
                  "default": "openExternally"
                },
                "pattern": {
                  "type": "string",
                  "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                  "default": "listening on port ([0-9]+)"
                },
                "uriFormat": {
                  "type": "string",
                  "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                  "default": "http://localhost:%s"
                }
              }
            },
            {
              "type": "object",
              "additionalProperties": false,
              "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
              "default": {
                "action": "debugWithEdge",
                "pattern": "listening on port ([0-9]+)",
                "uriFormat": "http://localhost:%s",
                "webRoot": "${workspaceFolder}"
              },
              "properties": {
                "action": {
                  "type": "string",
                  "enum": [
                    "debugWithChrome",
                    "debugWithEdge"
                  ],
                  "enumDescriptions": [
                    "Start debugging with the 'Debugger for Chrome'."
                  ],
                  "markdownDescription": "What to do with the URI when the server is ready.",
                  "default": "debugWithEdge"
                },
                "pattern": {
                  "type": "string",
                  "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                  "default": "listening on port ([0-9]+)"
                },
                "uriFormat": {
                  "type": "string",
                  "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                  "default": "http://localhost:%s"
                },
                "webRoot": {
                  "type": "string",
                  "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                  "default": "${workspaceFolder}"
                }
              }
            },
            {
              "type": "object",
              "additionalProperties": false,
              "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
              "default": {
                "action": "startDebugging",
                "name": "<launch browser config name>"
              },
              "required": [
                "name"
              ],
              "properties": {
                "action": {
                  "type": "string",
                  "enum": [
                    "startDebugging"
                  ],
                  "enumDescriptions": [
                    "Run another launch configuration."
                  ],
                  "markdownDescription": "What to do with the URI when the server is ready.",
                  "default": "startDebugging"
                },
                "pattern": {
                  "type": "string",
                  "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                  "default": "listening on port ([0-9]+)"
                },
                "name": {
                  "type": "string",
                  "markdownDescription": "Name of the launch configuration to run.",
                  "default": "Launch Browser"
                }
              }
            }
          ],
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "type": {
          "enum": [
            "Ruby"
          ],
          "description": "Type of configuration.",
          "pattern": "^(?!node2)",
          "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
          "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
        },
        "request": {
          "enum": [
            "launch"
          ],
          "description": "Request type of configuration. Can be \"launch\" or \"attach\".",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "name": {
          "$ref": "#/definitions/common/properties/name",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "debugServer": {
          "$ref": "#/definitions/common/properties/debugServer",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "preLaunchTask": {
          "$ref": "#/definitions/common/properties/preLaunchTask",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "postDebugTask": {
          "$ref": "#/definitions/common/properties/postDebugTask",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "presentation": {
          "$ref": "#/definitions/common/properties/presentation",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "internalConsoleOptions": {
          "$ref": "#/definitions/common/properties/internalConsoleOptions",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        }
      },
      "type": "object"
    },
    "Ruby:attach": {
      "required": [
        "name",
        "type",
        "request",
        "name",
        "type",
        "request",
        "name",
        "type",
        "request",
        "cwd",
        "remoteHost",
        "remotePort",
        "remoteWorkspaceRoot"
      ],
      "properties": {
        "cwd": {
          "type": "string",
          "description": "Absolute path to the working directory of the program being debugged.",
          "default": "${workspaceRoot}",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "remoteHost": {
          "type": "string",
          "description": "Host address for remote debugging.",
          "default": "127.0.0.1",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "remotePort": {
          "type": "string",
          "description": "Port for remote debugging.",
          "default": "1234",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "localSocketPath": {
          "type": "string",
          "description": "Path to UNIX domain socket for remote debugging.",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "remoteWorkspaceRoot": {
          "type": "string",
          "description": "Remote workspace root, this parameter is required for remote debugging.",
          "default": "${workspaceRoot}",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "showDebuggerOutput": {
          "type": "boolean",
          "description": "Show output of the debugger in the console.",
          "default": false,
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "type": {
          "enum": [
            "Ruby"
          ],
          "description": "Type of configuration.",
          "pattern": "^(?!node2)",
          "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
          "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
        },
        "request": {
          "enum": [
            "attach"
          ],
          "description": "Request type of configuration. Can be \"launch\" or \"attach\".",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "name": {
          "$ref": "#/definitions/common/properties/name",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "debugServer": {
          "$ref": "#/definitions/common/properties/debugServer",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "preLaunchTask": {
          "$ref": "#/definitions/common/properties/preLaunchTask",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "postDebugTask": {
          "$ref": "#/definitions/common/properties/postDebugTask",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "presentation": {
          "$ref": "#/definitions/common/properties/presentation",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        },
        "internalConsoleOptions": {
          "$ref": "#/definitions/common/properties/internalConsoleOptions",
          "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
          "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
        }
      },
      "type": "object"
    }
  }
}